diff --git a/android/app/build.gradle b/android/app/build.gradle
index 07f00b4..93cc8d9 100644
--- a/android/app/build.gradle
+++ b/android/app/build.gradle
@@ -25,6 +25,7 @@ apply plugin: 'com.android.application'
 apply plugin: 'kotlin-android'
 apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
 apply plugin: 'com.google.gms.google-services'
+// apply plugin: "dev.flutter.flutter-gradle-plugin"
 
 
 android {
diff --git a/android/gradle/wrapper/gradle-wrapper.properties b/android/gradle/wrapper/gradle-wrapper.properties
index eabb85f..653f2e8 100644
--- a/android/gradle/wrapper/gradle-wrapper.properties
+++ b/android/gradle/wrapper/gradle-wrapper.properties
@@ -2,4 +2,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.3-all.zip
diff --git a/android/settings.gradle b/android/settings.gradle
index 33f0745..61d7968 100644
--- a/android/settings.gradle
+++ b/android/settings.gradle
@@ -9,3 +9,29 @@ localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
 def flutterSdkPath = properties.getProperty("flutter.sdk")
 assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
 apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
+
+// pluginManagement {
+//     def flutterSdkPath = {
+//         def properties = new Properties()
+//         file("local.properties").withInputStream { properties.load(it) }
+//         def flutterSdkPath = properties.getProperty("flutter.sdk")
+//         assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
+//         return flutterSdkPath
+//     }()
+
+//     includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")
+
+//     repositories {
+//         google()
+//         mavenCentral()
+//         gradlePluginPortal()
+//     }
+// }
+
+// plugins {
+//     id "dev.flutter.flutter-plugin-loader" version "1.0.0"
+//     id "com.android.application" version "8.1.0" apply false
+//     id "org.jetbrains.kotlin.android" version "1.8.22" apply false
+// }
+
+// include ":app"
\ No newline at end of file
diff --git a/lib/core/api_helper/api_helper.dart b/lib/core/api_helper/api_helper.dart
index f09ffc0..4438e80 100644
--- a/lib/core/api_helper/api_helper.dart
+++ b/lib/core/api_helper/api_helper.dart
@@ -1,11 +1,6 @@
-import 'dart:convert';
-
 import 'package:bizfns/core/common/Resource.dart';
 import 'package:dio/dio.dart' as dio;
 import 'package:dio/dio.dart';
-import 'package:dio/dio.dart';
-
-import '../utils/api_constants.dart';
 
 enum RequestType { GET, POST, PUT, PATCH, DELETE }
 
diff --git a/lib/core/error_page.dart b/lib/core/error_page.dart
index 472eff0..a2a03ea 100644
--- a/lib/core/error_page.dart
+++ b/lib/core/error_page.dart
@@ -8,7 +8,13 @@ class ErrorPage extends StatelessWidget {
     return const Scaffold(
       body: SafeArea(
         child: Center(
-          child: Text("Bad Request",style: TextStyle(fontSize: 16,color: Colors.black),),
+          child: Text(
+            "Bad Request",
+            style: TextStyle(
+              fontSize: 16,
+              color: Colors.black,
+            ),
+          ),
         ),
       ),
     );
diff --git a/lib/core/utils/Utils.dart b/lib/core/utils/Utils.dart
index 6271c87..094dd82 100644
--- a/lib/core/utils/Utils.dart
+++ b/lib/core/utils/Utils.dart
@@ -64,10 +64,11 @@ class Utils {
             title: const Text(
               'No Internet Connection !',
               style: TextStyle(
-                  color: Colors.black87,
-                  //fontFamily: font,
-                  fontSize: 15,
-                  fontWeight: FontWeight.w600),
+                color: Colors.black87,
+                //fontFamily: font,
+                fontSize: 15,
+                fontWeight: FontWeight.w600,
+              ),
             ),
             content: Container(
               height: 80,
@@ -76,10 +77,11 @@ class Utils {
               child: const Text(
                 "You would need internet to run the application. Would you like to turn it on ?",
                 style: TextStyle(
-                    color: Colors.black87,
-                    //fontFamily: font,
-                    fontSize: 12,
-                    fontWeight: FontWeight.w400),
+                  color: Colors.black87,
+                  //fontFamily: font,
+                  fontSize: 12,
+                  fontWeight: FontWeight.w400,
+                ),
               ),
             ),
             actions: <Widget>[
@@ -249,7 +251,7 @@ class Utils {
         var build = await deviceInfoPlugin.androidInfo;
         deviceName = build.model ?? "";
         deviceVersion = build.version.toString();
-        identifier = build.id??""; //UUID for Android
+        identifier = build.id ?? ""; //UUID for Android
       } else if (Platform.isIOS) {
         deviceType = "IOS";
         var data = await deviceInfoPlugin.iosInfo;
@@ -313,7 +315,7 @@ class Utils {
   }
 
   bool isValidPassword(String password, [int minLength = 8]) {
-    if (password == null || password.isEmpty) {
+    if (password.isEmpty) {
       return false;
     }
 
diff --git a/lib/core/utils/alert_dialog.dart b/lib/core/utils/alert_dialog.dart
index 21ec4f0..1c3f911 100644
--- a/lib/core/utils/alert_dialog.dart
+++ b/lib/core/utils/alert_dialog.dart
@@ -9,12 +9,19 @@ import 'package:sizing/sizing.dart';
 
 import 'Utils.dart';
 
-ShowDialog({required BuildContext context,required String title,required String msg,String?okButtonName,Function?okTap,bool? dismissable ,bool? isFullScreen,Color? headerColor}){
+ShowDialog(
+    {required BuildContext context,
+    required String title,
+    required String msg,
+    String? okButtonName,
+    Function? okTap,
+    bool? dismissable,
+    bool? isFullScreen,
+    Color? headerColor}) {
   showDialog(
     context: context,
-    useSafeArea:isFullScreen?? false,
-
-    barrierDismissible: dismissable??false,
+    useSafeArea: isFullScreen ?? false,
+    barrierDismissible: dismissable ?? false,
     builder: (ctx) => AlertDialog(
       elevation: 20,
       shape: RoundedRectangleBorder(
@@ -25,8 +32,10 @@ ShowDialog({required BuildContext context,required String title,required String
         children: [
           Container(
             decoration: BoxDecoration(
-              color: headerColor??AppColor.GERY,
-      borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0.ss),topRight: Radius.circular(10.0.ss)),
+              color: headerColor ?? AppColor.GERY,
+              borderRadius: BorderRadius.only(
+                  topLeft: Radius.circular(10.0.ss),
+                  topRight: Radius.circular(10.0.ss)),
             ),
             height: 60.ss,
             child: Row(
@@ -35,81 +44,102 @@ ShowDialog({required BuildContext context,required String title,required String
                 Expanded(
                   child: Container(
                       padding: EdgeInsets.symmetric(horizontal: 20.ss),
-                      child: CommonText(text: title,textStyle: CustomTextStyle(color: Colors.white,fontWeight: FontWeight.w700),maxLine: 3,)),
+                      child: CommonText(
+                        text: title,
+                        textStyle: CustomTextStyle(
+                          color: Colors.white,
+                          fontWeight: FontWeight.w700,
+                        ),
+                        maxLine: 3,
+                      )),
                 ),
-
-                IconButton(onPressed: (){
-                  Navigator.pop(context);
-                }, icon: Icon(Icons.clear),color: Colors.white,)
+                IconButton(
+                  onPressed: () {
+                    Navigator.pop(context);
+                  },
+                  icon: Icon(Icons.clear),
+                  color: Colors.white,
+                )
               ],
             ),
           ),
           Container(
-              padding: EdgeInsets.symmetric(horizontal: 20.ss,vertical: 10.ss),
+              padding: EdgeInsets.symmetric(horizontal: 20.ss, vertical: 10.ss),
               // height: MediaQuery.of(context).size.height-200,
-              width: MediaQuery.of(context).size.width-50,
-              child: CommonText(text: msg,textStyle: CustomTextStyle( fontSize: 12),maxLine: 100,)),
+              width: MediaQuery.of(context).size.width - 50,
+              child: CommonText(
+                text: msg,
+                textStyle: CustomTextStyle(fontSize: 12),
+                maxLine: 100,
+              )),
         ],
       ),
       actions: <Widget>[
-        okTap!= null ?   TextButton(
-          onPressed: () {
-            Navigator.of(ctx).pop();
-            okTap!();
-          },
-          child: Center(
-            child: Container(
-              color: AppColor.BUTTON_COLOR,
-              padding:  EdgeInsets.all(14),
-              child:  CommonText(text: okButtonName??"okay",textStyle: CustomTextStyle(color: Colors.white)),
-            ),
-          ),
-        )
-        :SizedBox(),
+        okTap != null
+            ? TextButton(
+                onPressed: () {
+                  Navigator.of(ctx).pop();
+                  okTap();
+                },
+                child: Center(
+                  child: Container(
+                    color: AppColor.BUTTON_COLOR,
+                    padding: EdgeInsets.all(14),
+                    child: CommonText(
+                        text: okButtonName ?? "okay",
+                        textStyle: CustomTextStyle(color: Colors.white)),
+                  ),
+                ),
+              )
+            : SizedBox(),
       ],
     ),
   );
 }
 
-ShowInformationDialog({required BuildContext context, String? title, String? msg,Function? onOkTap,Function? onCancelTap, bool? dismissOnTouchOutside} ){
-
+ShowInformationDialog(
+    {required BuildContext context,
+    String? title,
+    String? msg,
+    Function? onOkTap,
+    Function? onCancelTap,
+    bool? dismissOnTouchOutside}) {
   AwesomeDialog(
     context: context,
     animType: AnimType.leftSlide,
     headerAnimationLoop: false,
-    dismissOnTouchOutside: dismissOnTouchOutside??false,
+    dismissOnTouchOutside: dismissOnTouchOutside ?? false,
     dialogType: DialogType.question,
     // showCloseIcon: true,
-    title: title??'Warning',
-    desc: msg??"",
+    title: title ?? 'Warning',
+    desc: msg ?? "",
 
     // desc: 'Dialog description here..................................................',
     btnOkOnPress: () {
       // Utils().printMessage('OnClick');
-
     },
-    btnCancelOnPress:(){
-
-    } ,
+    btnCancelOnPress: () {},
     btnOkIcon: Icons.check_circle,
     onDismissCallback: (type) {
       Utils().printMessage('Dialog Dismiss from callback $type');
-
     },
   ).show();
 }
 
-
-ShowSuccessDialog({required BuildContext context, String? title, required String msg,required Function()? onOkTap, bool? dismissOnTouchOutside}){
-
+ShowSuccessDialog(
+    {required BuildContext context,
+    String? title,
+    required String msg,
+    required Function()? onOkTap,
+    bool? dismissOnTouchOutside}) {
   AwesomeDialog(
     context: context,
-    dismissOnTouchOutside: dismissOnTouchOutside??false,
+    dismissOnTouchOutside: dismissOnTouchOutside ?? false,
     animType: AnimType.leftSlide,
     headerAnimationLoop: true,
     dialogType: DialogType.success,
     // showCloseIcon: true,
-    title: title??'Success',
+    title: title ?? 'Success',
     desc: msg,
     // desc: 'Dialog description here..................................................',
     btnOkOnPress: onOkTap,
diff --git a/lib/core/utils/api_constants.dart b/lib/core/utils/api_constants.dart
index ee1b177..adc04ce 100644
--- a/lib/core/utils/api_constants.dart
+++ b/lib/core/utils/api_constants.dart
@@ -4,12 +4,12 @@
 class Urls {
   //AMIT - https://d452-223-185-34-234.ngrok-free.app/api
   //pranta - https://unduly-inspired-wolf.ngrok-free.app/api
-  static const String BASE_URL = "https://unduly-inspired-wolf.ngrok-free.app/api";
+  // static const String BASE_URL = "https://unduly-inspired-wolf.ngrok-free.app/api";
+  static const String BASE_URL = "http://localhost:8085/api"; //sayan
   static const String MEDIA_URL = "$BASE_URL/users/downloadMediafile/"; //live
   static const String DOWNLOAD_INVOICE_FILE =
       "$BASE_URL/users/downloadInvoiceFile/";
   // static const String SecondaryMEDIA_URL = "http://182.156.196.67:8085/api/users/downloadInvoiceFile/"; //live
-  // static const String BASE_URL = "http://192.168.0.73:8085/api"; //sayan
   //http://182.156.196.67:8085/api/users/downloadMediafile/
   static const int jobId = 1;
 
@@ -92,8 +92,10 @@ class Urls {
   static const String UPDATE_TAX_TABLE = "$BASE_URL/users/updateTaxTable";
   static const String SERVICE_ENIITY = "$BASE_URL/users/serviceEntityField";
   static const String ADD_SERVICE_ENTIYTY = "$BASE_URL/users/addServiceEntity";
-  static const String EDIT_SERVICE_ENTITY = "$BASE_URL/users/updateServiceObjectDetails";
-  static const String DELETE_SERVICE_ENTITY = "$BASE_URL/users/deleteServiceObject";
+  static const String EDIT_SERVICE_ENTITY =
+      "$BASE_URL/users/updateServiceObjectDetails";
+  static const String DELETE_SERVICE_ENTITY =
+      "$BASE_URL/users/deleteServiceObject";
   static const String CUSTOMER_SERVICE_ENTITY =
       "$BASE_URL/users/custWiseServiceEntity";
   static const String SERVICE_ENTITY_DETAILS =
@@ -102,13 +104,19 @@ class Urls {
   static const String UPLOAD_BUSINESS_LOGO =
       "$BASE_URL/profile/uploadBusinessLogo";
   static const String GET_JOB_PRICE = "$BASE_URL/users/getJobPrice";
-  static const String GET_JOB_NUMBER_BY_DATE = "$BASE_URL/users/getJobNumberByDate";
+  static const String GET_JOB_NUMBER_BY_DATE =
+      "$BASE_URL/users/getJobNumberByDate";
   static const String CREATE_INVOICE = "$BASE_URL/users/createInvoice";
-  static const String GET_EDIT_INVOICE = "$BASE_URL/users/getEditInvoiceValuesByJobIdAndCustomerId";
-  static const String GET_INVOICED_lIST = "$BASE_URL/users/getInvoiceListsByJobId";
-  static const String SAVE_INVOICE = "$BASE_URL/users/SaveEditInvoiceValuesByJobIdAndCustomerIds";
-  static const String UPDATE_INVOICE = "$BASE_URL/users/updateEditInvoiceValues";
-  static const String CREATE_INVOICE_PDF_BY_CUSTOMERS = "$BASE_URL/users/CreateInvoicePdfByCustomers";
+  static const String GET_EDIT_INVOICE =
+      "$BASE_URL/users/getEditInvoiceValuesByJobIdAndCustomerId";
+  static const String GET_INVOICED_lIST =
+      "$BASE_URL/users/getInvoiceListsByJobId";
+  static const String SAVE_INVOICE =
+      "$BASE_URL/users/SaveEditInvoiceValuesByJobIdAndCustomerIds";
+  static const String UPDATE_INVOICE =
+      "$BASE_URL/users/updateEditInvoiceValues";
+  static const String CREATE_INVOICE_PDF_BY_CUSTOMERS =
+      "$BASE_URL/users/CreateInvoicePdfByCustomers";
   static const String RECCURR_DATE = "$BASE_URL/users/getRecurrdate";
   static const String STAFF_VALIDATION =
       "$BASE_URL/users/staffvalidateRecurrDate";
@@ -141,10 +149,12 @@ class Urls {
 
   static const String USER_TYPE = "$BASE_URL/users/getUserTypeAndUserInfo";
 
-  static const String GET_PRIVILEGE = "$BASE_URL/users/get_assigned_priviledges";
+  static const String GET_PRIVILEGE =
+      "$BASE_URL/users/get_assigned_priviledges";
 
   static const String SAVE_TIME_SHEET = "$BASE_URL/users/saveTimeSheet";
-  static const String TIME_SHEET_BY_BILLNO_STAFF = "$BASE_URL/users/TimeSheetbyBillNoAndStaffId";
+  static const String TIME_SHEET_BY_BILLNO_STAFF =
+      "$BASE_URL/users/TimeSheetbyBillNoAndStaffId";
   static const String SAVE_PRIVILEGE = "$BASE_URL/users/save_user_priviledges";
 
   static const String GET_REMINDER = "$BASE_URL/users/getNotificationMaster";
diff --git a/lib/core/utils/bizfns_layout_widget.dart b/lib/core/utils/bizfns_layout_widget.dart
index ab2d5e4..1277fc1 100644
--- a/lib/core/utils/bizfns_layout_widget.dart
+++ b/lib/core/utils/bizfns_layout_widget.dart
@@ -49,10 +49,9 @@ class BizfnsAppBar extends StatelessWidget implements PreferredSizeWidget {
               //   model.images = null;
 
               // }
-              if(model.allImageList !=null){
+              if (model.allImageList != null) {
                 model.allImageList!.clear();
-                model.allImageList!
-                    .addAll(model!.copyImages!);
+                model.allImageList!.addAll(model.copyImages!);
               }
               // if(Provider.of<JobScheduleProvider>(context, listen: false).items.isNotEmpty){
               //   Provider.of<JobScheduleProvider>(context, listen: false).loadPrevData(context);
@@ -129,7 +128,7 @@ class BizfnsAppBar extends StatelessWidget implements PreferredSizeWidget {
                     },
                   ),
                 ]
-              : title == 'Google-docs' && AuthManager.signIn() != null
+              : title == 'Google-docs'
                   ? [
                       InkWell(
                         child: const Center(
diff --git a/lib/core/widgets/TimeJobScheduleListWidget/time_job_schedule_list.dart b/lib/core/widgets/TimeJobScheduleListWidget/time_job_schedule_list.dart
index 18836a9..33c5657 100644
--- a/lib/core/widgets/TimeJobScheduleListWidget/time_job_schedule_list.dart
+++ b/lib/core/widgets/TimeJobScheduleListWidget/time_job_schedule_list.dart
@@ -25,7 +25,6 @@ import '../../utils/route_function.dart';
 import '../HeaderJobPageWidget/header_jon_page_widget.dart';
 
 class TimeJobScheduleList extends StatefulWidget {
-
   const TimeJobScheduleList({Key? key}) : super(key: key);
 
   @override
@@ -92,257 +91,230 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
 
   @override
   Widget build(BuildContext context) {
-    return context
-        .watch<JobScheduleProvider>()
-        .loading || isDrag
-        ? const Center(
-      child: CircularProgressIndicator(),
-    )
-        : context
-        .watch<JobScheduleProvider>()
-        .items
-        .isEmpty
+    return context.watch<JobScheduleProvider>().loading || isDrag
         ? const Center(
-      child: Text('Can not load result.....'),
-    )
-        : GestureDetector(
-      onHorizontalDragEnd: (dragDetails) {
-        int dragValue = dragDetails.primaryVelocity!.toInt();
-
-        String dateSelected = Provider
-            .of<JobScheduleProvider>(
-            context,
-            listen: false)
-            .date;
-        DateTime selectedDateTime = dateSelected.length <= 10
-            ? DateTime.now()
-            : DateTime.parse(dateSelected);
-
-        if (dragValue < 0) {
-          ///todo moving right
-          ///todo increase day by 1
-          ///
-
-
-          DateTime date =
-          selectedDateTime.add(Duration(days: 1));
-
-
-          Provider
-              .of<JobScheduleProvider>(context,
-              listen: false)
-              .date = date.toString();
-
-          Provider.of<JobScheduleProvider>(context,
-              listen: false)
-              .changeData(date.toString());
-
-          Provider.of<JobScheduleProvider>(context, listen: false)
-              .getScheduleList(context, dragValue: 1);
-        } else if (dragValue > 0) {
-          ///todo moving left
-          ///todo reduce day by 1
-          ///
-          DateTime date =
-          selectedDateTime.subtract(Duration(days: 1));
-
-          Provider
-              .of<JobScheduleProvider>(context,
-              listen: false)
-              .date = date.toString();
-
-          Provider.of<JobScheduleProvider>(context,
-              listen: false)
-              .changeData(date.toString());
-
-          Provider.of<JobScheduleProvider>(context, listen: false)
-              .getScheduleList(context, dragValue: -1);
-        }
+            child: CircularProgressIndicator(),
+          )
+        : context.watch<JobScheduleProvider>().items.isEmpty
+            ? const Center(
+                child: Text('Can not load result.....'),
+              )
+            : GestureDetector(
+                onHorizontalDragEnd: (dragDetails) {
+                  int dragValue = dragDetails.primaryVelocity!.toInt();
+
+                  String dateSelected =
+                      Provider.of<JobScheduleProvider>(context, listen: false)
+                          .date;
+                  DateTime selectedDateTime = dateSelected.length <= 10
+                      ? DateTime.now()
+                      : DateTime.parse(dateSelected);
+
+                  if (dragValue < 0) {
+                    ///todo moving right
+                    ///todo increase day by 1
+                    ///
+
+                    DateTime date = selectedDateTime.add(Duration(days: 1));
+
+                    Provider.of<JobScheduleProvider>(context, listen: false)
+                        .date = date.toString();
+
+                    Provider.of<JobScheduleProvider>(context, listen: false)
+                        .changeData(date.toString());
+
+                    Provider.of<JobScheduleProvider>(context, listen: false)
+                        .getScheduleList(context, dragValue: 1);
+                  } else if (dragValue > 0) {
+                    ///todo moving left
+                    ///todo reduce day by 1
+                    ///
+                    DateTime date =
+                        selectedDateTime.subtract(Duration(days: 1));
+
+                    Provider.of<JobScheduleProvider>(context, listen: false)
+                        .date = date.toString();
+
+                    Provider.of<JobScheduleProvider>(context, listen: false)
+                        .changeData(date.toString());
+
+                    Provider.of<JobScheduleProvider>(context, listen: false)
+                        .getScheduleList(context, dragValue: -1);
+                  }
 
-        ///todo load data
-        ///
-        ///
-      },
-      child: ListView.builder(
-        shrinkWrap: true,
-        physics: const ScrollPhysics(),
-        itemCount: timeScheduleController.items.length,
-        controller: controller,
-        itemBuilder: (context, timeIndex) {
-          return Column(
-            key: timeScheduleController.keys[timeIndex],
-            children: [
-              const Gap(10),
-              Padding(
-                padding:
-                const EdgeInsets.symmetric(horizontal: 20),
-                child: Row(
-                  mainAxisAlignment: MainAxisAlignment.start,
-                  children: [
-                    Text(
-                      simplifyTime(timeScheduleController
-                          .items[timeIndex].time!),
-                      style: TextStyle(
-                          color: isAfter(
-                              timeScheduleController.date,
-                              timeScheduleController
-                                  .items[timeIndex].time!)
-                              ? Colors.black
-                              : Colors.black.withOpacity(0.4)),
-                    ),
-                    const Gap(0.2),
-                    GestureDetector(
-                      onTap: () {
-                        print('Time Index: $timeIndex');
-
-                        ///todo list of  times available
-                        ///
-                        ///
-                        List<String?> timeList =
-                        timeScheduleController.items!.map((e) => e.time)
-                            .toList()
-                            .where((element) =>
-                            isAfter(
-                                timeScheduleController.date, element!))
-                            .toList();
-
-                        timeList.forEach((element) {
-                          print('Time Available: $element');
-                        });
-
-                        String time = timeScheduleController
-                            .items[timeIndex].time ??
-                            "";
-
-                        Utils().printMessage(
-                            "==============>>>> Here in TimeJobScheduleList.dart with date: ${timeScheduleController
-                                .date} Time: $time");
-                        Utils().printMessage(
-                            "==============>>>> ${timeScheduleController
-                                .date}");
-
-                        Provider
-                            .of<ServiceProvider>(context,
-                            listen: false)
-                            .selectedIndex
-                            .clear();
-                        Provider
-                            .of<StaffProvider>(context,
-                            listen: false)
-                            .selectedIndex
-                            .clear();
-                        Provider
-                            .of<MaterialProvider>(context,
-                            listen: false)
-                            .selectedIndex
-                            .clear();
-                        AddScheduleModel model =
-                            AddScheduleModel.addSchedule;
-
-                        model.clearData();
-
-                        model.startDate =
-                            timeScheduleController.date;
-
-                        model.startTime = getTime(
-                            timeScheduleController
-                                .items[timeIndex].time!);
-
-                        int duration = getDuration(
-                            timeScheduleController.items);
-
-                        model.endDate =
-                            timeScheduleController.date;
-
-                        model.endTime = endTime(
-                            timeScheduleController
-                                .items[timeIndex].time!,
-                            duration);
-
-                        if (isAfter(timeScheduleController.date,
-                            time)) {
-                          model.isAdding = true;
-
-                          var dayCount =
-                              timeScheduleController.dayCount;
-
-                          if (dayCount == 0 || dayCount == 6) {
-                            ///todo: show a dialogue if the company
-                            ///todo: want to create job on holiday
-                            ///
-                            ///
-                            showCupertinoDialog(
-                              context: context,
-                              builder: (_) {
-                                return CupertinoAlertDialog(
-                                  content: const Text(
-                                    'Are you sure, you want to schedule job on holiday ?',
-                                    style: TextStyle(
-                                      // color: Color(0xff093d52),
-                                      fontSize: 17,
-                                      fontWeight:
-                                      FontWeight.bold,
-                                    ),
-                                  ),
-                                  actions: [
-                                    CupertinoButton(
-                                      child: const Text(
-                                        'Yes, I will',
-                                        style: TextStyle(
-                                          color: Colors.blue,
-                                        ),
-                                      ),
-                                      onPressed: () {
-                                        print(
-                                            "timeIndex====>$timeIndex");
-                                        context.pop();
-                                        Provider
-                                            .of<ServiceProvider>(
-                                            context,
-                                            listen: false)
-                                            .selectedIndex
-                                            .clear();
-                                        Provider
-                                            .of<StaffProvider>(
-                                            context,
-                                            listen: false)
-                                            .selectedIndex
-                                            .clear();
-                                        Provider
-                                            .of<MaterialProvider>(
-                                            context,
-                                            listen: false)
-                                            .selectedIndex
-                                            .clear();
-
-                                        model.startDate =
+                  ///todo load data
+                  ///
+                  ///
+                },
+                child: ListView.builder(
+                  shrinkWrap: true,
+                  physics: const ScrollPhysics(),
+                  itemCount: timeScheduleController.items.length,
+                  controller: controller,
+                  itemBuilder: (context, timeIndex) {
+                    return Column(
+                      key: timeScheduleController.keys[timeIndex],
+                      children: [
+                        const Gap(10),
+                        Padding(
+                          padding: const EdgeInsets.symmetric(horizontal: 20),
+                          child: Row(
+                            mainAxisAlignment: MainAxisAlignment.start,
+                            children: [
+                              Text(
+                                simplifyTime(timeScheduleController
+                                    .items[timeIndex].time!),
+                                style: TextStyle(
+                                    color: isAfter(
+                                            timeScheduleController.date,
                                             timeScheduleController
-                                                .date;
+                                                .items[timeIndex].time!)
+                                        ? Colors.black
+                                        : Colors.black.withOpacity(0.4)),
+                              ),
+                              const Gap(0.2),
+                              GestureDetector(
+                                onTap: () {
+                                  print('Time Index: $timeIndex');
+
+                                  ///todo list of  times available
+                                  ///
+                                  ///
+                                  List<String?> timeList =
+                                      timeScheduleController.items
+                                          .map((e) => e.time)
+                                          .toList()
+                                          .where((element) => isAfter(
+                                              timeScheduleController.date,
+                                              element!))
+                                          .toList();
+
+                                  timeList.forEach((element) {
+                                    print('Time Available: $element');
+                                  });
+
+                                  String time = timeScheduleController
+                                          .items[timeIndex].time ??
+                                      "";
+
+                                  Utils().printMessage(
+                                      "==============>>>> Here in TimeJobScheduleList.dart with date: ${timeScheduleController.date} Time: $time");
+                                  Utils().printMessage(
+                                      "==============>>>> ${timeScheduleController.date}");
+
+                                  Provider.of<ServiceProvider>(context,
+                                          listen: false)
+                                      .selectedIndex
+                                      .clear();
+                                  Provider.of<StaffProvider>(context,
+                                          listen: false)
+                                      .selectedIndex
+                                      .clear();
+                                  Provider.of<MaterialProvider>(context,
+                                          listen: false)
+                                      .selectedIndex
+                                      .clear();
+                                  AddScheduleModel model =
+                                      AddScheduleModel.addSchedule;
+
+                                  model.clearData();
+
+                                  model.startDate = timeScheduleController.date;
+
+                                  model.startTime = getTime(
+                                      timeScheduleController
+                                          .items[timeIndex].time!);
 
-                                        model.endDate =
-                                            timeScheduleController
-                                                .date;
-
-                                        Provider.of<JobScheduleProvider>(
-                                            context,
-                                            listen: false)
-                                            .deleteRecurrDate(
-                                            context);
-
-                                        GoRouter.of(context)
-                                            .pushNamed(
-                                            'create-schedule',
-                                            extra: {
-                                              'time': getTime(
-                                                  timeScheduleController
-                                                      .items[
-                                                  timeIndex]
-                                                      .time!),
-                                            }).whenComplete(() {
-                                          log("awww yeahhhh 03");
-                                          initState();
-                                        });
-                                        /*Navigate(context, SCHEDULE_JOB,
+                                  int duration =
+                                      getDuration(timeScheduleController.items);
+
+                                  model.endDate = timeScheduleController.date;
+
+                                  model.endTime = endTime(
+                                      timeScheduleController
+                                          .items[timeIndex].time!,
+                                      duration);
+
+                                  if (isAfter(
+                                      timeScheduleController.date, time)) {
+                                    model.isAdding = true;
+
+                                    var dayCount =
+                                        timeScheduleController.dayCount;
+
+                                    if (dayCount == 0 || dayCount == 6) {
+                                      ///todo: show a dialogue if the company
+                                      ///todo: want to create job on holiday
+                                      ///
+                                      ///
+                                      showCupertinoDialog(
+                                        context: context,
+                                        builder: (_) {
+                                          return CupertinoAlertDialog(
+                                            content: const Text(
+                                              'Are you sure, you want to schedule job on holiday ?',
+                                              style: TextStyle(
+                                                // color: Color(0xff093d52),
+                                                fontSize: 17,
+                                                fontWeight: FontWeight.bold,
+                                              ),
+                                            ),
+                                            actions: [
+                                              CupertinoButton(
+                                                child: const Text(
+                                                  'Yes, I will',
+                                                  style: TextStyle(
+                                                    color: Colors.blue,
+                                                  ),
+                                                ),
+                                                onPressed: () {
+                                                  print(
+                                                      "timeIndex====>$timeIndex");
+                                                  context.pop();
+                                                  Provider.of<ServiceProvider>(
+                                                          context,
+                                                          listen: false)
+                                                      .selectedIndex
+                                                      .clear();
+                                                  Provider.of<StaffProvider>(
+                                                          context,
+                                                          listen: false)
+                                                      .selectedIndex
+                                                      .clear();
+                                                  Provider.of<MaterialProvider>(
+                                                          context,
+                                                          listen: false)
+                                                      .selectedIndex
+                                                      .clear();
+
+                                                  model.startDate =
+                                                      timeScheduleController
+                                                          .date;
+
+                                                  model.endDate =
+                                                      timeScheduleController
+                                                          .date;
+
+                                                  Provider.of<JobScheduleProvider>(
+                                                          context,
+                                                          listen: false)
+                                                      .deleteRecurrDate(
+                                                          context);
+
+                                                  GoRouter.of(context)
+                                                      .pushNamed(
+                                                          'create-schedule',
+                                                          extra: {
+                                                        'time': getTime(
+                                                            timeScheduleController
+                                                                .items[
+                                                                    timeIndex]
+                                                                .time!),
+                                                      }).whenComplete(() {
+                                                    log("awww yeahhhh 03");
+                                                    initState();
+                                                  });
+                                                  /*Navigate(context, SCHEDULE_JOB,
                                                 params: {
                                                   'time': getTime(
                                                       timeScheduleController
@@ -350,121 +322,118 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
                                                           .jobList![timeIndex]
                                                           .time!),
                                                 });*/
-                                      },
-                                    ),
-                                    CupertinoButton(
-                                      child: const Text(
-                                        'No, Thanks for notifying',
-                                        style: TextStyle(
-                                          color: Colors.red,
-                                        ),
-                                      ),
-                                      onPressed: () {
-                                        context.pop();
-                                      },
-                                    ),
-                                  ],
-                                );
-                              },
-                            );
-                          } else {
-                            model.startDate =
-                                timeScheduleController.date;
-                            model.endDate =
-                                timeScheduleController.date;
-
-                            log("model.startdate : ${model.startDate}");
-                            log("model.enddate : ${model.endDate}");
-                            log("model.starttime : ${model.startTime}");
-                            log("model.endtime : ${model.endTime}");
-
-                            Provider.of<JobScheduleProvider>(
-                                context,
-                                listen: false)
-                                .deleteRecurrDate(context);
-
-                            GoRouter.of(context).pushNamed(
-                                'create-schedule',
-                                extra: {
-                                  'time': getTime(
-                                      timeScheduleController
-                                          .items[timeIndex]
-                                          .time!),
-                                }).whenComplete(() {
-                              log("awww yeahhhh 02");
-                              initState();
-                            });
-
-                            /*Navigate(context, SCHEDULE_JOB, params: {
+                                                },
+                                              ),
+                                              CupertinoButton(
+                                                child: const Text(
+                                                  'No, Thanks for notifying',
+                                                  style: TextStyle(
+                                                    color: Colors.red,
+                                                  ),
+                                                ),
+                                                onPressed: () {
+                                                  context.pop();
+                                                },
+                                              ),
+                                            ],
+                                          );
+                                        },
+                                      );
+                                    } else {
+                                      model.startDate =
+                                          timeScheduleController.date;
+                                      model.endDate =
+                                          timeScheduleController.date;
+
+                                      log("model.startdate : ${model.startDate}");
+                                      log("model.enddate : ${model.endDate}");
+                                      log("model.starttime : ${model.startTime}");
+                                      log("model.endtime : ${model.endTime}");
+
+                                      Provider.of<JobScheduleProvider>(context,
+                                              listen: false)
+                                          .deleteRecurrDate(context);
+
+                                      GoRouter.of(context)
+                                          .pushNamed('create-schedule', extra: {
+                                        'time': getTime(timeScheduleController
+                                            .items[timeIndex].time!),
+                                      }).whenComplete(() {
+                                        log("awww yeahhhh 02");
+                                        initState();
+                                      });
+
+                                      /*Navigate(context, SCHEDULE_JOB, params: {
                                   'time': getTime(timeScheduleController
                                       .items[0].jobList![timeIndex].time!),
                                 });*/
-                          }
-                        } else {}
-                      },
-                      child: isAfter(
-                          timeScheduleController.date,
-                          timeScheduleController
-                              .items[timeIndex].time!)
-                          ? Padding(
-                        padding: const EdgeInsets.symmetric(
-                            horizontal: 4.0),
-                        child: Icon(
-                          Icons.add_circle_outline,
-                          color: getColor(timeScheduleController
-                              .items[timeIndex].schedule!.length),
-                          size: 24,
+                                    }
+                                  } else {}
+                                },
+                                child: isAfter(
+                                        timeScheduleController.date,
+                                        timeScheduleController
+                                            .items[timeIndex].time!)
+                                    ? Padding(
+                                        padding: const EdgeInsets.symmetric(
+                                            horizontal: 4.0),
+                                        child: Icon(
+                                          Icons.add_circle_outline,
+                                          color: getColor(timeScheduleController
+                                              .items[timeIndex]
+                                              .schedule!
+                                              .length),
+                                          size: 24,
+                                        ),
+                                      )
+                                    : const Padding(
+                                        padding: EdgeInsets.symmetric(
+                                            horizontal: 4.0),
+                                        child: Icon(
+                                          Icons.add_circle_outline,
+                                          color: Colors.grey,
+                                          size: 24,
+                                        ),
+                                      ),
+                              ),
+                              Flexible(
+                                flex: 2,
+                                child: Container(
+                                  height: 0.5,
+                                  color: isAfter(
+                                          timeScheduleController.date,
+                                          timeScheduleController
+                                              .items[timeIndex].time!)
+                                      ? AppColor.APP_BAR_COLOUR
+                                      : AppColor.APP_BAR_COLOUR
+                                          .withOpacity(0.4),
+                                ),
+                              )
+                            ],
+                          ),
                         ),
-                      )
-                          : const Padding(
-                        padding: EdgeInsets.symmetric(
-                            horizontal: 4.0),
-                        child: Icon(
-                          Icons.add_circle_outline,
-                          color: Colors.grey,
-                          size: 24,
+                        itemIndex == timeIndex
+                            ? Padding(
+                                padding: EdgeInsets.only(top: 10.0),
+                                child: Container(
+                                  height: 20,
+                                  width: 150,
+                                  alignment: Alignment.center,
+                                  decoration: BoxDecoration(
+                                      color: Colors.green.shade400,
+                                      borderRadius: BorderRadius.circular(5)),
+                                ))
+                            : Container(),
+                        Padding(
+                          padding: const EdgeInsets.only(left: 100),
+                          child: scheduleTiles(context, timeIndex),
                         ),
-                      ),
-                    ),
-                    Flexible(
-                      flex: 2,
-                      child: Container(
-                        height: 0.5,
-                        color: isAfter(
-                            timeScheduleController.date,
-                            timeScheduleController
-                                .items[timeIndex].time!)
-                            ? AppColor.APP_BAR_COLOUR
-                            : AppColor.APP_BAR_COLOUR
-                            .withOpacity(0.4),
-                      ),
-                    )
-                  ],
+                        const Gap(5),
+                      ],
+                    );
+                  },
                 ),
-              ),
-              itemIndex == timeIndex
-                  ? Padding(
-                  padding: EdgeInsets.only(top: 10.0),
-                  child: Container(
-                    height: 20,
-                    width: 150,
-                    alignment: Alignment.center,
-                    decoration: BoxDecoration(
-                        color: Colors.green.shade400,
-                        borderRadius:
-                        BorderRadius.circular(5)),
-                  ))
-                  : Container(),
-              Padding(
-                padding: const EdgeInsets.only(left: 100),
-                child: scheduleTiles(context, timeIndex),
-              ),
-              const Gap(5),
-            ],
-          );
-        },
-      ),
-    );
+              );
   }
 
   AddScheduleModel loadData(BuildContext context, ScheduleModel schedule) {
@@ -476,7 +445,7 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
     model.jobId = schedule.pKJOBID;
     model.location = schedule.jOBLOCATION;
     model.note = schedule.jOBNOTES;
-    if (model.imageId != null && schedule.imageId != null) {
+    if (schedule.imageId != null) {
       model.imageId = schedule.imageId!;
     }
 
@@ -493,20 +462,19 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
     model.paymentDuration = schedule.paymentDuration;
 
     model.customer = schedule.customersList != null &&
-        schedule.customersList!.isNotEmpty
+            schedule.customersList!.isNotEmpty
         ? schedule.customersList!
-        .map((e) =>
-        CustomerData(
-          customerId: e.pKCUSTOMERID.toString(),
-          customerName: '${e.cUSTOMERFIRSTNAME} ${e.cUSTOMERLASTNAME}',
-          serviceEntityId: e.serviceEntityList!
-              .map((e) => e.pKSERVICEENTITY.toString())
-              .toList(),
-          serviceEntityName: e.serviceEntityList!
-              .map((e) => e.sERVICEENTITYNAME.toString())
-              .toList(),
-        ))
-        .toList()
+            .map((e) => CustomerData(
+                  customerId: e.pKCUSTOMERID.toString(),
+                  customerName: '${e.cUSTOMERFIRSTNAME} ${e.cUSTOMERLASTNAME}',
+                  serviceEntityId: e.serviceEntityList!
+                      .map((e) => e.pKSERVICEENTITY.toString())
+                      .toList(),
+                  serviceEntityName: e.serviceEntityList!
+                      .map((e) => e.sERVICEENTITYNAME.toString())
+                      .toList(),
+                ))
+            .toList()
         : [];
 
     model.allImageList = schedule.imageList!.map((e) => e).toSet().toList();
@@ -516,14 +484,11 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
     ///todo: load staff
     ///
     ///
-    if (Provider
-        .of<StaffProvider>(context, listen: false)
-        .loading == false) {
+    if (Provider.of<StaffProvider>(context, listen: false).loading == false) {
       Utils().printMessage('Not loading');
-      if (Provider
-          .of<StaffProvider>(context, listen: false)
-          .staffList!
-          .isNotEmpty &&
+      if (Provider.of<StaffProvider>(context, listen: false)
+              .staffList!
+              .isNotEmpty &&
           schedule.staffList != null) {
         Utils().printMessage('Not Empty');
 
@@ -532,20 +497,17 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
         //
         // schedule.staffList!=null?
         List<int> staffIDs =
-        schedule.staffList!.map((e) => e.pKUSERID ?? 0).toList();
+            schedule.staffList!.map((e) => e.pKUSERID ?? 0).toList();
         List<int> staffIDList =
-        Provider
-            .of<StaffProvider>(context, listen: false)
-            .staffList!
-            .map((e) => int.parse(e.staffId))
-            .toList();
-        List<String> staffNames = Provider
-            .of<StaffProvider>(context,
-            listen: false)
+            Provider.of<StaffProvider>(context, listen: false)
+                .staffList!
+                .map((e) => int.parse(e.staffId))
+                .toList();
+        List<String> staffNames = Provider.of<StaffProvider>(context,
+                listen: false)
             .staffList!
             .map((e) =>
-        '${e.staffFirstName.capitalizeFirst} ${e.staffLastName
-            .capitalizeFirst}')
+                '${e.staffFirstName.capitalizeFirst} ${e.staffLastName.capitalizeFirst}')
             .toList();
 
         List<StaffID> staffList = [];
@@ -572,39 +534,34 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
     ///todo: load materials
     ///
     ///
-    if (Provider
-        .of<MaterialProvider>(context, listen: false)
-        .loading ==
+    if (Provider.of<MaterialProvider>(context, listen: false).loading ==
         false) {
       Utils().printMessage('Not loading');
-      if (Provider
-          .of<MaterialProvider>(context, listen: false)
-          .materialList
-          .isNotEmpty &&
+      if (Provider.of<MaterialProvider>(context, listen: false)
+              .materialList
+              .isNotEmpty &&
           schedule.jOBMATERIAL != null) {
         Utils().printMessage('Not Empty');
 
         List<int> materialIDs = schedule.jOBMATERIAL == null
             ? []
             : schedule.jOBMATERIAL!.isEmpty
-            ? []
-            : schedule.jOBMATERIAL!
-            .map((e) => int.parse(e.pKMATERIALID!.toString()))
-            .toList();
+                ? []
+                : schedule.jOBMATERIAL!
+                    .map((e) => int.parse(e.pKMATERIALID!.toString()))
+                    .toList();
 
         List<int> materialIDList =
-        Provider
-            .of<MaterialProvider>(context, listen: false)
-            .materialList
-            .map((e) => e.materialId!)
-            .toList();
+            Provider.of<MaterialProvider>(context, listen: false)
+                .materialList
+                .map((e) => e.materialId!)
+                .toList();
 
         List<String> materialNames =
-        Provider
-            .of<MaterialProvider>(context, listen: false)
-            .materialList!
-            .map((e) => e.materialName!.capitalizeFirst!)
-            .toList();
+            Provider.of<MaterialProvider>(context, listen: false)
+                .materialList!
+                .map((e) => e.materialName!.capitalizeFirst!)
+                .toList();
 
         List<MaterialList> materialList = [];
 
@@ -621,7 +578,7 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
         model.newMaterialList = schedule.jOBMATERIAL;
 
         Provider.of<JobScheduleProvider>(context, listen: false)
-            .getJobStatus(jobId: model!.jobId.toString());
+            .getJobStatus(jobId: model.jobId.toString());
 
         setState(() {});
       } else {
@@ -635,12 +592,9 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
     ///todo: load services
     ///
     ///
-    if (Provider
-        .of<ServiceProvider>(context, listen: false)
-        .loading == false) {
+    if (Provider.of<ServiceProvider>(context, listen: false).loading == false) {
       Utils().printMessage('Not loading');
-      if (Provider
-          .of<ServiceProvider>(context, listen: false)
+      if (Provider.of<ServiceProvider>(context, listen: false)
           .allServiceList!
           .isNotEmpty) {
         Utils().printMessage('Not Empty');
@@ -648,20 +602,18 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
         ///todo get service from schedule model
         ///
         List<int> serviceIDs =
-        schedule.serviceList!.map((e) => e.iD ?? 0).toList();
+            schedule.serviceList!.map((e) => e.iD ?? 0).toList();
         List<int> serviceIDList =
-        Provider
-            .of<ServiceProvider>(context, listen: false)
-            .allServiceList
-            .map((e) => e.serviceId!)
-            .toList();
+            Provider.of<ServiceProvider>(context, listen: false)
+                .allServiceList
+                .map((e) => e.serviceId!)
+                .toList();
 
         List<String> serviceNames =
-        Provider
-            .of<ServiceProvider>(context, listen: false)
-            .allServiceList
-            .map((e) => e.serviceName!.capitalizeFirst!)
-            .toList();
+            Provider.of<ServiceProvider>(context, listen: false)
+                .allServiceList
+                .map((e) => e.serviceName!.capitalizeFirst!)
+                .toList();
 
         List<ServiceList> serviceList = [];
 
@@ -693,16 +645,16 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
     return dayVal == 0
         ? "Sun"
         : dayVal == 1
-        ? "Mon"
-        : dayVal == 2
-        ? "Tue"
-        : dayVal == 3
-        ? "Wed"
-        : dayVal == 4
-        ? "Thu"
-        : dayVal == 5
-        ? "Fri"
-        : "Sat";
+            ? "Mon"
+            : dayVal == 2
+                ? "Tue"
+                : dayVal == 3
+                    ? "Wed"
+                    : dayVal == 4
+                        ? "Thu"
+                        : dayVal == 5
+                            ? "Fri"
+                            : "Sat";
   }
 
   Widget scheduleTiles(BuildContext context, int timeIndex) {
@@ -714,42 +666,39 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
           return timeScheduleController.items[timeIndex].schedule!.isEmpty
               ? const SizedBox()
               : GridView.builder(
-            shrinkWrap: true,
-            physics: const NeverScrollableScrollPhysics(),
-            itemCount:
-            timeScheduleController.items[timeIndex].schedule!.length,
-            itemBuilder: (context, jobIndex) {
-              return InkWell(
-                onTap: () {
-                  EasyLoading.show(
-                    status: "Processing all the details",
-                    indicator: const CircularProgressIndicator(),
-                  );
-                  Provider
-                      .of<ServiceProvider>(context, listen: false)
-                      .selectedIndex
-                      .clear();
-                  Provider
-                      .of<StaffProvider>(context, listen: false)
-                      .selectedIndex
-                      .clear();
-                  Provider
-                      .of<MaterialProvider>(context, listen: false)
-                      .selectedIndex
-                      .clear();
-
-                  ScheduleModel schedule = timeScheduleController
-                      .items[timeIndex].schedule![jobIndex];
-
-                  Provider.of<JobScheduleProvider>(context, listen: false)
-                      .addPrevData(schedule);
-
-                  AddScheduleModel model = loadData(context, schedule);
-
-                  //todo: change here
-                  //todo: model.serviceEntityID = schedule.serviceEntityID;
-
-                  /*todo: Implement later context
+                  shrinkWrap: true,
+                  physics: const NeverScrollableScrollPhysics(),
+                  itemCount:
+                      timeScheduleController.items[timeIndex].schedule!.length,
+                  itemBuilder: (context, jobIndex) {
+                    return InkWell(
+                      onTap: () {
+                        EasyLoading.show(
+                          status: "Processing all the details",
+                          indicator: const CircularProgressIndicator(),
+                        );
+                        Provider.of<ServiceProvider>(context, listen: false)
+                            .selectedIndex
+                            .clear();
+                        Provider.of<StaffProvider>(context, listen: false)
+                            .selectedIndex
+                            .clear();
+                        Provider.of<MaterialProvider>(context, listen: false)
+                            .selectedIndex
+                            .clear();
+
+                        ScheduleModel schedule = timeScheduleController
+                            .items[timeIndex].schedule![jobIndex];
+
+                        Provider.of<JobScheduleProvider>(context, listen: false)
+                            .addPrevData(schedule);
+
+                        AddScheduleModel model = loadData(context, schedule);
+
+                        //todo: change here
+                        //todo: model.serviceEntityID = schedule.serviceEntityID;
+
+                        /*todo: Implement later context
                             .read<JobScheduleProvider>()
                             .getServiceEntityDetail(
                               context,
@@ -757,282 +706,283 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
                               model.serviceEntityID!,
                             );*/
 
-                  if (model.staffList != null &&
-                      model.serviceList != null &&
-                      model.materialList != null) {
-                    model.isAdding = false;
-
-                    EasyLoading.dismiss();
-                    print(
-                        "checking time-------->${timeScheduleController.date}");
-                    model.startDate = timeScheduleController.date!;
-                    model.endDate = timeScheduleController.date!;
-
-                    Provider.of<JobScheduleProvider>(context,
-                        listen: false)
-                        .updateTimeIndex(timeIndex, jobIndex);
-
-                    Provider.of<JobScheduleProvider>(context,
-                        listen: false)
-                        .deleteRecurrDate(context);
-
-                    Provider.of<JobScheduleProvider>(context,
-                        listen: false)
-                        .addPrevData(schedule);
-
-                    GoRouter.of(context)
-                        .pushNamed('create-schedule', extra: {
-                      'time': getTime(
-                          timeScheduleController.items[timeIndex].time!),
-                      'timeIndex': timeIndex,
-                      'jobIndex': jobIndex
-                    }).whenComplete(() {
-                      initState();
-                      setState(() {});
-                    });
-                  }
-                },
-                child: LongPressDraggable(
-                  data: timeScheduleController
-                      .items[timeIndex].schedule![jobIndex],
-                  onDragStarted: () {
-                    // itemIndex = 0;
-                    getContainerCoordinates();
-                  },
-                  onDragEnd: (details) async {
-                    // setState(() {
-                    // print(
-                    //     "End At Time Slot: ${timeScheduleController.items[0].jobList![itemIndex].time!} Job ID: ${timeScheduleController.items[0].jobList![timeIndex].schedule![jobIndex].jobId!}");
-
-                    timeScheduleController.items[timeIndex].schedule!.add(
-                      ScheduleModel(
-                        pKJOBID: timeScheduleController
-                            .items[timeIndex].schedule![jobIndex].pKJOBID,
-                        // jobNo: timeScheduleController
-                        //     .items[0]
-                        //     .jobList![timeIndex]
-                        //     .schedule![jobIndex]
-                        //     .jobNo,
-                        staffList: timeScheduleController.items[timeIndex]
-                            .schedule![jobIndex].staffList,
-                        customersList: timeScheduleController
-                            .items[timeIndex]
-                            .schedule![jobIndex]
-                            .customersList,
+                        if (model.staffList != null &&
+                            model.serviceList != null &&
+                            model.materialList != null) {
+                          model.isAdding = false;
+
+                          EasyLoading.dismiss();
+                          print(
+                              "checking time-------->${timeScheduleController.date}");
+                          model.startDate = timeScheduleController.date;
+                          model.endDate = timeScheduleController.date;
+
+                          Provider.of<JobScheduleProvider>(context,
+                                  listen: false)
+                              .updateTimeIndex(timeIndex, jobIndex);
+
+                          Provider.of<JobScheduleProvider>(context,
+                                  listen: false)
+                              .deleteRecurrDate(context);
+
+                          Provider.of<JobScheduleProvider>(context,
+                                  listen: false)
+                              .addPrevData(schedule);
+
+                          GoRouter.of(context)
+                              .pushNamed('create-schedule', extra: {
+                            'time': getTime(
+                                timeScheduleController.items[timeIndex].time!),
+                            'timeIndex': timeIndex,
+                            'jobIndex': jobIndex
+                          }).whenComplete(() {
+                            initState();
+                            setState(() {});
+                          });
+                        }
+                      },
+                      child: LongPressDraggable(
+                        data: timeScheduleController
+                            .items[timeIndex].schedule![jobIndex],
+                        onDragStarted: () {
+                          // itemIndex = 0;
+                          getContainerCoordinates();
+                        },
+                        onDragEnd: (details) async {
+                          // setState(() {
+                          // print(
+                          //     "End At Time Slot: ${timeScheduleController.items[0].jobList![itemIndex].time!} Job ID: ${timeScheduleController.items[0].jobList![timeIndex].schedule![jobIndex].jobId!}");
+
+                          timeScheduleController.items[timeIndex].schedule!.add(
+                            ScheduleModel(
+                              pKJOBID: timeScheduleController
+                                  .items[timeIndex].schedule![jobIndex].pKJOBID,
+                              // jobNo: timeScheduleController
+                              //     .items[0]
+                              //     .jobList![timeIndex]
+                              //     .schedule![jobIndex]
+                              //     .jobNo,
+                              staffList: timeScheduleController.items[timeIndex]
+                                  .schedule![jobIndex].staffList,
+                              customersList: timeScheduleController
+                                  .items[timeIndex]
+                                  .schedule![jobIndex]
+                                  .customersList,
+                            ),
+                          );
+
+                          int duration =
+                              getDuration(timeScheduleController.items);
+                          model.endTime = endTime(
+                              timeScheduleController.items[timeIndex].time!,
+                              duration);
+
+                          await Provider.of<JobScheduleProvider>(context,
+                                  listen: false)
+                              .reScheduleJob(context,
+                                  jobID: timeScheduleController.items[timeIndex]
+                                      .schedule![jobIndex].pKJOBID!,
+                                  startTime: timeScheduleController
+                                      .items[itemIndex].time!,
+                                  endTime: endTime2(
+                                      timeScheduleController
+                                          .items[itemIndex].time!,
+                                      duration));
+
+                          timeScheduleController.items[timeIndex].schedule!
+                              .removeAt(jobIndex);
+
+                          setState(() {
+                            itemIndex = -1;
+                          });
+
+                          // context
+                          //     .read<JobScheduleProvider>()
+                          //     .getScheduleList(context);
+
+                          ///todo: get staff list
+                        },
+                        onDragUpdate: (DragUpdateDetails details) {
+                          // setState(() {
+                          //   isDrag = true;
+                          // });
+                          double cursorPosition = details.globalPosition.dy;
+
+                          double position = details.localPosition.dy;
+
+                          print('Position: $position');
+
+                          if (position > 400) {
+                            controller.animateTo(
+                                controller.position.maxScrollExtent + 600,
+                                duration: Duration(milliseconds: 200),
+                                curve: Curves.easeIn);
+                          } else {
+                            controller.animateTo(
+                                controller.position.minScrollExtent - 600,
+                                duration: Duration(milliseconds: 200),
+                                curve: Curves.easeIn);
+                          }
+
+                          //print('key position: ${timeScheduleController.keys[timeIndex].currentContext!.size!.height}');
+
+                          for (int i = 0;
+                              i < timeScheduleController.items.length;
+                              i++) {
+                            // if (_containerHeight.length ==
+                            //     timeScheduleController.items.length) {
+                            if (cursorPosition >= _containerHeight[i]) {
+                              setState(() {
+                                itemIndex = i;
+                              });
+                              print('Item index: $itemIndex');
+                            } else {
+                              print('Going lower');
+                            }
+                          }
+                        },
+                        // delay: const Duration(milliseconds: 500),
+                        feedback: Material(
+                          child: Padding(
+                            padding: const EdgeInsets.all(1.0),
+                            child: Container(
+                              height: 38,
+                              alignment: Alignment.center,
+                              decoration: BoxDecoration(
+                                  color: const Color(0xffcceef7),
+                                  borderRadius: BorderRadius.circular(5)),
+                              child: showScheduleInfo(
+                                  schedule: timeScheduleController
+                                      .items[timeIndex].schedule![jobIndex],
+                                  customer: timeScheduleController
+                                                  .items[timeIndex]
+                                                  .schedule![jobIndex]
+                                                  .customersList !=
+                                              null &&
+                                          timeScheduleController
+                                              .items[timeIndex]
+                                              .schedule![jobIndex]
+                                              .customersList!
+                                              .isNotEmpty
+                                      ? timeScheduleController
+                                              .items[timeIndex]
+                                              .schedule![jobIndex]
+                                              .customersList ??
+                                          []
+                                      : [],
+                                  staffs: timeScheduleController
+                                          .items[timeIndex]
+                                          .schedule![jobIndex]
+                                          .staffList ??
+                                      [],
+                                  services: timeScheduleController
+                                          .items[timeIndex]
+                                          .schedule![jobIndex]
+                                          .serviceList ??
+                                      []),
+                            ),
+                          ),
+                        ),
+                        childWhenDragging: Visibility(
+                          visible: itemIndex != timeIndex,
+                          child: Padding(
+                            padding: const EdgeInsets.all(1.0),
+                            child: Container(
+                              height: 38,
+                              alignment: Alignment.center,
+                              decoration: BoxDecoration(
+                                  color: const Color(0xffcceef7),
+                                  borderRadius: BorderRadius.circular(5)),
+                            ),
+                          ),
+                        ),
+                        child: Padding(
+                          padding: const EdgeInsets.all(1.0),
+                          child: Container(
+                            height: 38,
+                            alignment: Alignment.center,
+                            decoration: BoxDecoration(
+                                color: const Color(0xffcceef7),
+                                borderRadius: BorderRadius.circular(5)),
+                            child: showScheduleInfo(
+                              schedule: timeScheduleController
+                                  .items[timeIndex].schedule![jobIndex],
+                              customer: timeScheduleController.items[timeIndex]
+                                      .schedule![jobIndex].customersList ??
+                                  [],
+                              staffs: timeScheduleController.items[timeIndex]
+                                      .schedule![jobIndex].staffList ??
+                                  [],
+                              services: timeScheduleController.items[timeIndex]
+                                      .schedule![jobIndex].serviceList ??
+                                  [],
+                            ),
+                          ),
+                        ),
                       ),
                     );
-
-                    int duration =
-                    getDuration(timeScheduleController.items);
-                    model.endTime = endTime(
-                        timeScheduleController.items[timeIndex].time!,
-                        duration);
-
-                    await Provider.of<JobScheduleProvider>(context,
-                        listen: false)
-                        .reScheduleJob(context,
-                        jobID: timeScheduleController.items[timeIndex]
-                            .schedule![jobIndex].pKJOBID!,
-                        startTime: timeScheduleController
-                            .items[itemIndex].time!,
-                        endTime: endTime2(
-                            timeScheduleController
-                                .items[itemIndex].time!,
-                            duration));
-
-                    timeScheduleController.items[timeIndex].schedule!
-                        .removeAt(jobIndex);
-
-                    setState(() {
-                      itemIndex = -1;
-                    });
-
-                    // context
-                    //     .read<JobScheduleProvider>()
-                    //     .getScheduleList(context);
-
-                    ///todo: get staff list
-                  },
-                  onDragUpdate: (DragUpdateDetails details) {
-                    // setState(() {
-                    //   isDrag = true;
-                    // });
-                    double cursorPosition = details.globalPosition.dy;
-
-                    double position = details.localPosition.dy;
-
-                    print('Position: $position');
-
-                    if (position > 400) {
-                      controller.animateTo(controller.position.maxScrollExtent +
-                          600, duration: Duration(milliseconds: 200),
-                          curve: Curves.easeIn);
-                    } else {
-                      controller.animateTo(controller.position.minScrollExtent -
-                          600, duration: Duration(milliseconds: 200),
-                          curve: Curves.easeIn);
-                    }
-
-                    //print('key position: ${timeScheduleController.keys[timeIndex].currentContext!.size!.height}');
-
-                    for (int i = 0;
-                    i < timeScheduleController.items.length;
-                    i++) {
-                      // if (_containerHeight.length ==
-                      //     timeScheduleController.items.length) {
-                      if (cursorPosition >= _containerHeight[i]) {
-                        setState(() {
-                          itemIndex = i;
-                        });
-                        print('Item index: $itemIndex');
-                      } else {
-                        print('Going lower');
-                      }
-                    }
                   },
-                  // delay: const Duration(milliseconds: 500),
-                  feedback: Material(
-                    child: Padding(
-                      padding: const EdgeInsets.all(1.0),
-                      child: Container(
-                        height: 38,
-                        alignment: Alignment.center,
-                        decoration: BoxDecoration(
-                            color: const Color(0xffcceef7),
-                            borderRadius: BorderRadius.circular(5)),
-                        child: showScheduleInfo(
-                            schedule: timeScheduleController
-                                .items[timeIndex].schedule![jobIndex],
-                            customer: timeScheduleController
-                                .items[timeIndex]
-                                .schedule![jobIndex]
-                                .customersList !=
-                                null &&
-                                timeScheduleController
-                                    .items[timeIndex]
-                                    .schedule![jobIndex]
-                                    .customersList!
-                                    .isNotEmpty
-                                ? timeScheduleController
-                                .items[timeIndex]
-                                .schedule![jobIndex]
-                                .customersList ??
-                                []
-                                : [],
-                            staffs: timeScheduleController
-                                .items[timeIndex]
-                                .schedule![jobIndex]
-                                .staffList ??
-                                [],
-                            services: timeScheduleController
-                                .items[timeIndex]
-                                .schedule![jobIndex]
-                                .serviceList ??
-                                []),
-                      ),
-                    ),
-                  ),
-                  childWhenDragging: Visibility(
-                    visible: itemIndex != timeIndex,
-                    child: Padding(
-                      padding: const EdgeInsets.all(1.0),
-                      child: Container(
-                        height: 38,
-                        alignment: Alignment.center,
-                        decoration: BoxDecoration(
-                            color: const Color(0xffcceef7),
-                            borderRadius: BorderRadius.circular(5)),
-                      ),
-                    ),
-                  ),
-                  child: Padding(
-                    padding: const EdgeInsets.all(1.0),
-                    child: Container(
-                      height: 38,
-                      alignment: Alignment.center,
-                      decoration: BoxDecoration(
-                          color: const Color(0xffcceef7),
-                          borderRadius: BorderRadius.circular(5)),
-                      child: showScheduleInfo(
-                        schedule: timeScheduleController
-                            .items[timeIndex].schedule![jobIndex],
-                        customer: timeScheduleController.items[timeIndex]
-                            .schedule![jobIndex].customersList ??
-                            [],
-                        staffs: timeScheduleController.items[timeIndex]
-                            .schedule![jobIndex].staffList ??
-                            [],
-                        services: timeScheduleController.items[timeIndex]
-                            .schedule![jobIndex].serviceList ??
-                            [],
-                      ),
-                    ),
-                  ),
-                ),
-              );
-            },
-            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
-                crossAxisCount: 2,
-                childAspectRatio: 6,
-                crossAxisSpacing: 5,
-                mainAxisSpacing: 4),
-          );
+                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
+                      crossAxisCount: 2,
+                      childAspectRatio: 6,
+                      crossAxisSpacing: 5,
+                      mainAxisSpacing: 4),
+                );
         },
       ),
     );
   }
 
-  void showMyDialog(BuildContext context, List<JobScheduleModel> items,
-      Jobs jobList) {
+  void showMyDialog(
+      BuildContext context, List<JobScheduleModel> items, Jobs jobList) {
     print("ITEMS->${timeScheduleController.items}");
     showDialog(
       context: context,
       builder: (context) {
         return Dialog(child: StatefulBuilder(
             builder: (BuildContext context, StateSetter setState) {
-              return SizedBox(
-                height: 200,
-                child: Padding(
-                  padding:
+          return SizedBox(
+            height: 200,
+            child: Padding(
+              padding:
                   const EdgeInsets.symmetric(horizontal: 12.0, vertical: 6),
-                  child: Column(
-                    crossAxisAlignment: CrossAxisAlignment.start,
-                    children: [
-                      const Text(
-                        "Copy to",
-                        style: TextStyle(
-                            fontSize: 18,
-                            color: Colors.black,
-                            fontWeight: FontWeight.bold),
+              child: Column(
+                crossAxisAlignment: CrossAxisAlignment.start,
+                children: [
+                  const Text(
+                    "Copy to",
+                    style: TextStyle(
+                        fontSize: 18,
+                        color: Colors.black,
+                        fontWeight: FontWeight.bold),
+                  ),
+                  const Gap(15),
+                  DropdownButtonFormField2(
+                    hint: const Text(
+                      "Select Time",
+                      style: TextStyle(
+                          color: Colors.black,
+                          fontWeight: FontWeight.bold,
+                          fontSize: 14),
+                    ),
+                    decoration: InputDecoration(
+                      //Add isDense true and zero Padding.
+                      //Add Horizontal padding using buttonPadding and Vertical padding by increasing buttonHeight instead of add Padding here so that The whole TextField Button become clickable, and also the dropdown menu open under The whole TextField Button.
+                      isDense: true,
+                      contentPadding: EdgeInsets.zero,
+                      border: OutlineInputBorder(
+                        borderRadius: BorderRadius.circular(15),
                       ),
-                      const Gap(15),
-                      DropdownButtonFormField2(
-                        hint: const Text(
-                          "Select Time",
-                          style: TextStyle(
-                              color: Colors.black,
-                              fontWeight: FontWeight.bold,
-                              fontSize: 14),
-                        ),
-                        decoration: InputDecoration(
-                          //Add isDense true and zero Padding.
-                          //Add Horizontal padding using buttonPadding and Vertical padding by increasing buttonHeight instead of add Padding here so that The whole TextField Button become clickable, and also the dropdown menu open under The whole TextField Button.
-                          isDense: true,
-                          contentPadding: EdgeInsets.zero,
-                          border: OutlineInputBorder(
-                            borderRadius: BorderRadius.circular(15),
-                          ),
-                          //Add more decoration as you want here
-                          //Add label If you want but add hint outside the decoration to be aligned in the button perfectly.
-                        ),
-                        isExpanded: true,
-                        // hint: const Text(
-                        //   'Select Your Gender',
-                        //   style: TextStyle(fontSize: 14),
-                        // ),
-                        items: items
-                            .map((item) =>
-                            DropdownMenuItem<JobScheduleModel>(
+                      //Add more decoration as you want here
+                      //Add label If you want but add hint outside the decoration to be aligned in the button perfectly.
+                    ),
+                    isExpanded: true,
+                    // hint: const Text(
+                    //   'Select Your Gender',
+                    //   style: TextStyle(fontSize: 14),
+                    // ),
+                    items: items
+                        .map((item) => DropdownMenuItem<JobScheduleModel>(
                               value: item,
                               child: Text(
                                 item.time,
@@ -1041,51 +991,51 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
                                 ),
                               ),
                             ))
-                            .toList(),
-                        /*validator: (value) {
+                        .toList(),
+                    /*validator: (value) {
                                       if (value == null) {
                                         return 'Please select time.';
                                       }
                                       return null;
                                     },*/
-                        onChanged: (value) {
-                          //Do something when changing the item if you want.
-                          print("value=>${value!.time}");
-                          selectedValue = value.time.toString();
-                        },
-                        onSaved: (value) {
-                          // selectedValue = value.toString();
-                        },
-                        buttonStyleData: const ButtonStyleData(
-                          height: 60,
-                          padding: EdgeInsets.only(left: 20, right: 10),
-                        ),
-                        iconStyleData: const IconStyleData(
-                          icon: Icon(
-                            Icons.arrow_drop_down,
-                            color: Colors.black45,
-                          ),
-                          iconSize: 30,
-                        ),
-                        dropdownStyleData: DropdownStyleData(
-                          decoration: BoxDecoration(
-                            borderRadius: BorderRadius.circular(15),
-                          ),
-                        ),
+                    onChanged: (value) {
+                      //Do something when changing the item if you want.
+                      print("value=>${value!.time}");
+                      selectedValue = value.time.toString();
+                    },
+                    onSaved: (value) {
+                      // selectedValue = value.toString();
+                    },
+                    buttonStyleData: const ButtonStyleData(
+                      height: 60,
+                      padding: EdgeInsets.only(left: 20, right: 10),
+                    ),
+                    iconStyleData: const IconStyleData(
+                      icon: Icon(
+                        Icons.arrow_drop_down,
+                        color: Colors.black45,
                       ),
-                      const Gap(25),
-                      Align(
-                          alignment: AlignmentDirectional.bottomEnd,
-                          child: ElevatedButton(
-                              onPressed: () {
-                                final int index = items.indexWhere(
-                                    ((times) => times.time == selectedValue));
-                                print("selectedValue->$selectedValue");
-                                print("Index->$index");
-
-                                //todo:
-
-                                /*setState(() {
+                      iconSize: 30,
+                    ),
+                    dropdownStyleData: DropdownStyleData(
+                      decoration: BoxDecoration(
+                        borderRadius: BorderRadius.circular(15),
+                      ),
+                    ),
+                  ),
+                  const Gap(25),
+                  Align(
+                      alignment: AlignmentDirectional.bottomEnd,
+                      child: ElevatedButton(
+                          onPressed: () {
+                            final int index = items.indexWhere(
+                                ((times) => times.time == selectedValue));
+                            print("selectedValue->$selectedValue");
+                            print("Index->$index");
+
+                            //todo:
+
+                            /*setState(() {
                                   timeScheduleController.items[index].jobList.add(
                                       Jobs(
                                           id: jobList.id,
@@ -1093,19 +1043,19 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
                                           staffNo: jobList.staffNo,
                                           custNo: jobList.custNo));
                                 });*/
-                              },
-                              child: const Text(
-                                "Copy",
-                                style: TextStyle(
-                                    color: Colors.white,
-                                    fontSize: 16,
-                                    fontWeight: FontWeight.bold),
-                              )))
-                    ],
-                  ),
-                ),
-              );
-            }));
+                          },
+                          child: const Text(
+                            "Copy",
+                            style: TextStyle(
+                                color: Colors.white,
+                                fontSize: 16,
+                                fontWeight: FontWeight.bold),
+                          )))
+                ],
+              ),
+            ),
+          );
+        }));
       },
     );
   }
@@ -1113,8 +1063,7 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
   void getContainerCoordinates() {
     _containerHeight.clear();
     print(
-        "timeScheduleController length---->${timeScheduleController.keys
-            .length}");
+        "timeScheduleController length---->${timeScheduleController.keys.length}");
     for (int i = 0; i < timeScheduleController.keys.length; i++) {
       if (timeScheduleController.keys[i].currentContext != null) {
         RenderBox containerBox = timeScheduleController.keys[i].currentContext!
@@ -1126,26 +1075,24 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
     }
   }
 
-
-  String generateString(List<String> services, List<String> customers,
-      List<String> staff) {
+  String generateString(
+      List<String> services, List<String> customers, List<String> staff) {
     List<String> result = [];
 
     void addNameChunks(List<String> names, {bool isCustomerOrStaff = false}) {
       for (var name in names) {
-        if (result
-            .join(',')
-            .length + name.length + 3 <= 35) {
+        if (result.join(',').length + name.length + 3 <= 35) {
           if (isCustomerOrStaff) {
             var splitName = name.split(' ');
-            var lastName = splitName.length > 1 ? splitName.last : splitName
-                .first;
+            var lastName =
+                splitName.length > 1 ? splitName.last : splitName.first;
             var chunk = lastName.length > 3
                 ? '${lastName.substring(0, 3)}..'
                 : '$lastName..';
             result.add(chunk);
           } else {
-            var chunk = name.length > 3 ? '${name.substring(0, 3)}..' : '$name..';
+            var chunk =
+                name.length > 3 ? '${name.substring(0, 3)}..' : '$name..';
             result.add(chunk);
           }
         }
@@ -1174,14 +1121,14 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
     return joinedResult;
   }
 
-  Widget showScheduleInfo({required ScheduleModel schedule,
-    required List<StaffList> staffs,
-    required List<CustomersList> customer,
-    required List<Services> services}) {
+  Widget showScheduleInfo(
+      {required ScheduleModel schedule,
+      required List<StaffList> staffs,
+      required List<CustomersList> customer,
+      required List<Services> services}) {
     // String customerName = "Cust: ";
     String customerName = "";
 
-
     /*if (customer.isNotEmpty) {
       customer.forEach((element) {
         // customerName +=
@@ -1230,17 +1177,7 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
   bool isAfter(String date, String time) {
     // Parse the date string and format it to a consistent YYYY-MM-DD format
     String _date = date.length >= 10
-        ? '${DateTime
-        .parse(date)
-        .year}-${DateTime
-        .parse(date)
-        .month
-        .toString()
-        .padLeft(2, '0')}-${DateTime
-        .parse(date)
-        .day
-        .toString()
-        .padLeft(2, '0')}'
+        ? '${DateTime.parse(date).year}-${DateTime.parse(date).month.toString().padLeft(2, '0')}-${DateTime.parse(date).day.toString().padLeft(2, '0')}'
         : date;
 
     // Extract year, month, and day from the formatted date string
@@ -1286,25 +1223,23 @@ class _TimeJobScheduleListState extends State<TimeJobScheduleList> {
 }
 
 Color getColor(int jobCount) {
-
   int maxJobCount = 14;
 
-  int percentage50 = (maxJobCount*0.5).toInt();
+  int percentage50 = (maxJobCount * 0.5).toInt();
 
-  int percentage75 = (maxJobCount*0.75).toInt();
+  int percentage75 = (maxJobCount * 0.75).toInt();
 
-  if(jobCount <= percentage50){
+  if (jobCount <= percentage50) {
     return Colors.green;
-  }else if(jobCount > percentage50 && jobCount <= percentage75){
+  } else if (jobCount > percentage50 && jobCount <= percentage75) {
     return Colors.amber;
-  }else if(jobCount > percentage75 && jobCount < maxJobCount){
+  } else if (jobCount > percentage75 && jobCount < maxJobCount) {
     return Colors.deepOrange;
-  }else if(jobCount == maxJobCount){
+  } else if (jobCount == maxJobCount) {
     return Colors.red;
   }
 
-  return AppColor.APP_BAR_COLOUR
-      .withOpacity(0.4);
+  return AppColor.APP_BAR_COLOUR.withOpacity(0.4);
 }
 
 String getTime(String timeData) {
@@ -1325,7 +1260,7 @@ String getTime(String timeData) {
 
   // Use the existing AM/PM part if provided; otherwise, determine it based on the hour
   String timeOfDay =
-  amPmPart.isNotEmpty ? amPmPart : (_hour >= 12 ? "PM" : "AM");
+      amPmPart.isNotEmpty ? amPmPart : (_hour >= 12 ? "PM" : "AM");
 
   // Return the formatted time with the correct AM/PM designation
   return '$hour:$minute $timeOfDay';
diff --git a/lib/core/widgets/common_button.dart b/lib/core/widgets/common_button.dart
index cc4c008..6e7ade8 100644
--- a/lib/core/widgets/common_button.dart
+++ b/lib/core/widgets/common_button.dart
@@ -1,10 +1,8 @@
-
 import 'package:flutter/material.dart';
 import 'package:sizing/sizing.dart';
 
 import '../utils/colour_constants.dart';
 
-
 class CommonButton extends StatelessWidget {
   final String? label;
   late Function()? onClicked;
@@ -29,7 +27,7 @@ class CommonButton extends StatelessWidget {
       this.fontSize,
       this.buttonHeight,
       this.buttonWidth,
-        this.fontWeight,
+      this.fontWeight,
       Key? key})
       : super(key: key);
 
@@ -47,10 +45,9 @@ class CommonButton extends StatelessWidget {
           // alignment: Alignment.center,
           height: buttonHeight,
           width: buttonWidth,
-          margin: EdgeInsets.symmetric(horizontal: 10.ss,vertical: 10.ss),
-          padding:  EdgeInsets.symmetric(horizontal: 16.0.ss),
+          margin: EdgeInsets.symmetric(horizontal: 10.ss, vertical: 10.ss),
+          padding: EdgeInsets.symmetric(horizontal: 16.0.ss),
           decoration: BoxDecoration(
-
               color: solidColor,
               border: borderColor != null
                   ? Border.all(
@@ -58,16 +55,18 @@ class CommonButton extends StatelessWidget {
                       width: 1.0,
                     )
                   : null,
-              borderRadius: BorderRadius.all(Radius.circular(borderRadius??10))),
+              borderRadius:
+                  BorderRadius.all(Radius.circular(borderRadius ?? 10))),
           child: Center(
             child: Text(
               label ?? "",
               textAlign: TextAlign.center,
               style: Theme.of(context).textTheme.displayMedium?.copyWith(
-                  color: labelColor ?? AppColor.WHITE,
-                  fontSize: fontSize ?? 16,
-                  fontFamily: "Roboto",
-                  fontWeight: fontWeight ?? FontWeight.w700),
+                    color: labelColor ?? AppColor.WHITE,
+                    fontSize: fontSize ?? 16,
+                    fontFamily: "Roboto",
+                    fontWeight: fontWeight ?? FontWeight.w700,
+                  ),
             ),
           ),
         ));
diff --git a/lib/easy_drop_down.dart b/lib/easy_drop_down.dart
index c3be71e..9ef2841 100644
--- a/lib/easy_drop_down.dart
+++ b/lib/easy_drop_down.dart
@@ -1,8 +1,5 @@
-import 'package:bizfns/core/utils/colour_constants.dart';
 import 'package:dropdown_button2/dropdown_button2.dart';
 import 'package:flutter/material.dart';
-import 'package:flutter/services.dart';
-import 'package:flutter_svg/svg.dart';
 import 'package:get/get.dart';
 
 class EasyDropDown extends StatefulWidget {
@@ -42,12 +39,11 @@ class _EasyDropDownState extends State<EasyDropDown> {
   Widget build(BuildContext context) {
     return DropdownButton2(
       hint: widget.hint,
-
       isExpanded: true,
       underline: const SizedBox(),
       buttonStyleData: ButtonStyleData(
         decoration: BoxDecoration(
-          color: Colors.grey.withOpacity(0.2),
+          color: const Color(0x339E9E9E),
           borderRadius: BorderRadius.circular(4),
         ),
       ),
@@ -66,14 +62,17 @@ class _EasyDropDownState extends State<EasyDropDown> {
               child: Text(
                 e,
                 style: Theme.of(context)
-                    .textTheme!
+                    .textTheme
                     .bodyLarge!
                     .copyWith(
                       color: Colors.black,
                       fontSize: 14,
                       fontWeight: FontWeight.normal,
                     )
-                    .copyWith(color: Colors.black, fontWeight: FontWeight.w600),
+                    .copyWith(
+                      color: Colors.black,
+                      fontWeight: FontWeight.w600,
+                    ),
               ),
             ),
           )
@@ -109,10 +108,9 @@ class _EasyDropDownState extends State<EasyDropDown> {
                 ),
               ),
               searchMatchFn: (item, searchValue) {
-                return item.value
-                    .toString()
-                    .capitalizeFirst!
-                    .contains(searchValue.capitalizeFirst!.trim());
+                return item.value.toString().capitalizeFirst!.contains(
+                      searchValue.capitalizeFirst!.trim(),
+                    );
               },
             )
           : null,
diff --git a/lib/features/Admin/Create Job/ScheduleJobPages/View Customer/provider/view_customer_provider.dart b/lib/features/Admin/Create Job/ScheduleJobPages/View Customer/provider/view_customer_provider.dart
index 785de09..e6994ca 100644
--- a/lib/features/Admin/Create Job/ScheduleJobPages/View Customer/provider/view_customer_provider.dart	
+++ b/lib/features/Admin/Create Job/ScheduleJobPages/View Customer/provider/view_customer_provider.dart	
@@ -5,35 +5,33 @@ import '../../../../../../core/utils/Utils.dart';
 import '../model/customer_list_model.dart';
 import '../repo/view_customer_repo_impl.dart';
 
-class ViewCustomerProvider extends ChangeNotifier{
+class ViewCustomerProvider extends ChangeNotifier {
   bool isLoading = false;
 
-  var viewCustomerRepository = ViewCustomerRepoImpl(apiClient: ViewCustomerApiClientImpl());
+  var viewCustomerRepository =
+      ViewCustomerRepoImpl(apiClient: ViewCustomerApiClientImpl());
 
   var _customerList = <CustomerListModel>[];
 
-  fetchCustomer() async{
-    viewCustomerRepository!.fetchCustomer().then((value) async{
-      if(_customerList != null){
-        Utils().printMessage("STATUS SUCCESS==>${value![0].data![0]}");
-        _customerList = value;
-        Utils().printMessage("STATUS SUCCESS LIST==>$_customerList");
-      }else{
-        Utils().printMessage("STATUS FAILED");
-      }
-      Utils().printMessage("STATUS SUCCESS==>${value!.length}");//[0].data![0].cUSTOMERFIRSTNAME
+  fetchCustomer() async {
+    viewCustomerRepository.fetchCustomer().then((value) async {
+      Utils().printMessage("STATUS SUCCESS==>${value![0].data![0]}");
+      _customerList = value;
+      Utils().printMessage("STATUS SUCCESS LIST==>$_customerList");
+      Utils().printMessage(
+          "STATUS SUCCESS==>${value!.length}"); //[0].data![0].cUSTOMERFIRSTNAME
       /*if(value.status == STATUS.SUCCESS){
         // customerList.assign(value.data);
         Utils().printMessage("STATUS SUCCESS==>$value");
       }else{
         Utils().printMessage("STATUS FAILED");
       }*/
-    },onError: (err){
+    }, onError: (err) {
       Utils().printMessage("STATUS ERROR : $err");
-    } );
+    });
   }
 
-  List<CustomerListModel> get items{
+  List<CustomerListModel> get items {
     return [..._customerList];
   }
-}
\ No newline at end of file
+}
diff --git a/lib/features/Admin/Create Job/ScheduleJobPages/View Customer/view_customer.dart b/lib/features/Admin/Create Job/ScheduleJobPages/View Customer/view_customer.dart
index 92310a5..d094671 100644
--- a/lib/features/Admin/Create Job/ScheduleJobPages/View Customer/view_customer.dart	
+++ b/lib/features/Admin/Create Job/ScheduleJobPages/View Customer/view_customer.dart	
@@ -307,7 +307,6 @@ class _CustomerViewPageState extends State<CustomerViewPage> {
                                           element.customerId == tempCustomerID);
                                 }
                               }
-
                             }
                           } else {
                             if (deletedIDList.isNotEmpty) {
@@ -506,7 +505,7 @@ class _CustomerViewPageState extends State<CustomerViewPage> {
                                                         e.value.customerId
                                                             .toString());
 
-                                                deletedCustomer!.add(model
+                                                deletedCustomer.add(model
                                                     .tempCustomerList![index]);
 
                                                 /*model.customer!.removeWhere((element) =>
@@ -942,11 +941,11 @@ class _CustomerViewPageState extends State<CustomerViewPage> {
                                     }
                                   });
 
-                                  addScheduleModel!.customer!.removeWhere(
+                                  addScheduleModel.customer!.removeWhere(
                                       (element) => element.customerId!.isEmpty);
 
                                   List<Map<String, dynamic>> arrayOfObjects =
-                                      addScheduleModel!.customer!
+                                      addScheduleModel.customer!
                                           .map((e) => {
                                                 "customerId": int.parse(
                                                     e.customerId.toString())
@@ -1023,12 +1022,12 @@ class _CustomerViewPageState extends State<CustomerViewPage> {
                                               serviceEntityName:
                                                   tempServicyEntityName));
 
-                                      addScheduleModel!.tempCustomerList!
+                                      addScheduleModel.tempCustomerList!
                                           .removeWhere((element) =>
                                               element.customerId!.isEmpty);
 
                                       List<Map<String, dynamic>>
-                                          arrayOfObjects = addScheduleModel!
+                                          arrayOfObjects = addScheduleModel
                                               .tempCustomerList!
                                               .map((e) => {
                                                     "customerId": int.parse(
@@ -1050,14 +1049,14 @@ class _CustomerViewPageState extends State<CustomerViewPage> {
                                               serviceEntityName:
                                                   tempServicyEntityName));
 
-                                      addScheduleModel!.tempCustomerList!
+                                      addScheduleModel.tempCustomerList!
                                           .removeWhere((element) =>
                                               element.customerId == null ||
                                               element.customerId!.isEmpty);
 
                                       //------------this function getting customer service history---------//
                                       List<Map<String, dynamic>>
-                                          arrayOfObjects = addScheduleModel!
+                                          arrayOfObjects = addScheduleModel
                                               .tempCustomerList!
                                               .map((e) => {
                                                     "customerId": int.parse(
diff --git a/lib/features/Admin/Create Job/ScheduleJobPages/add_material.dart b/lib/features/Admin/Create Job/ScheduleJobPages/add_material.dart
index 440ac2e..d25352b 100644
--- a/lib/features/Admin/Create Job/ScheduleJobPages/add_material.dart	
+++ b/lib/features/Admin/Create Job/ScheduleJobPages/add_material.dart	
@@ -60,7 +60,7 @@ class _AddMaterialState extends State<AddMaterial> {
           Provider.of<MaterialProvider>(context, listen: false)
               .selectedIndex
               .addAll(model.materialList!
-                  .map((e) => int.parse(e.materialID.toString()!))
+                  .map((e) => int.parse(e.materialID.toString()))
                   .toList());
 
           log("=-=-=-=-=-=-=-=-=-=->${Provider.of<MaterialProvider>(context, listen: false).selectedIndex}");
@@ -75,7 +75,7 @@ class _AddMaterialState extends State<AddMaterial> {
         Provider.of<MaterialProvider>(context, listen: false)
             .selectedIndex
             .addAll(model.materialList!
-                .map((e) => int.parse(e.materialID.toString()!))
+                .map((e) => int.parse(e.materialID.toString()))
                 .toList());
 
         log("=-=-=-=-=-=-=-=-=-=->${Provider.of<MaterialProvider>(context, listen: false).selectedIndex}");
diff --git a/lib/features/Admin/Create Job/ScheduleJobPages/add_service.dart b/lib/features/Admin/Create Job/ScheduleJobPages/add_service.dart
index f7ed09b..8907318 100644
--- a/lib/features/Admin/Create Job/ScheduleJobPages/add_service.dart	
+++ b/lib/features/Admin/Create Job/ScheduleJobPages/add_service.dart	
@@ -53,7 +53,7 @@ class _AddServiceState extends State<AddService> {
           Provider.of<ServiceProvider>(context, listen: false)
               .selectedIndex
               .addAll(model.serviceList!
-                  .map((e) => int.parse(e.serviceID.toString()!))
+                  .map((e) => int.parse(e.serviceID.toString()))
                   .toList());
 
           setState(() {});
@@ -67,7 +67,7 @@ class _AddServiceState extends State<AddService> {
         Provider.of<ServiceProvider>(context, listen: false)
             .selectedIndex
             .addAll(model.serviceList!
-                .map((e) => int.parse(e.serviceID.toString()!))
+                .map((e) => int.parse(e.serviceID.toString()))
                 .toList());
 
         setState(() {});
diff --git a/lib/features/Admin/Create Job/ScheduleJobPages/add_staff_In_job.dart b/lib/features/Admin/Create Job/ScheduleJobPages/add_staff_In_job.dart
index cee3936..1dfc98d 100644
--- a/lib/features/Admin/Create Job/ScheduleJobPages/add_staff_In_job.dart	
+++ b/lib/features/Admin/Create Job/ScheduleJobPages/add_staff_In_job.dart	
@@ -51,7 +51,7 @@ class _AddStaffState extends State<AddStaffInJob> {
           Provider.of<StaffProvider>(context, listen: false)
               .selectedIndex
               .addAll(model.staffList!
-                  .map((e) => int.parse(e.id.toString())!)
+                  .map((e) => int.parse(e.id.toString()))
                   .toList());
           setState(() {});
         }
@@ -62,7 +62,7 @@ class _AddStaffState extends State<AddStaffInJob> {
         //     .selectedIndex
         //     .clear();
         Provider.of<StaffProvider>(context, listen: false).selectedIndex.addAll(
-            model.staffList!.map((e) => int.parse(e.id.toString())!).toList());
+            model.staffList!.map((e) => int.parse(e.id.toString())).toList());
         setState(() {});
       }
     } else {
diff --git a/lib/features/Admin/Create Job/ScheduleJobPages/add_start_end.dart b/lib/features/Admin/Create Job/ScheduleJobPages/add_start_end.dart
index f1188b9..1b72dea 100644
--- a/lib/features/Admin/Create Job/ScheduleJobPages/add_start_end.dart	
+++ b/lib/features/Admin/Create Job/ScheduleJobPages/add_start_end.dart	
@@ -81,7 +81,7 @@ class _AddStartEndState extends State<AddStartEnd> {
         Provider.of<JobScheduleProvider>(context, listen: false);
 
     scheduleList = (timeScheduleController.items);
-    timeList = timeScheduleController.items!
+    timeList = timeScheduleController.items
         .map((e) => e.time)
         .toList()
         .where((element) => isAfter(timeScheduleController.date, element!))
@@ -284,17 +284,18 @@ class _AddStartEndState extends State<AddStartEnd> {
     return model;
   }
 
-
-  getInterval(){
-    List<String?> items = timeScheduleController.items!
-        .map((e) => e.time).toList();
+  getInterval() {
+    List<String?> items =
+        timeScheduleController.items.map((e) => e.time).toList();
 
     String? time1 = items[0];
     String? time2 = items[1];
 
-    int min1 = int.tryParse(time1!.split(":")[0])! * 60 + int.tryParse(time1!.split(":")[1])!;
+    int min1 = int.tryParse(time1!.split(":")[0])! * 60 +
+        int.tryParse(time1.split(":")[1])!;
 
-    int min2 = int.tryParse(time2!.split(":")[0])! * 60 + int.tryParse(time1!.split(":")[1])!;
+    int min2 = int.tryParse(time2!.split(":")[0])! * 60 +
+        int.tryParse(time1.split(":")[1])!;
 
     return min2 - min1;
   }
@@ -1032,7 +1033,7 @@ class _AddStartEndState extends State<AddStartEnd> {
             }
 
             if (DateFormat('yyyy-MM-dd').format(DateTime.now()) == date) {
-              timeList = items!
+              timeList = items
                   .map((e) => e.time)
                   .toList()
                   .where((element) =>
@@ -1061,7 +1062,7 @@ class _AddStartEndState extends State<AddStartEnd> {
   }
 
   resetTiming() {
-    timeList = timeScheduleController.items!.map((e) => e.time).toList();
+    timeList = timeScheduleController.items.map((e) => e.time).toList();
     setState(() {});
   }
 
diff --git a/lib/features/Admin/Create Job/ScheduleJobPages/preview.dart b/lib/features/Admin/Create Job/ScheduleJobPages/preview.dart
index d1a1e6f..56bcdfa 100644
--- a/lib/features/Admin/Create Job/ScheduleJobPages/preview.dart	
+++ b/lib/features/Admin/Create Job/ScheduleJobPages/preview.dart	
@@ -285,7 +285,7 @@ class _PreviewState extends State<Preview> {
                                                         height: 30,
                                                         padding:
                                                             const EdgeInsets
-                                                                    .symmetric(
+                                                                .symmetric(
                                                                 horizontal: 10),
                                                         alignment: Alignment
                                                             .centerLeft,
@@ -387,7 +387,7 @@ class _PreviewState extends State<Preview> {
                                                   Container(
                                                     height: 30,
                                                     padding: const EdgeInsets
-                                                            .symmetric(
+                                                        .symmetric(
                                                         horizontal: 10),
                                                     alignment: Alignment.center,
                                                     decoration: BoxDecoration(
@@ -498,7 +498,7 @@ class _PreviewState extends State<Preview> {
                                                     Container(
                                                       height: 30,
                                                       padding: const EdgeInsets
-                                                              .symmetric(
+                                                          .symmetric(
                                                           horizontal: 10),
                                                       alignment:
                                                           Alignment.center,
@@ -561,7 +561,7 @@ class _PreviewState extends State<Preview> {
                                                     Container(
                                                       height: 30,
                                                       padding: const EdgeInsets
-                                                              .symmetric(
+                                                          .symmetric(
                                                           horizontal: 10),
                                                       alignment:
                                                           Alignment.center,
@@ -1103,8 +1103,8 @@ class _PreviewState extends State<Preview> {
                                           // ignore: use_build_context_synchronously
 
                                           setState(() {});
-                                          model!.isEdit = false;
-                                          model!.isEdit = false;
+                                          model.isEdit = false;
+                                          model.isEdit = false;
 
                                           setState(() {});
                                           //------------------adding schedule end----------------------//
@@ -1259,7 +1259,7 @@ class _PreviewState extends State<Preview> {
                                                   context,
                                                   listen: false)
                                               .changeEdit(false);
-                                          model!.isEdit = false;
+                                          model.isEdit = false;
                                           setState(() {});
                                         }
                                       },
diff --git a/lib/features/Admin/Create Job/ScheduleJobPages/preview_customer_invoice.dart b/lib/features/Admin/Create Job/ScheduleJobPages/preview_customer_invoice.dart
index 333d278..d0eda0e 100644
--- a/lib/features/Admin/Create Job/ScheduleJobPages/preview_customer_invoice.dart	
+++ b/lib/features/Admin/Create Job/ScheduleJobPages/preview_customer_invoice.dart	
@@ -29,7 +29,7 @@ class _PreviewCustomerInvoiceState extends State<PreviewCustomerInvoice> {
       for (var j = 0; j < widget.addScheduleModel.customer!.length; j++) {
         if (widget.addScheduleModel.customer![j].customerId.toString() ==
             widget.customerIdList[i].toString()) {
-          customer!.add(widget.addScheduleModel.customer![j]);
+          customer.add(widget.addScheduleModel.customer![j]);
           setState(() {});
         }
       }
diff --git a/lib/features/Admin/Create Job/ScheduleJobPages/recurring.dart b/lib/features/Admin/Create Job/ScheduleJobPages/recurring.dart
index f7bd072..3a7f918 100644
--- a/lib/features/Admin/Create Job/ScheduleJobPages/recurring.dart	
+++ b/lib/features/Admin/Create Job/ScheduleJobPages/recurring.dart	
@@ -88,7 +88,7 @@ class _RecurringState extends State<Recurring> {
                     ? '3rd'
                     : '4th';
     if (model.totalJobs != null) {
-      model!.totalJobs!.isNotEmpty
+      model.totalJobs!.isNotEmpty
           ? spotOnDropDownValue = "Number of Jobs (Repetition Limit)"
           : spotOnDropDownValue = "";
     }
@@ -138,16 +138,15 @@ class _RecurringState extends State<Recurring> {
   }
 
   Future<void> _selectDate(BuildContext context) async {
-
     DateTime getInitialDate() {
-    if (selectedDate != null && selectedDate.isNotEmpty) {
-      // Parse the selectedDate string in the same format it is stored
-      return DateFormat('MMM d, y').parse(selectedDate);
-    } else {
-      return getDateTime();
+      if (selectedDate.isNotEmpty) {
+        // Parse the selectedDate string in the same format it is stored
+        return DateFormat('MMM d, y').parse(selectedDate);
+      } else {
+        return getDateTime();
+      }
     }
-  }
-    
+
     final DateTime? picked = await showDatePicker(
         context: context,
         currentDate: DateTime.now(),
@@ -671,7 +670,6 @@ class _RecurringState extends State<Recurring> {
                         model.jobStopDate = "";
                       }
                       if (spotOnDropDownValue == "Date (Specific Stop Date)" &&
-                          selectedDate != null &&
                           selectedDate.isNotEmpty) {
                         model.isRecurSelectionIsFromCalender = true;
                         model.recurSelectedDate = selectedDate;
diff --git a/lib/features/Admin/Create Job/ScheduleJobPages/widget/add_edit_invoice_page.dart b/lib/features/Admin/Create Job/ScheduleJobPages/widget/add_edit_invoice_page.dart
index 375b062..c626864 100644
--- a/lib/features/Admin/Create Job/ScheduleJobPages/widget/add_edit_invoice_page.dart	
+++ b/lib/features/Admin/Create Job/ScheduleJobPages/widget/add_edit_invoice_page.dart	
@@ -625,7 +625,7 @@ class _AddEditInvoiceState extends State<AddEditInvoice> {
         for (var j = 0; j < widget.addScheduleModel.customer!.length; j++) {
           if (widget.addScheduleModel.customer![j].customerId.toString() ==
               widget.customerIdList[i].toString()) {
-            customer!.add(widget.addScheduleModel.customer![j]);
+            customer.add(widget.addScheduleModel.customer![j]);
             setState(() {});
           }
         }
@@ -1654,9 +1654,9 @@ class _AddEditInvoiceState extends State<AddEditInvoice> {
                                 padding: const EdgeInsets.only(left: 10.0),
                                 child: ElevatedButton.icon(
                                   style: ElevatedButton.styleFrom(
-                                    primary:
-                                        Colors.grey[300], // Background color
-                                    onPrimary: Colors.black, // Text color
+                                    foregroundColor: Colors.black,
+                                    backgroundColor:
+                                        Colors.grey[300], // Text color
                                     shape: RoundedRectangleBorder(
                                       borderRadius: BorderRadius.circular(
                                           20.0), // Rounded corners
diff --git a/lib/features/Admin/Create Job/api-client/schedule_api_client_implementation.dart b/lib/features/Admin/Create Job/api-client/schedule_api_client_implementation.dart
index 412afb5..c0796d8 100644
--- a/lib/features/Admin/Create Job/api-client/schedule_api_client_implementation.dart	
+++ b/lib/features/Admin/Create Job/api-client/schedule_api_client_implementation.dart	
@@ -69,7 +69,7 @@ class ScheduleAPIClientImpl {
 
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             Map<String, dynamic> data = response.data as Map<String, dynamic>;
 
@@ -123,7 +123,7 @@ class ScheduleAPIClientImpl {
           header: {"Authorization": "Bearer $token"});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             Map<String, dynamic> data = response.data as Map<String, dynamic>;
 
@@ -176,7 +176,7 @@ class ScheduleAPIClientImpl {
           header: {"Authorization": "Bearer $token"});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             Map<String, dynamic> data = response.data as Map<String, dynamic>;
 
@@ -230,7 +230,7 @@ class ScheduleAPIClientImpl {
           header: {"Authorization": "Bearer $token"});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             Map<String, dynamic> data = response.data as Map<String, dynamic>;
 
@@ -363,7 +363,7 @@ class ScheduleAPIClientImpl {
 
       String? token = await GlobalHandler.getToken();
       if (token == null) {
-        token = loginData!.token ?? "";
+        token = loginData.token ?? "";
         await GlobalHandler.setToken(token);
       }
 
@@ -501,7 +501,7 @@ class ScheduleAPIClientImpl {
           header: {"Authorization": "Bearer $token"});
       try {
         Utils().printMessage('Edit Response: ${response.data}');
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             return Resource(
                 status: STATUS.SUCCESS,
@@ -616,7 +616,7 @@ class ScheduleAPIClientImpl {
       var responseData = response.data;
 
       Utils().printMessage(json.encode(response.data));
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           log("service entity resp : ${jsonEncode(response.data)}");
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
@@ -694,7 +694,7 @@ class ScheduleAPIClientImpl {
       var responseData = response.data;
 
       Utils().printMessage(json.encode(response.data));
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
 
@@ -763,31 +763,20 @@ class ScheduleAPIClientImpl {
 
       try {
         Utils().printMessage(response.data.toString());
-        if (invoiceResponse != null
-            // &&
-            //     invoiceResponse.status == STATUS.SUCCESS
-            ) {
-          // if (invoiceResponse.data["success"] == true) {
-          Map<String, dynamic> data =
-              invoiceResponse.data as Map<String, dynamic>;
-          AllPdfListModel resp = AllPdfListModel.fromJson(data);
-          print(
-              "invoiceeeeeeeeeeeeeeeeeeeeeeeee datttttttttttttttttttttttt==============>$data");
-          return Resource(
-            status: STATUS.SUCCESS,
-            data: resp,
-            message: response.data["message"],
-          );
-          // } else {
-          //   return Resource.error(message: response.data["message"].toString());
-          // }
-        } else {
-          if (response.data.toString() == "403") {
-            return Resource.error(message: TOKEN_EXPIRED);
-          } else {
-            return Resource.error(message: invoiceResponse.message);
-          }
-        }
+        // if (invoiceResponse.data["success"] == true) {
+        Map<String, dynamic> data =
+            invoiceResponse.data as Map<String, dynamic>;
+        AllPdfListModel resp = AllPdfListModel.fromJson(data);
+        print(
+            "invoiceeeeeeeeeeeeeeeeeeeeeeeee datttttttttttttttttttttttt==============>$data");
+        return Resource(
+          status: STATUS.SUCCESS,
+          data: resp,
+          message: response.data["message"],
+        );
+        // } else {
+        //   return Resource.error(message: response.data["message"].toString());
+        // }
       } catch (e) {
         Utils().printMessage(e.toString());
         return Resource.error(message: invoiceResponse.message);
@@ -850,7 +839,7 @@ class ScheduleAPIClientImpl {
         "startTime": convertTimeFormatWhileAdding(model.startTime!),
         "endDate": model.endDate!.split(' ')[0],
         "endTime": convertTimeFormatWhileAdding(model.endTime!),
-        "jobstopdate": model.jobStopDate!.split(' ')[0],
+        "jobstopdate": model.jobStopDate.split(' ')[0],
         "DurationOfrecurr": difference,
         "Numberofrecurr": model.totalJobs,
         "recurrType": recurrType,
@@ -862,7 +851,7 @@ class ScheduleAPIClientImpl {
 
       String? token = await GlobalHandler.getToken();
       if (token == null) {
-        token = loginData!.token ?? "";
+        token = loginData.token ?? "";
         await GlobalHandler.setToken(token);
       }
 
@@ -876,7 +865,7 @@ class ScheduleAPIClientImpl {
 
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             Map<String, dynamic> data = response.data as Map<String, dynamic>;
             return Resource(
@@ -950,7 +939,7 @@ class ScheduleAPIClientImpl {
 
       String? token = await GlobalHandler.getToken();
       if (token == null) {
-        token = loginData!.token ?? "";
+        token = loginData.token ?? "";
         await GlobalHandler.setToken(token);
       }
 
@@ -964,7 +953,7 @@ class ScheduleAPIClientImpl {
 
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           // if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
           return Resource(
@@ -1028,7 +1017,7 @@ class ScheduleAPIClientImpl {
           header: {"Authorization": "Bearer $token"});
       log("after api calling gettng the data----->${json.encode(response.data)}");
       Utils().printMessage(json.encode(response.data));
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           return Resource(
               status: STATUS.SUCCESS,
@@ -1092,7 +1081,7 @@ class ScheduleAPIClientImpl {
           header: {"Authorization": "Bearer $token"});
       log("after api calling gettng the data----->${json.encode(response.data)}");
       Utils().printMessage(json.encode(response.data));
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           return Resource(
               status: STATUS.SUCCESS,
@@ -1146,7 +1135,7 @@ class ScheduleAPIClientImpl {
         "tenantId": loginData!.tenantId,
         "customer_id": customerID,
         "service_entity_id": serviceEntityId,
-        "compId": loginData!.cOMPANYID.toString()
+        "compId": loginData.cOMPANYID.toString()
       };
 
       log("DELETE_SERVICE_ENTITY_BODY==>${jsonEncode(body)}");
@@ -1166,7 +1155,7 @@ class ScheduleAPIClientImpl {
           header: {"Authorization": "Bearer $token"});
       log("after api calling DELETING the data----->${json.encode(response.data)}");
       Utils().printMessage(json.encode(response.data));
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           return Resource(
               status: STATUS.SUCCESS,
@@ -1212,7 +1201,7 @@ class ScheduleAPIClientImpl {
           header: {"Authorization": "Bearer $token"});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             List<Map<String, dynamic>> flattenedJobs = [];
             for (var customerJobs in response.data['data']) {
@@ -1262,7 +1251,7 @@ class ScheduleAPIClientImpl {
           requestType: RequestType.POST,
           header: {"Authorization": "Bearer $token"});
       log("TAX TABLERESPONSE -- ${jsonEncode(response.toString())}");
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
 
@@ -1314,7 +1303,7 @@ class ScheduleAPIClientImpl {
           body: body,
           requestType: RequestType.POST,
           header: {"Authorization": "Bearer $token"});
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
           AddTaxResponseModel resp = AddTaxResponseModel.fromJson(data);
@@ -1368,7 +1357,7 @@ class ScheduleAPIClientImpl {
           body: body,
           requestType: RequestType.POST,
           header: {"Authorization": "Bearer $token"});
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
           AddTaxResponseModel resp = AddTaxResponseModel.fromJson(data);
@@ -1421,7 +1410,7 @@ class ScheduleAPIClientImpl {
           body: body,
           requestType: RequestType.POST,
           header: {"Authorization": "Bearer $token"});
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           // Map<String, dynamic> data = response.data as Map<String, dynamic>;
           // AddTaxResponseModel resp = AddTaxResponseModel.fromJson(data);
@@ -1575,7 +1564,7 @@ class ScheduleAPIClientImpl {
           requestType: RequestType.POST,
           header: {"Authorization": "Bearer $token"});
       log("getInvoicedCustomerData_RESPONSE -- ${jsonEncode(response.toString())}");
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
           InvoicedCustomerModel resp = InvoicedCustomerModel.fromJson(data);
@@ -1634,30 +1623,26 @@ class ScheduleAPIClientImpl {
           header: {"Authorization": "Bearer $token"});
       log("getInvoicedCustomerData_RESPONSE -- ${(response.data)})}");
 
-      if (response != null) {
-        // if (response.data["success"] == true) {
-        Map<String, dynamic> data = response.data as Map<String, dynamic>;
-
-        CreateInvoicePdfModel resp = CreateInvoicePdfModel.fromJson(data);
-        return Resource(status: STATUS.SUCCESS, data: resp, message: '');
-        //   Map<String, dynamic> data = response.data as Map<String, dynamic>;
-        //   InvoicedCustomerModel resp = InvoicedCustomerModel.fromJson(data);
-        //   return Resource(
-        //       status: STATUS.SUCCESS,
-        //       data: resp,
-        //       message: response.data["message"]);
-        // } else {
-        //   return Resource.error(message: response.data["message"].toString());
-        // }
-        // } else {
-        //   if (response.data.toString() == "403") {
-        //     return Resource.error(message: TOKEN_EXPIRED);
-        //   } else {
-        //     return Resource.error(message: response.message);
-        //   }
-      } else {
-        return Resource.error(message: 'Something went wrong');
-      }
+      // if (response.data["success"] == true) {
+      Map<String, dynamic> data = response.data as Map<String, dynamic>;
+
+      CreateInvoicePdfModel resp = CreateInvoicePdfModel.fromJson(data);
+      return Resource(status: STATUS.SUCCESS, data: resp, message: '');
+      //   Map<String, dynamic> data = response.data as Map<String, dynamic>;
+      //   InvoicedCustomerModel resp = InvoicedCustomerModel.fromJson(data);
+      //   return Resource(
+      //       status: STATUS.SUCCESS,
+      //       data: resp,
+      //       message: response.data["message"]);
+      // } else {
+      //   return Resource.error(message: response.data["message"].toString());
+      // }
+      // } else {
+      //   if (response.data.toString() == "403") {
+      //     return Resource.error(message: TOKEN_EXPIRED);
+      //   } else {
+      //     return Resource.error(message: response.message);
+      //   }
     } catch (e) {
       Utils().printMessage(e.toString());
       return Resource.error(message: SomethingWentWrong);
@@ -1680,7 +1665,7 @@ class ScheduleAPIClientImpl {
 
       print('Response: ${response.data}');
 
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
           WorkingHoursResponseModel resp =
@@ -1734,7 +1719,7 @@ class ScheduleAPIClientImpl {
           body: body,
           requestType: RequestType.POST,
           header: {"Authorization": "Bearer $token"});
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           return Resource(
               status: STATUS.SUCCESS,
@@ -1772,7 +1757,7 @@ class ScheduleAPIClientImpl {
 
       print('Response: ${jsonEncode(response.data)}');
 
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
           return Resource(
@@ -1806,7 +1791,8 @@ class ScheduleAPIClientImpl {
       var body = {
         "userId": userId,
         "tenantId": loginData!.tenantId,
-        "fromDate": DateFormat('yyyy-MM-dd').format(DateTime.now().add(const Duration(days: 1))),
+        "fromDate": DateFormat('yyyy-MM-dd')
+            .format(DateTime.now().add(const Duration(days: 1))),
         //   "interval": timeInterval,
         "interval": "$hours:$minute",
       };
@@ -1826,7 +1812,7 @@ class ScheduleAPIClientImpl {
 
       print(response.data);
 
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           return Resource(
               status: STATUS.SUCCESS,
@@ -1864,7 +1850,7 @@ class ScheduleAPIClientImpl {
 
       print('Response: ${response.data}');
 
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
           return Resource(
@@ -1911,7 +1897,7 @@ class ScheduleAPIClientImpl {
           body: body,
           requestType: RequestType.POST,
           header: {"Authorization": "Bearer $token"});
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           return Resource(
               status: STATUS.SUCCESS,
@@ -1949,7 +1935,7 @@ class ScheduleAPIClientImpl {
 
       print('User Type Response: ${response.data}');
 
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
 
@@ -2002,7 +1988,7 @@ class ScheduleAPIClientImpl {
             "deviceId": deviceDetails[0],
             "deviceType": deviceDetails[1],
             "appVersion": deviceDetails[2],
-            "tenantId": loginData!.tenantId,
+            "tenantId": loginData.tenantId,
             "phoneNumber": phoneNo
           },
           header: {
@@ -2011,7 +1997,7 @@ class ScheduleAPIClientImpl {
 
       print('Response: ${jsonEncode(response.data)}');
 
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
 
@@ -2068,7 +2054,7 @@ class ScheduleAPIClientImpl {
           body: body,
           requestType: RequestType.POST,
           header: {"Authorization": "Bearer $token"});
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           return Resource(
               status: STATUS.SUCCESS,
@@ -2107,7 +2093,7 @@ class ScheduleAPIClientImpl {
 
       print('Reminder List Response: ${response.data}');
 
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
 
@@ -2133,8 +2119,7 @@ class ScheduleAPIClientImpl {
     }
   }
 
-  Future<Resource> setReminder(
-      {required Map<String,dynamic> reminder}) async {
+  Future<Resource> setReminder({required Map<String, dynamic> reminder}) async {
     try {
       OtpVerificationData? loginData = await GlobalHandler.getLoginData();
       List<String> deviceDetails = await Utils.getDeviceDetails();
@@ -2148,7 +2133,8 @@ class ScheduleAPIClientImpl {
         "userType": type,
         "priviledgeAssigned": privilegeList,
         "phoneNumber": phoneNumber
-      }*/;
+      }*/
+      ;
       String? token = await GlobalHandler.getToken();
       if (token == null) {
         OtpVerificationData? data = await GlobalHandler.getLoginData();
@@ -2162,7 +2148,7 @@ class ScheduleAPIClientImpl {
           body: reminder,
           requestType: RequestType.POST,
           header: {"Authorization": "Bearer $token"});
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           return Resource(
               status: STATUS.SUCCESS,
@@ -2208,20 +2194,20 @@ class WorkingHours {
   WorkingHours.fromJson(Map<String, dynamic> json) {
     var startTime = json['start'];
 
-    start = getTime(startTime/*'10:00:00'*/);
+    start = getTime(startTime /*'10:00:00'*/);
 
     var endTime = json['end'];
 
-    end = getTime(endTime/*'18:30:00'*/);
+    end = getTime(endTime /*'18:30:00'*/);
   }
 
   String getTime(String startTime) {
     DateTime now = DateTime.now();
 
-    var dt = DateTime(now.year, now.month, now.day, int.parse(startTime.split(":")[0]),
-        int.parse(startTime.split(":")[1]));
+    var dt = DateTime(now.year, now.month, now.day,
+        int.parse(startTime.split(":")[0]), int.parse(startTime.split(":")[1]));
 
-    final format = DateFormat.jm();  //"6:00 AM"
+    final format = DateFormat.jm(); //"6:00 AM"
 
     return format.format(dt);
   }
@@ -2603,4 +2589,3 @@ class PostReminderModel {
     return data;
   }
 }
-
diff --git a/lib/features/Admin/Create Job/model/add_schedule_model.dart b/lib/features/Admin/Create Job/model/add_schedule_model.dart
index bf68814..7c80e6d 100644
--- a/lib/features/Admin/Create Job/model/add_schedule_model.dart	
+++ b/lib/features/Admin/Create Job/model/add_schedule_model.dart	
@@ -147,7 +147,7 @@ class AddScheduleModel {
 
     addSchedule.isAdding = isAdding;
 
-    addSchedule.isEdit = isEdit!;
+    addSchedule.isEdit = isEdit;
 
     addSchedule.images = imageList;
     addSchedule.copyImages = copyImages;
@@ -378,7 +378,7 @@ class AddScheduleModel {
       'startTime': convertTimeFormatWhileAdding(addSchedule.startTime!),
       'endDate': addSchedule.endDate!.split(" ")[0],
       'endTime': convertTimeFormatWhileAdding(addSchedule.endTime!),
-      "jobstopdate": addSchedule.jobStopDate!.split(" ")[0],
+      "jobstopdate": addSchedule.jobStopDate.split(" ")[0],
       "imageId": addSchedule.imageId,
       'customer': customer != null
           ? customer!.map((v) => v.toJson()).toList() ?? []
@@ -438,7 +438,7 @@ class AddScheduleModel {
       'endDate': addSchedule.endDate!.split(" ")[0],
       // 'endTime': addSchedule.endTime!.split(" ")[0],
       'endTime': convertTimeFormatWhileAdding(addSchedule.endTime!),
-      "jobstopdate": addSchedule.jobStopDate!.split(" ")[0],
+      "jobstopdate": addSchedule.jobStopDate.split(" ")[0],
       "imageId": uniqueImageIdsString,
       'customer': customer != null
           ? customer!.map((v) => v.toJson()).toList() ?? []
diff --git a/lib/features/Admin/Create Job/schedule_job.dart b/lib/features/Admin/Create Job/schedule_job.dart
index 7ad6c45..0d2c497 100644
--- a/lib/features/Admin/Create Job/schedule_job.dart	
+++ b/lib/features/Admin/Create Job/schedule_job.dart	
@@ -304,12 +304,12 @@ class _ScheduleJobState extends State<ScheduleJob> {
           ));
         }
 
-        model!.materialList = materialList;
-        model!.newMaterialList = schedule.jOBMATERIAL!;
+        model.materialList = materialList;
+        model.newMaterialList = schedule.jOBMATERIAL!;
 
         setState(() {});
       } else {
-        model!.materialList = [];
+        model.materialList = [];
         Utils().printMessage('Material Empty');
       }
     } else {
@@ -358,7 +358,7 @@ class _ScheduleJobState extends State<ScheduleJob> {
           ));
         }
 
-        model!.serviceList = serviceList;
+        model.serviceList = serviceList;
 
         setState(() {});
       } else {
@@ -501,7 +501,7 @@ class _ScheduleJobState extends State<ScheduleJob> {
         Provider.of<JobScheduleProvider>(context, listen: false)
             .clearAllPayment();
         model.allImageList!.clear();
-        model.allImageList!.addAll(model!.copyImages!);
+        model.allImageList!.addAll(model.copyImages!);
         //----------clearing recur value-----------//
         Provider.of<JobScheduleProvider>(context, listen: false)
             .reccurrDateList
@@ -1190,7 +1190,7 @@ class _ScheduleJobState extends State<ScheduleJob> {
                                                                               .iMAGEID);
                                                                       List<String>
                                                                           imageIds =
-                                                                          model!
+                                                                          model
                                                                               .imageId
                                                                               .split(',');
                                                                       imageIds.removeWhere((element) =>
@@ -1550,7 +1550,7 @@ class _ScheduleJobState extends State<ScheduleJob> {
                                             if (model.allImageList != null) {
                                               model.allImageList!.clear();
                                               model.allImageList!
-                                                  .addAll(model!.copyImages!);
+                                                  .addAll(model.copyImages!);
                                             }
 
                                             Provider.of<JobScheduleProvider>(
@@ -1670,17 +1670,17 @@ class _ScheduleJobState extends State<ScheduleJob> {
                                                               //         color: Colors
                                                               //             .black)),
                                                               TextSpan(
-                                                                text: model!.jobStatus !=
+                                                                text: model.jobStatus !=
                                                                         null
-                                                                    ? model!.jobStatus ==
+                                                                    ? model.jobStatus ==
                                                                             0
                                                                         ? 'OPEN'
-                                                                        : model!.jobStatus ==
+                                                                        : model.jobStatus ==
                                                                                 1
                                                                             ? 'COMPLETED'
-                                                                            : model!.jobStatus == 2
+                                                                            : model.jobStatus == 2
                                                                                 ? 'ATTEMPTED'
-                                                                                : model!.jobStatus == 3
+                                                                                : model.jobStatus == 3
                                                                                     ? 'WIP'
                                                                                     : 'CLOSED-NA'
                                                                     : '',
diff --git a/lib/features/Admin/Customer/provider/customer_provider.dart b/lib/features/Admin/Customer/provider/customer_provider.dart
index 91f03e5..4466621 100644
--- a/lib/features/Admin/Customer/provider/customer_provider.dart
+++ b/lib/features/Admin/Customer/provider/customer_provider.dart
@@ -101,10 +101,10 @@ class CustomerProvider extends ChangeNotifier {
             // phone,
             // serviceEntity,
             );
-      } else if (isEdit != null && isEdit == true) {
+      } else if (isEdit == true) {
         activeInactiveCustomer(customerId: customerId!, context: context);
         editCustomerDetails(
-            customerId: customerId!,
+            customerId: customerId,
             firstName: firstName,
             lastName: lastName,
             companyName: custCompanyName,
diff --git a/lib/features/Admin/Material/provider/material_provider.dart b/lib/features/Admin/Material/provider/material_provider.dart
index 82bd012..2558471 100644
--- a/lib/features/Admin/Material/provider/material_provider.dart
+++ b/lib/features/Admin/Material/provider/material_provider.dart
@@ -108,67 +108,64 @@ class MaterialProvider extends ChangeNotifier {
         try {
           MaterialCategoryListResponse materialCategoryListResponse =
               value.data;
-          if (materialCategoryListResponse != null) {
-            catList = materialCategoryListResponse!.data;
-            if (catList != null && catList!.isNotEmpty) {
-              categoryList.clear();
+          catList = materialCategoryListResponse!.data;
+          if (catList != null && catList!.isNotEmpty) {
+            categoryList.clear();
+            categoryList.add(
+                DropdownModel(id: "-1", name: "Select One", dependentid: "-1"));
+
+            for (int i = 0; i < catList!.length; i++) {
               categoryList.add(DropdownModel(
-                  id: "-1", name: "Select One", dependentid: "-1"));
-
-              for (int i = 0; i < catList!.length; i++) {
-                categoryList.add(DropdownModel(
-                  id: catList![i].pKCATEGORYID!.toString(),
-                  dependentid: catList![i].pKCATEGORYID!.toString(),
-                  name: catList![i].cATEGORYNAME!.toString(),
-                ));
-              }
-              log("Category id: ${categoryId}");
-              if (categoryId != null && categoryId != "-1") {
-                selectedCategory = categoryList.firstWhere((element) =>
-                    int.parse(element.id.toString()) == int.parse(categoryId));
-                onChange(subCategoryId);
-                notifyListeners();
-              } else {
-                selectedCategory = categoryList.first;
-              }
+                id: catList![i].pKCATEGORYID!.toString(),
+                dependentid: catList![i].pKCATEGORYID!.toString(),
+                name: catList![i].cATEGORYNAME!.toString(),
+              ));
+            }
+            log("Category id: ${categoryId}");
+            if (categoryId != null && categoryId != "-1") {
+              selectedCategory = categoryList.firstWhere((element) =>
+                  int.parse(element.id.toString()) == int.parse(categoryId));
+              onChange(subCategoryId);
+              notifyListeners();
+            } else {
+              selectedCategory = categoryList.first;
+            }
 
-              //
-              // subcategoryList.clear();
-              // subcategoryList.add(DropdownModel(
-              //     id: "-1", name: "Select One", dependentid: "-1"));
-              // selectedsubCategory = subcategoryList.first;
-              // print("catList!.length : ${catList!.length}");
-              // for (int i = 0; i < catList!.length; i++) {
-              //   if (selectedCategory.id ==
-              //       catList![i].pKCATEGORYID.toString()) {
-              //     for (var k = 0; k < catList![i].subCategory!.length; k++) {
-              //       subcategoryList.add(DropdownModel(
-              //           id: (catList![i].subCategory![k].pkSubcategoryId)
-              //               .toString(),
-              //           name: catList![i].subCategory![k].pkSubcategoryName));
-              //     }
-              //   }
-              //   // if (sub) {
-
-              //   // }
-              // }
-
-              if (subCategoryId != null) {
-                selectedsubCategory = subcategoryList.firstWhere((element) =>
-                    int.parse(element.id.toString()) ==
-                    int.parse(subCategoryId));
-                notifyListeners();
-              } else {
-                selectedsubCategory = subcategoryList.first;
-              }
+            //
+            // subcategoryList.clear();
+            // subcategoryList.add(DropdownModel(
+            //     id: "-1", name: "Select One", dependentid: "-1"));
+            // selectedsubCategory = subcategoryList.first;
+            // print("catList!.length : ${catList!.length}");
+            // for (int i = 0; i < catList!.length; i++) {
+            //   if (selectedCategory.id ==
+            //       catList![i].pKCATEGORYID.toString()) {
+            //     for (var k = 0; k < catList![i].subCategory!.length; k++) {
+            //       subcategoryList.add(DropdownModel(
+            //           id: (catList![i].subCategory![k].pkSubcategoryId)
+            //               .toString(),
+            //           name: catList![i].subCategory![k].pkSubcategoryName));
+            //     }
+            //   }
+            //   // if (sub) {
+
+            //   // }
+            // }
+
+            if (subCategoryId != null) {
+              selectedsubCategory = subcategoryList.firstWhere((element) =>
+                  int.parse(element.id.toString()) == int.parse(subCategoryId));
+              notifyListeners();
+            } else {
+              selectedsubCategory = subcategoryList.first;
+            }
 
-              if (selectedsubCategory != subcategoryList.first) {
-                if (unitId != null) {
-                  getMaterialUnitListApi(context, unitId);
-                }
+            if (selectedsubCategory != subcategoryList.first) {
+              if (unitId != null) {
+                getMaterialUnitListApi(context, unitId);
               }
             }
-          } else {}
+          }
 
           loading = false;
           notifyListeners();
@@ -215,17 +212,10 @@ class MaterialProvider extends ChangeNotifier {
         try {
           MaterialCategoryListResponse materialCategoryListResponse =
               value.data;
-          if (materialCategoryListResponse != null) {
-            catList = materialCategoryListResponse!.data;
-            loading = false;
-            EasyLoading.dismiss();
-            notifyListeners();
-          } else {
-            catList = [];
-            loading = false;
-            EasyLoading.dismiss();
-            notifyListeners();
-          }
+          catList = materialCategoryListResponse!.data;
+          loading = false;
+          EasyLoading.dismiss();
+          notifyListeners();
         } catch (e) {
           loading = false;
           EasyLoading.dismiss();
@@ -392,28 +382,26 @@ class MaterialProvider extends ChangeNotifier {
       if (value.status == STATUS.SUCCESS) {
         try {
           MaterialUnitResponse materialUnit = value.data;
-          if (materialUnit != null) {
-            List<UnitData>? unitList = materialUnit.data!;
-            if (unitList != null && unitList.isNotEmpty) {
-              materialUnitList.clear();
-              materialUnitList.add(DropdownModel(
-                  id: "-1", name: "Select One", dependentid: "-1"));
-              selectedUnit = materialUnitList.first;
-              for (int i = 0; i < unitList.length; i++) {
-                materialUnitList.add(
-                  DropdownModel(
-                    id: unitList[i].unitId!.toString(),
-                    dependentid: unitList[i].unitName!,
-                    name: unitList[i].unitName!.toString(),
-                  ),
-                );
-              }
-              if (unitId != null) {
-                selectedUnit = materialUnitList.firstWhere((element) =>
-                    int.parse(element.id.toString()) == int.parse(unitId));
-              }
+          List<UnitData>? unitList = materialUnit.data!;
+          if (unitList != null && unitList.isNotEmpty) {
+            materialUnitList.clear();
+            materialUnitList.add(
+                DropdownModel(id: "-1", name: "Select One", dependentid: "-1"));
+            selectedUnit = materialUnitList.first;
+            for (int i = 0; i < unitList.length; i++) {
+              materialUnitList.add(
+                DropdownModel(
+                  id: unitList[i].unitId!.toString(),
+                  dependentid: unitList[i].unitName!,
+                  name: unitList[i].unitName!.toString(),
+                ),
+              );
+            }
+            if (unitId != null) {
+              selectedUnit = materialUnitList.firstWhere((element) =>
+                  int.parse(element.id.toString()) == int.parse(unitId));
             }
-          } else {}
+          }
 
           loading = false;
           notifyListeners();
@@ -449,7 +437,7 @@ class MaterialProvider extends ChangeNotifier {
         status: "Loading",
         indicator: CircularProgressIndicator(),
         dismissOnTap: false);
-    materialRepoImpl!
+    materialRepoImpl
         .getMaterialDetails(materialId: materialId.toString())
         .then((value) {
       if (value.status == STATUS.SUCCESS) {
@@ -511,12 +499,12 @@ class MaterialProvider extends ChangeNotifier {
     } else {
       if (isEdit == null) {
         addMaterial(context, material_name, rate);
-      } else if (isEdit != null && isEdit == true) {
+      } else if (isEdit == true) {
         activeInactiveCustomer(materialID: materialId!, context: context);
         editMaterialDetails(
             materialName: material_name,
             materialRateUnitId: selectedUnit.id!,
-            materialId: materialId!,
+            materialId: materialId,
             categoryId: selectedCategory.id!,
             subCategoryId: selectedsubCategory.id!,
             materialRate: rate,
@@ -568,7 +556,7 @@ class MaterialProvider extends ChangeNotifier {
       }
     };
     print("AllMAterial Body json===>${jsonEncode(body)}");
-    materialRepoImpl!.addMaterial(body: body).then((value) async {
+    materialRepoImpl.addMaterial(body: body).then((value) async {
       if (value.status == STATUS.SUCCESS) {
         EasyLoading.dismiss();
         Utils().ShowSuccessSnackBar(
@@ -748,7 +736,7 @@ class MaterialProvider extends ChangeNotifier {
         status: "Loading",
         indicator: CircularProgressIndicator(),
         dismissOnTap: false);
-    await materialRepoImpl!
+    await materialRepoImpl
         .activeInactiveMaterial(
             activeStatus: isSwitched ? '1' : '0', materialID: materialID)
         .then((value) async {
@@ -773,7 +761,7 @@ class MaterialProvider extends ChangeNotifier {
         status: "Loading",
         indicator: CircularProgressIndicator(),
         dismissOnTap: false);
-    await materialRepoImpl!
+    await materialRepoImpl
         .saveMaterialUnit(unitName: unitName)
         .then((value) async {
       if (value.status == STATUS.SUCCESS) {
diff --git a/lib/features/Admin/Service/provider/service_provider.dart b/lib/features/Admin/Service/provider/service_provider.dart
index 8ba701b..708f693 100644
--- a/lib/features/Admin/Service/provider/service_provider.dart
+++ b/lib/features/Admin/Service/provider/service_provider.dart
@@ -160,7 +160,7 @@ class ServiceProvider extends ChangeNotifier {
     } else {
       if (isEdit == null) {
         addService(context, serviceName, serviceRate, rateUnit);
-      } else if (isEdit != null && isEdit == true) {
+      } else if (isEdit == true) {
         editServiceDetails(
           serviceName: serviceName,
           rateUnit: rateUnit,
diff --git a/lib/features/Admin/Service/service_list.dart b/lib/features/Admin/Service/service_list.dart
index 122a126..32da790 100644
--- a/lib/features/Admin/Service/service_list.dart
+++ b/lib/features/Admin/Service/service_list.dart
@@ -386,7 +386,7 @@ class _ServiceListPageState extends State<ServiceListPage>
                                                         text: context
                                                             .watch<
                                                                 ServiceProvider>()
-                                                            .allServiceList![
+                                                            .allServiceList[
                                                                 index]
                                                             .serviceRate
                                                             .toString(),
diff --git a/lib/features/Admin/Staff/provider/staff_provider.dart b/lib/features/Admin/Staff/provider/staff_provider.dart
index 89e74a8..3d4505f 100644
--- a/lib/features/Admin/Staff/provider/staff_provider.dart
+++ b/lib/features/Admin/Staff/provider/staff_provider.dart
@@ -148,7 +148,7 @@ class StaffProvider extends ChangeNotifier {
       "staffEmail": email.isEmpty ? null : email,
       "staffMobile": phone,
       "staffType": selectedStaffType.id,
-      "companyId": loginData!.cOMPANYID.toString(),
+      "companyId": loginData.cOMPANYID.toString(),
       "chargeRate": rateController.text,
       "chargeFrequency": selectedFrequency.id
     };
@@ -623,16 +623,10 @@ class StaffProvider extends ChangeNotifier {
       if (value.status == STATUS.SUCCESS) {
         try {
           GetJobNumberByDateModel getJobNumberByDateModel = value.data;
-          if (getJobNumberByDateModel != null) {
-            jobDetailsData = getJobNumberByDateModel.data!.jobDetails!;
+          jobDetailsData = getJobNumberByDateModel.data!.jobDetails!;
 
-            EasyLoading.dismiss();
-            notifyListeners();
-          } else {
-            Utils().ShowErrorSnackBar(context, 'Error', '${value.message}');
-            EasyLoading.dismiss();
-            notifyListeners();
-          }
+          EasyLoading.dismiss();
+          notifyListeners();
         } catch (e) {
           log(e.toString());
           EasyLoading.dismiss();
diff --git a/lib/features/Admin/Staff/repo/staff_repo_impl.dart b/lib/features/Admin/Staff/repo/staff_repo_impl.dart
index ef8b1ea..6a69a3b 100644
--- a/lib/features/Admin/Staff/repo/staff_repo_impl.dart
+++ b/lib/features/Admin/Staff/repo/staff_repo_impl.dart
@@ -173,7 +173,7 @@ class StaffRepoImpl {
     String? userId = await GlobalHandler.getUserId();
     var body = {
       "tenantId": loginData!.tenantId,
-      "userId": loginData!.cOMPANYBACKUPPHONENUMBER,
+      "userId": loginData.cOMPANYBACKUPPHONENUMBER,
       "date": date
     };
     Resource data = await apiClient.getJobNumberByDate(
@@ -194,8 +194,8 @@ class StaffRepoImpl {
     String? userId = await GlobalHandler.getUserId();
     var body = {
       "tenantId": loginData!.tenantId,
-      "userId": loginData!.cOMPANYBACKUPPHONENUMBER,
-      "staffPhoneNumber": loginData!.sTAFFBACKUPPHONENUMBER
+      "userId": loginData.cOMPANYBACKUPPHONENUMBER,
+      "staffPhoneNumber": loginData.sTAFFBACKUPPHONENUMBER
     };
     Resource data = await apiClient.getstaffDetails(
         body: body, authToken: loginData.token ?? "");
@@ -243,7 +243,7 @@ class StaffRepoImpl {
       "staffId": staffId
     };
     Resource data = await apiClient.timeSheetByBillNo(
-        body: body, authToken: loginData!.token ?? "");
+        body: body, authToken: loginData.token ?? "");
 
     if (data.status == STATUS.SUCCESS) {
       Utils().printMessage("Fetched TimeSheet By BillNo id");
diff --git a/lib/features/Admin/data/api/add_user_api_client/add_user_api_client_impl.dart b/lib/features/Admin/data/api/add_user_api_client/add_user_api_client_impl.dart
index c28bd63..e0ca1b0 100644
--- a/lib/features/Admin/data/api/add_user_api_client/add_user_api_client_impl.dart
+++ b/lib/features/Admin/data/api/add_user_api_client/add_user_api_client_impl.dart
@@ -40,7 +40,7 @@ class AddUserApiClientImpl {
         "custLName": lastName,
         "custEmail": email,
         "custPhNo": phone,
-        "companyId": loginData!.cOMPANYID.toString(),
+        "companyId": loginData.cOMPANYID.toString(),
         "custAddress": custAddress,
         "custCompanyName": custCompanyName,
         "questionData": serviceEntity['data'],
@@ -64,7 +64,7 @@ class AddUserApiClientImpl {
           header: {"Authorization": "Bearer " + token.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             return Resource(
                 status: STATUS.SUCCESS,
@@ -110,7 +110,7 @@ class AddUserApiClientImpl {
       try {
         Utils().printMessage(response.data.toString());
         log("GET_PRE_STAFF_CREATION_DATA : ${jsonEncode(response.data)}");
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             return Resource(
                 status: STATUS.SUCCESS,
@@ -161,7 +161,7 @@ class AddUserApiClientImpl {
           header: {"Authorization": "Bearer " + token.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             return Resource(
                 status: STATUS.SUCCESS,
@@ -212,7 +212,7 @@ class AddUserApiClientImpl {
       );
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("succes staff login data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -254,7 +254,7 @@ class AddUserApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("GET JOB NUMBER BY DATE data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             Map<String, dynamic> mapResponse =
@@ -301,7 +301,7 @@ class AddUserApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("GET STAFF DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -343,7 +343,7 @@ class AddUserApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("GET EDIT DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -384,7 +384,7 @@ class AddUserApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("GET EDIT DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -424,7 +424,7 @@ class AddUserApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           log("SAVE_TIME_SHEET_RESPONSE : ${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -466,7 +466,7 @@ class AddUserApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("GET timeSheetByBillNo data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             Map<String, dynamic> mapResponse =
diff --git a/lib/features/Admin/data/api/admin_api_client/admin_api_client_impl.dart b/lib/features/Admin/data/api/admin_api_client/admin_api_client_impl.dart
index 62107b5..090c719 100644
--- a/lib/features/Admin/data/api/admin_api_client/admin_api_client_impl.dart
+++ b/lib/features/Admin/data/api/admin_api_client/admin_api_client_impl.dart
@@ -33,7 +33,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + token.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             Map<String, dynamic> mapResponse =
                 response.data as Map<String, dynamic>;
@@ -81,7 +81,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + token.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             Map<String, dynamic> mapResponse =
                 response.data as Map<String, dynamic>;
@@ -128,7 +128,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + token.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             return Resource(
                 status: STATUS.SUCCESS,
@@ -171,7 +171,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + token.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             return Resource(
                 status: STATUS.SUCCESS,
@@ -212,7 +212,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("GET MATERIAL DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -300,7 +300,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("GET EDIT DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -341,7 +341,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("GET DELETE DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -382,7 +382,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("ACTIVE/INACTIVE DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -423,7 +423,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("SAVE MATERIAL DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -469,7 +469,7 @@ class AdminApiClientImpl {
       log("FETCHING STAFFS : ${response.data["data"]}");
       try {
         // Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("get staff response : ${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -513,7 +513,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + token.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             log("CUSTOMER LIST : ${jsonEncode(response.data["data"])}");
             return Resource(
@@ -555,7 +555,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("GET CUSTOMER DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -599,7 +599,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + token.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             return Resource(
                 status: STATUS.SUCCESS,
@@ -639,7 +639,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("DELETE CUSTOMER DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -680,7 +680,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("GET EDIT DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -721,7 +721,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("ACTIVE/INACTIVE DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -765,7 +765,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + token.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             return Resource(
                 status: STATUS.SUCCESS,
@@ -808,7 +808,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + token.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             return Resource(
                 status: STATUS.SUCCESS,
@@ -851,7 +851,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + token.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             return Resource(
                 status: STATUS.SUCCESS,
@@ -892,7 +892,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print(
               "GET SERVICE DETAILS data===>${jsonEncode(response.data["data"])}");
           if (response.data["success"] == true) {
@@ -935,7 +935,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("GET EDIT DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -976,7 +976,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("GET EDIT DETAILS data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -1017,7 +1017,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           print("ADD MATERIAL SUBCATEGORY data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -1058,7 +1058,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           log("ADD MATERIAL CATEGORY data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
@@ -1099,7 +1099,7 @@ class AdminApiClientImpl {
           header: {"Authorization": "Bearer " + authToken.toString()});
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           log("DELETE CATEGORY SUBCATEGORY data===>${response.data["data"]}");
           if (response.data["success"] == true) {
             return Resource(
diff --git a/lib/features/Home/repo/home_repo_impl.dart b/lib/features/Home/repo/home_repo_impl.dart
index 5376364..3a2814c 100644
--- a/lib/features/Home/repo/home_repo_impl.dart
+++ b/lib/features/Home/repo/home_repo_impl.dart
@@ -1,15 +1,8 @@
-
-
 import 'package:flutter/material.dart';
 
-
-import '../../../../core/common/Resource.dart';
-import '../../../../core/common/Status.dart';
 import '../data/api/home_api_client/home_api_client.dart';
 
-
-class ManageProfileRepoImpl{
-
+class ManageProfileRepoImpl {
   final HomeApiClient apiClient;
 
   ManageProfileRepoImpl({required this.apiClient});
@@ -27,7 +20,6 @@ class ManageProfileRepoImpl{
     return data;
   }*/
 
-
 /*  @override
   Future<Resource> verifyOtp({required body}) async {
     Resource data = await apiClient.verifyForgotPasswordOtp(body: body);
@@ -38,7 +30,4 @@ class ManageProfileRepoImpl{
     }
     return data;
   }*/
-
-
-
-}
\ No newline at end of file
+}
diff --git a/lib/features/ManageProfile/data/api/manage_profile_api_client/manage_profile_api_client.dart b/lib/features/ManageProfile/data/api/manage_profile_api_client/manage_profile_api_client.dart
index d64e063..11ecf12 100644
--- a/lib/features/ManageProfile/data/api/manage_profile_api_client/manage_profile_api_client.dart
+++ b/lib/features/ManageProfile/data/api/manage_profile_api_client/manage_profile_api_client.dart
@@ -148,7 +148,7 @@ class ManageProfileApiClient extends GetConnect {
         body: body,
         header: {"Authorization": "Bearer " + token.toString()},
         requestType: RequestType.POST);
-    if (response != null && response.status == STATUS.SUCCESS) {
+    if (response.status == STATUS.SUCCESS) {
       try {
         Utils().printMessage(response.data.toString());
         if (response.data['success'] == true) {
@@ -189,7 +189,7 @@ class ManageProfileApiClient extends GetConnect {
         requestType: RequestType.POST);
 
     try {
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         Utils().printMessage(response.data.toString());
         if (response.data['success'] == true) {
           return Resource(
@@ -229,7 +229,7 @@ class ManageProfileApiClient extends GetConnect {
         requestType: RequestType.POST);
 
     try {
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         Utils().printMessage(response.data.toString());
         if (response.data['success'] == true) {
           return Resource(
diff --git a/lib/features/ManageProfile/provider/manage_profile_provider.dart b/lib/features/ManageProfile/provider/manage_profile_provider.dart
index 82f8c44..4038cf5 100644
--- a/lib/features/ManageProfile/provider/manage_profile_provider.dart
+++ b/lib/features/ManageProfile/provider/manage_profile_provider.dart
@@ -225,7 +225,7 @@ class ManageProfileProvider extends ChangeNotifier {
       var body = {
         // "userId":loginData.,
         "userId": userId!.length > 10
-            ? userId!
+            ? userId
                 .replaceAll('(', '')
                 .replaceAll(')', '')
                 .replaceAll('-', '')
@@ -359,7 +359,7 @@ class ManageProfileProvider extends ChangeNotifier {
     var body = {
       // "userId":loginData.,
       "userId": userId!.length > 10
-          ? userId!
+          ? userId
               .replaceAll('(', '')
               .replaceAll(')', '')
               .replaceAll('-', '')
@@ -676,7 +676,7 @@ class ManageProfileProvider extends ChangeNotifier {
     var body = {
       // "userId":loginData.,
       "userId": userId!.length > 10
-          ? userId!
+          ? userId
               .replaceAll('(', '')
               .replaceAll(')', '')
               .replaceAll('-', '')
@@ -749,7 +749,7 @@ class ManageProfileProvider extends ChangeNotifier {
     var body = {
       // "userId":loginData.,
       "userId": userId!.length > 10
-          ? userId!
+          ? userId
               .replaceAll('(', '')
               .replaceAll(')', '')
               .replaceAll('-', '')
@@ -1059,7 +1059,6 @@ class ManageProfileProvider extends ChangeNotifier {
     // if (password.isNotEmpty) {
     profileRepo.getOtpForMobileChanges().then((value) {
       if (value.status == STATUS.SUCCESS) {
-        
         StartTimer(context);
         // model = value;
         print(
diff --git a/lib/features/ManageProfile/repo/manage_profile_repo_impl.dart b/lib/features/ManageProfile/repo/manage_profile_repo_impl.dart
index 47e9509..f537804 100644
--- a/lib/features/ManageProfile/repo/manage_profile_repo_impl.dart
+++ b/lib/features/ManageProfile/repo/manage_profile_repo_impl.dart
@@ -1,73 +1,54 @@
-
-
-import 'dart:convert';
-
 import 'package:bizfns/core/utils/Utils.dart';
 import 'package:bizfns/core/utils/const.dart';
 import 'package:flutter/material.dart';
 
-
 import '../../../../core/common/Resource.dart';
 import '../../../../core/common/Status.dart';
-import '../../../core/utils/route_function.dart';
 import '../data/api/manage_profile_api_client/manage_profile_api_client.dart';
 import '../model/ChangePasswordResponse.dart';
-import '../model/GetSequrityQuestionsResponse.dart';
-
-
-class ManageProfileRepoImpl{
 
+class ManageProfileRepoImpl {
   final ManageProfileApiClient apiClient;
 
   ManageProfileRepoImpl({required this.apiClient});
 
-  Future<Resource> getSequrityQuestion({required body}) async{
+  Future<Resource> getSequrityQuestion({required body}) async {
     Resource data = await apiClient.getSequrityQuestion(body: body);
-    if(data.status ==STATUS.SUCCESS){
-
-    }else{
-
-    }
+    if (data.status == STATUS.SUCCESS) {
+    } else {}
     return data;
   }
- Future<Resource> saveSequrityQuestion({required body}) async{
-    Resource data = await apiClient.saveSequrityQuestion(body: body);
-    if(data.status ==STATUS.SUCCESS){
 
-    }else{
-
-    }
+  Future<Resource> saveSequrityQuestion({required body}) async {
+    Resource data = await apiClient.saveSequrityQuestion(body: body);
+    if (data.status == STATUS.SUCCESS) {
+    } else {}
     return data;
   }
 
-  Future<Resource> verifySequrityQuestion({required body}) async{
+  Future<Resource> verifySequrityQuestion({required body}) async {
     Resource data = await apiClient.verifySequrityQuestion(body: body);
-    if(data.status ==STATUS.SUCCESS){
-
-    }else{
-
-    }
+    if (data.status == STATUS.SUCCESS) {
+    } else {}
     return data;
   }
-  Future<Resource> changePasswordAndSendOtp({required body}) async{
+
+  Future<Resource> changePasswordAndSendOtp({required body}) async {
     Resource data = await apiClient.changePassword(body: body);
     Utils().printMessage(body.toString());
-    if(data.status == STATUS.SUCCESS){
-      try{
-        ChangePasswordData? changePasswordData = ChangePasswordData.fromJson(data.data);
-        data.data= changePasswordData;
-
-      }catch(e){
-        data.message= SomethingWentWrong;
+    if (data.status == STATUS.SUCCESS) {
+      try {
+        ChangePasswordData? changePasswordData =
+            ChangePasswordData.fromJson(data.data);
+        data.data = changePasswordData;
+      } catch (e) {
+        data.message = SomethingWentWrong;
         data.status = STATUS.ERROR;
       }
-    }else{
-
-    }
+    } else {}
     return data;
   }
 
-
   @override
   Future<Resource> verifyOtp({required body}) async {
     Resource data = await apiClient.verifyOtp(body: body);
@@ -89,7 +70,4 @@ class ManageProfileRepoImpl{
     }
     return data;
   }
-
-
-
-}
\ No newline at end of file
+}
diff --git a/lib/features/ManageProfile/repo/profile_api_client_implementation.dart b/lib/features/ManageProfile/repo/profile_api_client_implementation.dart
index 3e4a055..653079a 100644
--- a/lib/features/ManageProfile/repo/profile_api_client_implementation.dart
+++ b/lib/features/ManageProfile/repo/profile_api_client_implementation.dart
@@ -41,7 +41,7 @@ class ProfileApiClientImpl {
       var body = {
         "tenantId": loginData!.tenantId,
         "userId": userId,
-        "businessEmail": loginData!.cOMPANYBACKUPEMAIL
+        "businessEmail": loginData.cOMPANYBACKUPEMAIL
       };
       Utils().printMessage("GET_PROFILE_BODY==>${jsonEncode(body)}");
       String? token = await GlobalHandler.getToken();
@@ -57,8 +57,9 @@ class ProfileApiClientImpl {
           body: body,
           requestType: RequestType.POST,
           header: {"Authorization": "Bearer $token"});
-      Utils().printMessage("GET_PROFILE RESPONSE =====>${jsonEncode(response.data)}");
-      if (response != null && response.status == STATUS.SUCCESS) {
+      Utils().printMessage(
+          "GET_PROFILE RESPONSE =====>${jsonEncode(response.data)}");
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
           GetProfileModel resp = GetProfileModel.fromJson(data);
@@ -135,7 +136,7 @@ class ProfileApiClientImpl {
           header: {"Authorization": "Bearer $token"});
 
       Utils().printMessage("SET_PROFILE RESPONSE =====>${response.data}");
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> data = response.data as Map<String, dynamic>;
           GetProfileModel resp = GetProfileModel.fromJson(data);
@@ -209,7 +210,7 @@ class ProfileApiClientImpl {
 
       String? token = await GlobalHandler.getToken();
       if (token == null) {
-        token = loginData!.token ?? "";
+        token = loginData.token ?? "";
         await GlobalHandler.setToken(token);
       }
 
@@ -219,7 +220,7 @@ class ProfileApiClientImpl {
           header: {"Authorization": "Bearer $token"},
           requestType: RequestType.POST);
 
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         print(response.data["success"]);
         if (response.data["success"] == true) {
           return Resource(
@@ -250,15 +251,15 @@ class ProfileApiClientImpl {
 
       var body = {
         "tenantId": loginData!.tenantId,
-        "oldMobileNumber": loginData!.cOMPANYBACKUPPHONENUMBER,
-        "companyId": loginData!.cOMPANYID.toString()
+        "oldMobileNumber": loginData.cOMPANYBACKUPPHONENUMBER,
+        "companyId": loginData.cOMPANYID.toString()
       };
 
       print("here im getting otp josnBody ===>${jsonEncode(body)}");
 
       String? token = await GlobalHandler.getToken();
       if (token == null) {
-        token = loginData!.token ?? "";
+        token = loginData.token ?? "";
         await GlobalHandler.setToken(token);
       }
 
@@ -268,7 +269,7 @@ class ProfileApiClientImpl {
           header: {"Authorization": "Bearer $token"},
           requestType: RequestType.POST);
 
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         print(response.data["success"]);
         if (response.data["success"] == true) {
           return Resource(
@@ -313,7 +314,7 @@ class ProfileApiClientImpl {
 
       String? token = await GlobalHandler.getToken();
       if (token == null) {
-        token = loginData!.token ?? "";
+        token = loginData.token ?? "";
         await GlobalHandler.setToken(token);
       }
       // return Resource(
@@ -325,7 +326,7 @@ class ProfileApiClientImpl {
           header: {"Authorization": "Bearer $token"},
           requestType: RequestType.POST);
 
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         print(response.data["success"]);
         if (response.data["success"] == true) {
           return Resource(
diff --git a/lib/features/ManageProfile/verify_change_password_otp.dart b/lib/features/ManageProfile/verify_change_password_otp.dart
index d4183c6..bde3f48 100644
--- a/lib/features/ManageProfile/verify_change_password_otp.dart
+++ b/lib/features/ManageProfile/verify_change_password_otp.dart
@@ -1,18 +1,13 @@
-import 'dart:async';
-
 import 'package:bizfns/core/utils/fonts.dart';
 import 'package:bizfns/core/widgets/AddModifyScheduleCustomField/custom_button.dart';
 import 'package:bizfns/core/widgets/common_text.dart';
 import 'package:bizfns/features/ManageProfile/provider/manage_profile_provider.dart';
-import 'package:bizfns/features/auth/Login/provider/login_provider.dart';
 import 'package:flutter/material.dart';
 import 'package:gap/gap.dart';
 import 'package:pinput/pinput.dart';
 import 'package:sizing/sizing.dart';
 import 'package:provider/provider.dart';
-
 import '../../../core/utils/colour_constants.dart';
-import '../../../core/widgets/otp_input.dart';
 
 class VerifyChangePasswordOTP extends StatefulWidget {
   VerifyChangePasswordOTP();
@@ -52,62 +47,64 @@ class _VerifyChangePasswordOTPState extends State<VerifyChangePasswordOTP> {
 
     var provider = Provider.of<ManageProfileProvider>(context, listen: false);
 
-    int _startTime = 15;
+    // int _startTime = 15;
 
     return SafeArea(
-        child: Scaffold(
-      // appBar: AppBar(
-      //   backgroundColor: Colors.white,
-      //   elevation: 0,
-      //   // centerTitle: true,
-      //   title: const Text(
-      //     "Verify OTP",
-      //     style: TextStyle(color: Colors.black, fontSize: 16),
-      //   ),
-      //   leading: IconButton(
-      //     icon: const Icon(
-      //       Icons.arrow_back,
-      //       size: 22,
-      //       color: Colors.black,
-      //     ),
-      //     onPressed: () {
-      //       Navigator.pop(context);
-      //     },
-      //   ),
-      // ),
-      body: SizedBox(
-        //color: Colors.red,
-        width: size.width,
-        child: provider.loading
-            ? const Center(
-                child: CircularProgressIndicator(
-                  color: Colors.white,
-                ),
-              )
-            : Container(
-                padding: EdgeInsets.symmetric(horizontal: 20.ss),
-                child: Column(
-                  crossAxisAlignment: CrossAxisAlignment.center,
-                  children: [
-                    Gap(160.ss),
-                    const Text(
-                      "Enter verification code",
-                      style: TextStyle(
+      child: Scaffold(
+        // appBar: AppBar(
+        //   backgroundColor: Colors.white,
+        //   elevation: 0,
+        //   // centerTitle: true,
+        //   title: const Text(
+        //     "Verify OTP",
+        //     style: TextStyle(color: Colors.black, fontSize: 16),
+        //   ),
+        //   leading: IconButton(
+        //     icon: const Icon(
+        //       Icons.arrow_back,
+        //       size: 22,
+        //       color: Colors.black,
+        //     ),
+        //     onPressed: () {
+        //       Navigator.pop(context);
+        //     },
+        //   ),
+        // ),
+        body: SizedBox(
+          //color: Colors.red,
+          width: size.width,
+          child: provider.loading
+              ? const Center(
+                  child: CircularProgressIndicator(
+                    color: Colors.white,
+                  ),
+                )
+              : Container(
+                  padding: EdgeInsets.symmetric(horizontal: 20.ss),
+                  child: Column(
+                    crossAxisAlignment: CrossAxisAlignment.center,
+                    children: [
+                      Gap(160.ss),
+                      const Text(
+                        "Enter verification code",
+                        style: TextStyle(
                           fontSize: 25,
                           color: Colors.black,
-                          fontWeight: FontWeight.bold),
-                    ),
-                    const Gap(8),
-                    Text(
-                      provider.changePasswordData!.message!,
-                      style: TextStyle(
+                          fontWeight: FontWeight.bold,
+                        ),
+                      ),
+                      const Gap(8),
+                      Text(
+                        provider.changePasswordData!.message!,
+                        style: const TextStyle(
                           fontSize: 14,
                           color: Colors.black,
-                          fontWeight: FontWeight.normal),
-                      textAlign: TextAlign.center,
-                    ),
-                    const Gap(20),
-                    /*  Row(
+                          fontWeight: FontWeight.normal,
+                        ),
+                        textAlign: TextAlign.center,
+                      ),
+                      const Gap(20),
+                      /*  Row(
                       mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                       children: [
                         OtpInput(
@@ -143,66 +140,73 @@ class _VerifyChangePasswordOTPState extends State<VerifyChangePasswordOTP> {
                       ],
                     ),*/
 
-                    Pinput(
-                      androidSmsAutofillMethod: AndroidSmsAutofillMethod.none,
-                      length: 6,
-                      controller: Provider.of<ManageProfileProvider>(context,
-                              listen: false)
-                          .otpController,
-                    ),
-                    Gap(10.ss),
-                    Visibility(
-                      visible: Provider.of<ManageProfileProvider>(context,
-                                  listen: true)
-                              .enableResend
-                          ? false
-                          : true,
-                      child: Row(
-                        mainAxisAlignment: MainAxisAlignment.center,
-                        children: [
-                          Container(
+                      Pinput(
+                        pinputAutovalidateMode: PinputAutovalidateMode.onSubmit,
+                        length: 6,
+                        controller: Provider.of<ManageProfileProvider>(context,
+                                listen: false)
+                            .otpController,
+                      ),
+                      Gap(10.ss),
+                      Visibility(
+                        visible: Provider.of<ManageProfileProvider>(context,
+                                    listen: true)
+                                .enableResend
+                            ? false
+                            : true,
+                        child: Row(
+                          mainAxisAlignment: MainAxisAlignment.center,
+                          children: [
+                            Container(
+                              alignment: Alignment.center,
+                              child: CommonText(
+                                text:
+                                    "Resend otp after ${context.watch<ManageProfileProvider>().secondsRemaining} seconds",
+                                textStyle: CustomTextStyle(
+                                  color: AppColor.APP_BAR_COLOUR,
+                                ),
+                              ),
+                            ),
+                          ],
+                        ),
+                      ),
+                      Visibility(
+                        visible: Provider.of<ManageProfileProvider>(context,
+                                listen: true)
+                            .enableResend,
+                        child: InkWell(
+                          onTap: () {
+                            provider.resendCode(context);
+                          },
+                          child: Container(
                             alignment: Alignment.center,
                             child: CommonText(
-                              text:
-                                  "Resend otp after ${context.watch<ManageProfileProvider>().secondsRemaining} seconds",
+                              text: "Resend",
                               textStyle: CustomTextStyle(
-                                  color: AppColor.APP_BAR_COLOUR),
+                                color: AppColor.APP_BAR_COLOUR,
+                                fontSize: 16.ss,
+                              ),
                             ),
                           ),
-                        ],
-                      ),
-                    ),
-                    Visibility(
-                      visible: Provider.of<ManageProfileProvider>(context,
-                              listen: true)
-                          .enableResend,
-                      child: InkWell(
-                        onTap: () {
-                          provider.resendCode(context);
-                        },
-                        child: Container(
-                          alignment: Alignment.center,
-                          child: CommonText(
-                              text: "Resend",
-                              textStyle: CustomTextStyle(
-                                  color: AppColor.APP_BAR_COLOUR,
-                                  fontSize: 16.ss)),
                         ),
                       ),
-                    ),
-                    const Gap(20),
-                    InkWell(
+                      const Gap(20),
+                      InkWell(
                         onTap: () {
                           provider.otpPagevalidation(
-                              context, provider.otpController.text);
+                            context,
+                            provider.otpController.text,
+                          );
                         },
-                        child: CustomButton(
+                        child: const CustomButton(
                           title: "Verify OTP",
-                        ))
-                  ],
+                        ),
+                      )
+                    ],
+                  ),
                 ),
-              ),
+        ),
       ),
-    ));
+    );
   }
 }
diff --git a/lib/features/ManageProfile/verify_password_page.dart b/lib/features/ManageProfile/verify_password_page.dart
index 04dcbd1..41b50cc 100644
--- a/lib/features/ManageProfile/verify_password_page.dart
+++ b/lib/features/ManageProfile/verify_password_page.dart
@@ -1,8 +1,6 @@
-import 'package:flutter/cupertino.dart';
-import 'package:flutter/foundation.dart';
 import 'package:flutter/material.dart';
 import 'package:gap/gap.dart';
-import 'package:get/get.dart';
+
 import 'package:mask_text_input_formatter/mask_text_input_formatter.dart';
 import 'package:provider/provider.dart';
 import 'package:sizing/sizing.dart';
@@ -64,164 +62,184 @@ class _VerifyPasswordState extends State<VerifyPassword> {
           ),
           // Gap(20.ss),
           Form(
-              autovalidateMode: AutovalidateMode.onUserInteraction,
-              key: verifyPasswordFormKey,
-              child: Padding(
-                padding: EdgeInsets.symmetric(horizontal: 20.0),
-                child: ListView(
-                  shrinkWrap: true,
-                  children: [
-                    Gap(MediaQuery.of(context).size.height / 15.ss),
-                    Padding(
-                      padding: EdgeInsets.all(8.0.ss),
-                      child: SizedBox(
-                        height: 88.ss,
-                        child: Center(
-                          child: Image.asset("assets/images/logo.png"),
-                        ),
+            autovalidateMode: AutovalidateMode.onUserInteraction,
+            key: verifyPasswordFormKey,
+            child: Padding(
+              padding: const EdgeInsets.symmetric(horizontal: 20.0),
+              child: ListView(
+                shrinkWrap: true,
+                children: [
+                  Gap(MediaQuery.of(context).size.height / 15.ss),
+                  Padding(
+                    padding: EdgeInsets.all(8.0.ss),
+                    child: SizedBox(
+                      height: 88.ss,
+                      child: Center(
+                        child: Image.asset("assets/images/logo.png"),
                       ),
                     ),
-                    Gap(25.ss),
-                    Padding(
-                      padding: EdgeInsets.only(left: 12.ss),
-                      child: CommonText(
-                          text: "Verify Password",
-                          textStyle: CustomTextStyle(
-                              fontSize: 24.fss, fontWeight: FontWeight.w700)),
+                  ),
+                  Gap(25.ss),
+                  Padding(
+                    padding: EdgeInsets.only(left: 12.ss),
+                    child: CommonText(
+                      text: "Verify Password",
+                      textStyle: CustomTextStyle(
+                        fontSize: 24.fss,
+                        fontWeight: FontWeight.w700,
+                      ),
                     ),
-                    Gap(35.ss),
-                    Padding(
-                      padding: EdgeInsets.only(
-                          left: 10.0.ss, right: 10.ss, bottom: 5.ss),
-                      child: CommonText(
-                          text: "Enter Mobile Number",
-                          textStyle: CustomTextStyle(
-                              fontSize: 14.fss, fontWeight: FontWeight.w700)),
+                  ),
+                  Gap(35.ss),
+                  Padding(
+                    padding: EdgeInsets.only(
+                      left: 10.0.ss,
+                      right: 10.ss,
+                      bottom: 5.ss,
                     ),
-                    CommonTextFormField(
-                      onValidator: (value) {
-                        if (value != null && value.isEmpty) {
-                          return "Please enter 10 digit mobile no";
-                        } else if (value != null &&
-                            !value.isEmpty &&
-                            value.length < 10) {
-                          return "Please enter 10 digit mobile no";
-                        } else
-                          return null;
-                      },
-                      onTap: () {
-                        // Provider.of<SignupProvider>(context,
-                        //         listen: false)
-                        //     .validationLevelOne(context);
-                      },
-                      textInputAction: TextInputAction.next,
-                      textInputType: TextInputType.number,
-                      inputFormatters: [
-                        MaskTextInputFormatter(
-                            mask: '(###) ###-####',
-                            filter: {"#": RegExp(r'[0-9]')},
-                            type: MaskAutoCompletionType.lazy),
-                      ],
-                      controller: newPhoneNoController,
-                      fontTextStyle: CustomTextStyle(fontSize: 16.fss),
-                      maxLength: 14,
-                      decoration: const InputDecoration(
-                        hintText: "Enter 10 Digit Mobile Number",
-                        counterText: "",
-                        border: OutlineInputBorder(gapPadding: 1),
-                        isDense: true,
-                        // isCollapsed: true,
-                        enabledBorder: OutlineInputBorder(gapPadding: 1),
-                        focusedBorder: OutlineInputBorder(gapPadding: 1),
+                    child: CommonText(
+                      text: "Enter Mobile Number",
+                      textStyle: CustomTextStyle(
+                        fontSize: 14.fss,
+                        fontWeight: FontWeight.w700,
                       ),
                     ),
-                    Gap(10.ss),
-                    Padding(
-                      padding: EdgeInsets.only(
-                          left: 10.0.ss, right: 12.ss, bottom: 5.ss),
-                      child: CommonText(
-                          text: "Enter Password",
-                          textStyle: CustomTextStyle(
-                              fontSize: 14.fss, fontWeight: FontWeight.w700)),
+                  ),
+                  CommonTextFormField(
+                    onValidator: (value) {
+                      if (value != null && value.isEmpty) {
+                        return "Please enter 10 digit mobile no";
+                      } else if (value != null &&
+                          !value.isEmpty &&
+                          value.length < 10) {
+                        return "Please enter 10 digit mobile no";
+                      } else
+                        return null;
+                    },
+                    onTap: () {
+                      // Provider.of<SignupProvider>(context,
+                      //         listen: false)
+                      //     .validationLevelOne(context);
+                    },
+                    textInputAction: TextInputAction.next,
+                    textInputType: TextInputType.number,
+                    inputFormatters: [
+                      MaskTextInputFormatter(
+                        mask: '(###) ###-####',
+                        filter: {"#": RegExp(r'[0-9]')},
+                        type: MaskAutoCompletionType.lazy,
+                      ),
+                    ],
+                    controller: newPhoneNoController,
+                    fontTextStyle: CustomTextStyle(fontSize: 16.fss),
+                    maxLength: 14,
+                    decoration: const InputDecoration(
+                      hintText: "Enter 10 Digit Mobile Number",
+                      counterText: "",
+                      border: OutlineInputBorder(gapPadding: 1),
+                      isDense: true,
+                      // isCollapsed: true,
+                      enabledBorder: OutlineInputBorder(gapPadding: 1),
+                      focusedBorder: OutlineInputBorder(gapPadding: 1),
                     ),
-                    CommonTextFormField(
-                      obscureText: Provider.of<ManageProfileProvider>(context,
-                              listen: false)
-                          .isPhonePasswordHidden,
-                      onValidator: (value) {
-                        if (value == null || value.isEmpty) {
-                          return "Please enter password";
-                        } else if (!Utils().isValidPassword(value)) {
-                          return "Please enter a valid password";
-                        } else
-                          return null;
-                      },
-                      textInputAction: TextInputAction.next,
-                      controller: verifyPasswordController,
-                      fontTextStyle: CustomTextStyle(fontSize: 16.fss),
-                      decoration: InputDecoration(
-                        suffixIcon: IconButton(
-                          icon: Icon(
-                              context
-                                      .watch<ManageProfileProvider>()
-                                      .isPhonePasswordHidden
-                                  ? Icons.visibility_off
-                                  : Icons.visibility,
-                              color: AppColor.BUTTON_COLOR,
-                              size: 24),
-                          onPressed: () {
-                            if (context
-                                .read<ManageProfileProvider>()
-                                .isPhonePasswordHidden) {
-                              context
-                                  .read<ManageProfileProvider>()
-                                  .isPhonePasswordHidden = false;
-                              context
-                                  .read<ManageProfileProvider>()
-                                  .notifyListeners();
-                            } else {
-                              context
-                                  .read<ManageProfileProvider>()
-                                  .isPhonePasswordHidden = true;
-                              context
-                                  .read<ManageProfileProvider>()
-                                  .notifyListeners();
-                            }
-                          },
+                  ),
+                  Gap(10.ss),
+                  Padding(
+                    padding: EdgeInsets.only(
+                      left: 10.0.ss,
+                      right: 12.ss,
+                      bottom: 5.ss,
+                    ),
+                    child: CommonText(
+                      text: "Enter Password",
+                      textStyle: CustomTextStyle(
+                        fontSize: 14.fss,
+                        fontWeight: FontWeight.w700,
+                      ),
+                    ),
+                  ),
+                  CommonTextFormField(
+                    obscureText: Provider.of<ManageProfileProvider>(context,
+                            listen: false)
+                        .isPhonePasswordHidden,
+                    onValidator: (value) {
+                      if (value == null || value.isEmpty) {
+                        return "Please enter password";
+                      } else if (!Utils().isValidPassword(value)) {
+                        return "Please enter a valid password";
+                      } else
+                        return null;
+                    },
+                    textInputAction: TextInputAction.next,
+                    controller: verifyPasswordController,
+                    fontTextStyle: CustomTextStyle(fontSize: 16.fss),
+                    decoration: InputDecoration(
+                      suffixIcon: IconButton(
+                        icon: Icon(
+                          context
+                                  .watch<ManageProfileProvider>()
+                                  .isPhonePasswordHidden
+                              ? Icons.visibility_off
+                              : Icons.visibility,
+                          color: AppColor.BUTTON_COLOR,
+                          size: 24,
                         ),
-                        hintText: "Enter Your Password",
-                        border: OutlineInputBorder(gapPadding: 1),
-                        isDense: true,
-                        enabledBorder: OutlineInputBorder(gapPadding: 1),
-                        focusedBorder: OutlineInputBorder(gapPadding: 1),
+                        onPressed: () {
+                          if (context
+                              .read<ManageProfileProvider>()
+                              .isPhonePasswordHidden) {
+                            context
+                                .read<ManageProfileProvider>()
+                                .isPhonePasswordHidden = false;
+                            context
+                                .read<ManageProfileProvider>()
+                                .notifyListeners();
+                          } else {
+                            context
+                                .read<ManageProfileProvider>()
+                                .isPhonePasswordHidden = true;
+                            context
+                                .read<ManageProfileProvider>()
+                                .notifyListeners();
+                          }
+                        },
                       ),
+                      hintText: "Enter Your Password",
+                      border: const OutlineInputBorder(gapPadding: 1),
+                      isDense: true,
+                      enabledBorder: const OutlineInputBorder(gapPadding: 1),
+                      focusedBorder: const OutlineInputBorder(gapPadding: 1),
                     ),
-                    Gap(20.ss),
-                    Center(
-                      child: InkWell(
-                          onTap: () {
-                            if (verifyPasswordFormKey.currentState!
-                                .validate()) {
-                              verifyPasswordFormKey.currentState!.save();
-                            } else {}
-                            if (verifyPasswordController.text.isNotEmpty &&
-                                newPhoneNoController.text.length == 14) {
-                              Provider.of<ManageProfileProvider>(context,
-                                      listen: false)
-                                  .verifyPassword(
-                                      verifyPasswordController.text, context);
-                            } else {
-                              print("Password not 10 digit long");
-                            }
-                            print(verifyPasswordController.text.length);
-                          },
-                          child: CustomButton(
-                            title: "Verify Password",
-                          )),
+                  ),
+                  Gap(20.ss),
+                  Center(
+                    child: InkWell(
+                      onTap: () {
+                        if (verifyPasswordFormKey.currentState!.validate()) {
+                          verifyPasswordFormKey.currentState!.save();
+                        } else {}
+                        if (verifyPasswordController.text.isNotEmpty &&
+                            newPhoneNoController.text.length == 14) {
+                          Provider.of<ManageProfileProvider>(context,
+                                  listen: false)
+                              .verifyPassword(
+                            verifyPasswordController.text,
+                            context,
+                          );
+                        } else {
+                          print("Password not 10 digit long");
+                        }
+                        print(verifyPasswordController.text.length);
+                      },
+                      child: const CustomButton(
+                        title: "Verify Password",
+                      ),
                     ),
-                  ],
-                ),
-              ))
+                  ),
+                ],
+              ),
+            ),
+          )
         ],
       ),
     );
diff --git a/lib/features/ManageProfile/verify_sequrity_question_page.dart b/lib/features/ManageProfile/verify_sequrity_question_page.dart
index 303466c..0c6729a 100644
--- a/lib/features/ManageProfile/verify_sequrity_question_page.dart
+++ b/lib/features/ManageProfile/verify_sequrity_question_page.dart
@@ -8,32 +8,33 @@ import '../../core/utils/fonts.dart';
 import '../../core/widgets/AddModifyScheduleCustomField/custom_button.dart';
 import '../../core/widgets/common_text_form_field.dart';
 
-
 class VerifySequrityQuestionPage extends StatefulWidget {
   const VerifySequrityQuestionPage({Key? key}) : super(key: key);
 
   @override
-  State<VerifySequrityQuestionPage> createState() => _VerifySequrityQuestionPageState();
+  State<VerifySequrityQuestionPage> createState() =>
+      _VerifySequrityQuestionPageState();
 }
 
-class _VerifySequrityQuestionPageState extends State<VerifySequrityQuestionPage> {
-
-
+class _VerifySequrityQuestionPageState
+    extends State<VerifySequrityQuestionPage> {
   @override
   void dispose() {
     // Provider.of<ManageProfileProvider>(context,listen: false).userIdController.dispose();
     super.dispose();
   }
+
   @override
   void initState() {
-    Provider.of<ManageProfileProvider>(context,listen: false).getSequrityQuestions(context);
+    Provider.of<ManageProfileProvider>(context, listen: false)
+        .getSequrityQuestions(context);
     super.initState();
   }
 
   @override
   Widget build(BuildContext context) {
-    var size = MediaQuery.of(context).size;
-    var controller = Provider.of<ManageProfileProvider>(context,listen: false);
+    // var size = MediaQuery.of(context).size;
+    var controller = Provider.of<ManageProfileProvider>(context, listen: false);
 
     return SafeArea(
       child: Scaffold(
@@ -43,17 +44,17 @@ class _VerifySequrityQuestionPageState extends State<VerifySequrityQuestionPage>
         //       child: CircularProgressIndicator(color: AppColor.APP_BAR_COLOUR,),
         //     )
         //     :
-          body:  Container(
-              // padding: EdgeInsets.symmetric(horizontal: 20.ss),
-              child: SingleChildScrollView(
-                padding: EdgeInsets.symmetric(horizontal: 20.ss),
-                child: Column(
-          mainAxisAlignment: MainAxisAlignment.start,
-          crossAxisAlignment: CrossAxisAlignment.start,
-          children: [
-            Gap(30.ss),
+        body: SizedBox(
+          // padding: EdgeInsets.symmetric(horizontal: 20.ss),
+          child: SingleChildScrollView(
+            padding: EdgeInsets.symmetric(horizontal: 20.ss),
+            child: Column(
+              mainAxisAlignment: MainAxisAlignment.start,
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: [
+                Gap(30.ss),
                 Padding(
-                  padding:  EdgeInsets.all(8.0.ss),
+                  padding: EdgeInsets.all(8.0.ss),
                   child: SizedBox(
                     height: 20.ss,
                     child: Center(
@@ -64,75 +65,110 @@ class _VerifySequrityQuestionPageState extends State<VerifySequrityQuestionPage>
                 Row(
                   mainAxisAlignment: MainAxisAlignment.center,
                   children: [
-                     Text(
+                    Text(
                       "Simple Services",
                       style: TextStyle(
-                          fontSize: 18.fss, fontFamily: "Roboto", color: Colors.black),
+                        fontSize: 18.fss,
+                        fontFamily: "Roboto",
+                        color: Colors.black,
+                      ),
                     ),
                   ],
                 ),
-                 Gap(10.ss),
-            CommonText(text: "Security Questions",textStyle: CustomTextStyle(fontSize: 22.fss,fontWeight: FontWeight.w700)),
-           Gap(10.ss),
-
-            context.watch<ManageProfileProvider>().sequrityquestions.isNotEmpty?
-            ListView.builder(
-              shrinkWrap: true,
-              physics: const ScrollPhysics(),
-              itemCount: context.watch<ManageProfileProvider>().sequrityquestions.length,
-              itemBuilder: (context, i) =>
-                  Column(
-                    mainAxisAlignment: MainAxisAlignment.start,
-                    crossAxisAlignment: CrossAxisAlignment.start,
-                //key: _containerKey,
-                // key: _key[i],
-                children: [
-                   Gap(20.ss),
-                   Padding(
-                   padding:  EdgeInsets.all(8.0),
-                   child: CommonText(text: context.watch<ManageProfileProvider>().sequrityquestions[i].qUESTION,maxLine: 3,),
-                 ),
-                  Gap(0.ss),
-                  CommonTextFormField(
-                    hintText: "Enter answer",
-                    fontTextStyle: CustomTextStyle(fontSize: 16.fss),
-                    decoration: InputDecoration(
-                        hintText: context.watch<ManageProfileProvider>().sequrityquestions[i].qUESTION,
-                        border: OutlineInputBorder(gapPadding: 1),
-                        // isDense: false,
-                        // isCollapsed: true,
-                        enabledBorder: OutlineInputBorder(gapPadding: 1),
-                        focusedBorder:OutlineInputBorder(gapPadding: 1),),
-                    onValueChanged: (value){
-                      debugPrint(value);
-                      context.read<ManageProfileProvider>().sequrityquestions[i].answeer = value.trimRight().trimLeft();
-                    },
+                Gap(10.ss),
+                CommonText(
+                  text: "Security Questions",
+                  textStyle: CustomTextStyle(
+                    fontSize: 22.fss,
+                    fontWeight: FontWeight.w700,
                   ),
-                ],
-              ),
-            )
-            :controller.loading?SizedBox():CommonText(text: "No Item Found",),
+                ),
+                Gap(10.ss),
+                context
+                        .watch<ManageProfileProvider>()
+                        .sequrityquestions
+                        .isNotEmpty
+                    ? ListView.builder(
+                        shrinkWrap: true,
+                        physics: const ScrollPhysics(),
+                        itemCount: context
+                            .watch<ManageProfileProvider>()
+                            .sequrityquestions
+                            .length,
+                        itemBuilder: (context, i) => Column(
+                          mainAxisAlignment: MainAxisAlignment.start,
+                          crossAxisAlignment: CrossAxisAlignment.start,
+                          //key: _containerKey,
+                          // key: _key[i],
+                          children: [
+                            Gap(20.ss),
+                            Padding(
+                              padding: const EdgeInsets.all(8.0),
+                              child: CommonText(
+                                text: context
+                                    .watch<ManageProfileProvider>()
+                                    .sequrityquestions[i]
+                                    .qUESTION,
+                                maxLine: 3,
+                              ),
+                            ),
+                            Gap(0.ss),
+                            CommonTextFormField(
+                              hintText: "Enter answer",
+                              fontTextStyle: CustomTextStyle(fontSize: 16.fss),
+                              decoration: InputDecoration(
+                                hintText: context
+                                    .watch<ManageProfileProvider>()
+                                    .sequrityquestions[i]
+                                    .qUESTION,
+                                border: const OutlineInputBorder(gapPadding: 1),
+                                // isDense: false,
+                                // isCollapsed: true,
+                                enabledBorder:
+                                    const OutlineInputBorder(gapPadding: 1),
+                                focusedBorder:
+                                    const OutlineInputBorder(gapPadding: 1),
+                              ),
+                              onValueChanged: (value) {
+                                debugPrint(value);
+                                context
+                                    .read<ManageProfileProvider>()
+                                    .sequrityquestions[i]
+                                    .answeer = value.trimRight().trimLeft();
+                              },
+                            ),
+                          ],
+                        ),
+                      )
+                    : controller.loading
+                        ? const SizedBox()
+                        : CommonText(
+                            text: "No Item Found",
+                          ),
                 Gap(30.ss),
-
                 Visibility(
-                  visible: context.watch<ManageProfileProvider>().sequrityquestions.isNotEmpty,
+                  visible: context
+                      .watch<ManageProfileProvider>()
+                      .sequrityquestions
+                      .isNotEmpty,
                   child: Padding(
-                    padding:  EdgeInsets.symmetric(horizontal: 0.0.ss),
+                    padding: EdgeInsets.symmetric(horizontal: 0.0.ss),
                     child: InkWell(
-                        onTap: () {
-                          controller.validition(context,isVerifyPassword: true);
-                        },
-                        child: const CustomButton(title: "Submit")),
+                      onTap: () {
+                        controller.validition(
+                          context,
+                          isVerifyPassword: true,
+                        );
+                      },
+                      child: const CustomButton(title: "Submit"),
+                    ),
                   ),
                 )
-
-          ],
-        ),
-              ),
+              ],
             ),
-//)
+          ),
+        ),
       ),
     );
   }
-
 }
diff --git a/lib/features/Settings/data/settings_api_client.dart b/lib/features/Settings/data/settings_api_client.dart
index a444967..ce5afe0 100644
--- a/lib/features/Settings/data/settings_api_client.dart
+++ b/lib/features/Settings/data/settings_api_client.dart
@@ -1,6 +1,5 @@
 import 'dart:convert';
 import 'dart:developer';
-
 import '../../../core/api_helper/api_helper.dart';
 import '../../../core/common/Resource.dart';
 import '../../../core/common/Status.dart';
@@ -11,14 +10,14 @@ import '../../../core/utils/const.dart';
 import '../../auth/Login/model/login_otp_verification_model.dart';
 
 class SettingsApiClientImpl {
-  Future<Resource> addTaxTable(
-      {required String taxMasterName,
-       required String taxMasterRate
-      }) async {
+  Future<Resource> addTaxTable({
+    required String taxMasterName,
+    required String taxMasterRate,
+  }) async {
     try {
       Utils().printMessage("here im");
       OtpVerificationData? loginData = await GlobalHandler.getLoginData();
-      List<String> deviceDetails = await Utils.getDeviceDetails();
+      // List<String> deviceDetails = await Utils.getDeviceDetails();
       String? userId = await GlobalHandler.getUserId();
       Utils().printMessage("here im");
       // var body = {
@@ -54,20 +53,24 @@ class SettingsApiClientImpl {
       }
       Utils().printMessage(token.toString());
       var response = await ApiHelper().apiCall(
-          url: Urls.ADD_TAX_TABLE,
-          body: body,
-          requestType: RequestType.POST,
-          header: {"Authorization": "Bearer " + token.toString()});
+        url: Urls.ADD_TAX_TABLE,
+        body: body,
+        requestType: RequestType.POST,
+        header: {"Authorization": "Bearer " + token.toString()},
+      );
       try {
         Utils().printMessage(response.data.toString());
-        if (response != null && response.status == STATUS.SUCCESS) {
+        if (response.status == STATUS.SUCCESS) {
           if (response.data["success"] == true) {
             return Resource(
-                status: STATUS.SUCCESS,
-                data: response.data["data"],
-                message: response.data["message"]);
+              status: STATUS.SUCCESS,
+              data: response.data["data"],
+              message: response.data["message"],
+            );
           } else {
-            return Resource.error(message: response.data["message"].toString());
+            return Resource.error(
+              message: response.data["message"].toString(),
+            );
           }
         } else {
           if (response.data.toString() == "403") {
diff --git a/lib/features/Settings/job_list.dart b/lib/features/Settings/job_list.dart
index 22f44fe..634a066 100644
--- a/lib/features/Settings/job_list.dart
+++ b/lib/features/Settings/job_list.dart
@@ -1,12 +1,10 @@
 import 'dart:developer';
-
 import 'package:bizfns/features/Admin/Staff/provider/staff_provider.dart';
 import 'package:flutter/material.dart';
 import 'package:gap/gap.dart';
 import 'package:go_router/go_router.dart';
 import 'package:intl/intl.dart';
 import 'package:provider/provider.dart';
-
 import '../../core/utils/colour_constants.dart';
 import 'model/get_job_number_by_date_model.dart';
 
@@ -14,11 +12,12 @@ class JobList extends StatefulWidget {
   final String date;
   final List<JobDetails> jobDetailsData;
   List<int>? preSelectedIndex;
-  JobList(
-      {super.key,
-      required this.date,
-      required this.jobDetailsData,
-      this.preSelectedIndex});
+  JobList({
+    super.key,
+    required this.date,
+    required this.jobDetailsData,
+    this.preSelectedIndex,
+  });
 
   @override
   State<JobList> createState() => _JobListState();
@@ -29,7 +28,7 @@ class _JobListState extends State<JobList> {
   bool isSelectAll = false;
 
   void selectAll(bool select) {
-    print("select : ${select}");
+    print("select : $select");
     if (select) {
       selectedIndex.clear();
       setState(() {
@@ -106,7 +105,10 @@ class _JobListState extends State<JobList> {
                 Expanded(
                   child: Text(
                     "Job List ${formatDateString(widget.date)}", //Text(formatDateTime(selectedWeekDates[index])),
-                    style: TextStyle(color: Colors.white, fontSize: 16),
+                    style: const TextStyle(
+                      color: Colors.white,
+                      fontSize: 16,
+                    ),
                   ),
                 ),
                 GestureDetector(
@@ -130,14 +132,17 @@ class _JobListState extends State<JobList> {
                     //       .selectedIndex
                     //       .clear();
                     // }
-                   context.pop(false);
+                    context.pop(false);
                   },
                   child: Container(
                     height: 22,
                     width: 22,
                     decoration: BoxDecoration(
                       borderRadius: BorderRadius.circular(100),
-                      border: Border.all(color: Colors.white, width: 1.5),
+                      border: Border.all(
+                        color: Colors.white,
+                        width: 1.5,
+                      ),
                     ),
                     child: const Icon(
                       Icons.clear_rounded,
@@ -151,196 +156,204 @@ class _JobListState extends State<JobList> {
           ),
           const Gap(10),
           Expanded(
-              child: widget.jobDetailsData.isEmpty
-                  ? const Center(
-                      child: Text('No Customer Found'),
-                    )
-                  : Column(
-                      children: [
-                        Padding(
-                          padding: const EdgeInsets.only(
-                            left: 15,
-                            right: 15,
-                          ),
-                          child: TextField(
-                            enabled: true,
-                            // controller: _searchController,
-                            cursorColor: AppColor.APP_BAR_COLOUR,
-                            onChanged: (val) async {
-                              setState(() {});
-                              // if (val.length > 3) {
-                              //   List<ServiceListData> allServiceList = [];
-                              //   allServiceList = Provider.of<ServiceProvider>(
-                              //           context,
-                              //           listen: false)
-                              //       .allServiceList;
-                              //   int itemIndex1 = allServiceList.indexOf(
-                              //       allServiceList.firstWhere((element) => element
-                              //           .serviceName!
-                              //           .toLowerCase()
-                              //           .contains(val.toLowerCase())));
+            child: widget.jobDetailsData.isEmpty
+                ? const Center(
+                    child: Text('No Customer Found'),
+                  )
+                : Column(
+                    children: [
+                      Padding(
+                        padding: const EdgeInsets.only(
+                          left: 15,
+                          right: 15,
+                        ),
+                        child: TextField(
+                          enabled: true,
+                          // controller: _searchController,
+                          cursorColor: AppColor.APP_BAR_COLOUR,
+                          onChanged: (val) async {
+                            setState(() {});
+                            // if (val.length > 3) {
+                            //   List<ServiceListData> allServiceList = [];
+                            //   allServiceList = Provider.of<ServiceProvider>(
+                            //           context,
+                            //           listen: false)
+                            //       .allServiceList;
+                            //   int itemIndex1 = allServiceList.indexOf(
+                            //       allServiceList.firstWhere((element) => element
+                            //           .serviceName!
+                            //           .toLowerCase()
+                            //           .contains(val.toLowerCase())));
 
-                              //   print('Item Index: $itemIndex1');
+                            //   print('Item Index: $itemIndex1');
 
-                              //   if (itemIndex1 != -1) {
-                              //     itemScrollController.scrollTo(
-                              //         index: itemIndex1,
-                              //         duration: Duration(milliseconds: 200),
-                              //         curve: Curves.easeInOut);
-                              //   }
-                              //   setState(() {});
-                              // }
-                            },
-                            decoration: InputDecoration(
-                              enabled: true,
-                              contentPadding: EdgeInsets.only(
-                                  left: 15, right: 15, bottom: 15),
-                              hintText: "Search by customer name",
-                              hintStyle: const TextStyle(
+                            //   if (itemIndex1 != -1) {
+                            //     itemScrollController.scrollTo(
+                            //         index: itemIndex1,
+                            //         duration: Duration(milliseconds: 200),
+                            //         curve: Curves.easeInOut);
+                            //   }
+                            //   setState(() {});
+                            // }
+                          },
+                          decoration: InputDecoration(
+                            enabled: true,
+                            contentPadding: const EdgeInsets.only(
+                              left: 15,
+                              right: 15,
+                              bottom: 15,
+                            ),
+                            hintText: "Search by customer name",
+                            hintStyle: const TextStyle(
+                              color: Colors.grey,
+                              fontSize: 14.0,
+                              fontWeight: FontWeight.normal,
+                            ),
+                            border: OutlineInputBorder(
+                              borderRadius: BorderRadius.circular(12),
+                              borderSide: const BorderSide(
                                 color: Colors.grey,
-                                fontSize: 14.0,
-                                fontWeight: FontWeight.normal,
-                              ),
-                              border: OutlineInputBorder(
-                                borderRadius: BorderRadius.circular(12),
-                                borderSide:
-                                    BorderSide(color: Colors.grey, width: 1.0),
-                              ),
-                              focusedBorder: OutlineInputBorder(
-                                borderRadius: BorderRadius.circular(12),
-                                borderSide: BorderSide(
-                                    color: AppColor.APP_BAR_COLOUR, width: 1.0),
+                                width: 1.0,
                               ),
-                              suffixIcon: IconButton(
-                                icon: Icon(Icons.search),
-                                color: Colors.grey,
-                                onPressed: () {},
+                            ),
+                            focusedBorder: OutlineInputBorder(
+                              borderRadius: BorderRadius.circular(12),
+                              borderSide: const BorderSide(
+                                color: AppColor.APP_BAR_COLOUR,
+                                width: 1.0,
                               ),
                             ),
+                            suffixIcon: IconButton(
+                              icon: const Icon(Icons.search),
+                              color: Colors.grey,
+                              onPressed: () {},
+                            ),
                           ),
                         ),
-                        const Gap(8),
-                        Padding(
-                          padding: EdgeInsets.symmetric(horizontal: 20.0),
-                          child: Row(
-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                            children: [
-                              Text(''),
-                              InkWell(
-                                onTap: () {
-                                  if (isSelectAll == true) {
-                                    selectAll(false);
-                                  } else {
-                                    selectAll(true);
-                                  }
-                                },
-                                child: Container(
-                                  decoration: BoxDecoration(
-                                      color: Colors.grey,
-                                      borderRadius:
-                                          BorderRadius.circular(10.0)),
-                                  child: Padding(
-                                    padding: const EdgeInsets.all(5.0),
-                                    child: isSelectAll
-                                        ? Text(
-                                            'Clear All',
-                                            style: TextStyle(
-                                                color: Colors.white,
-                                                fontSize: 10.0),
-                                          )
-                                        : Text(
-                                            'Select All',
-                                            style: TextStyle(
-                                                color: Colors.white,
-                                                fontSize: 10.0),
+                      ),
+                      const Gap(8),
+                      Padding(
+                        padding: const EdgeInsets.symmetric(horizontal: 20.0),
+                        child: Row(
+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
+                          children: [
+                            const Text(''),
+                            InkWell(
+                              onTap: () {
+                                if (isSelectAll == true) {
+                                  selectAll(false);
+                                } else {
+                                  selectAll(true);
+                                }
+                              },
+                              child: Container(
+                                decoration: BoxDecoration(
+                                  color: Colors.grey,
+                                  borderRadius: BorderRadius.circular(10.0),
+                                ),
+                                child: Padding(
+                                  padding: const EdgeInsets.all(5.0),
+                                  child: isSelectAll
+                                      ? const Text(
+                                          'Clear All',
+                                          style: TextStyle(
+                                            color: Colors.white,
+                                            fontSize: 10.0,
                                           ),
-                                  ),
+                                        )
+                                      : const Text(
+                                          'Select All',
+                                          style: TextStyle(
+                                            color: Colors.white,
+                                            fontSize: 10.0,
+                                          ),
+                                        ),
                                 ),
-                              )
-                            ],
-                          ),
+                              ),
+                            )
+                          ],
                         ),
-                        const Gap(8),
-                        Expanded(
-                            flex: 5,
-                            child: ListView(
-                              children: [
-                                ...widget.jobDetailsData
-                                    .asMap()
-                                    .entries
-                                    .map((e) {
-                                  return Padding(
-                                    padding: const EdgeInsets.symmetric(
-                                        horizontal: 25.0),
-                                    child: CheckboxListTile(
-                                      fillColor:
-                                          // e.value.activeStatus !=
-                                          //         "0"
-                                          //     ?
-                                          MaterialStateProperty.all<Color>(
-                                              AppColor.APP_BAR_COLOUR),
-                                      controlAffinity:
-                                          ListTileControlAffinity.leading,
-                                      contentPadding: EdgeInsets.zero,
-                                      dense: true,
-                                      title: Text(
-                                        '${e.value.jobNumber}',
-                                        style: TextStyle(
-                                            fontSize: 16.0,
-                                            color:
-                                                // e.value.activeStatus !=
-                                                //         "0"
-                                                //     ?
-                                                Colors.black
-                                            // : Colors.black26,
-                                            ),
+                      ),
+                      const Gap(8),
+                      Expanded(
+                        flex: 5,
+                        child: ListView(
+                          children: [
+                            ...widget.jobDetailsData.asMap().entries.map(
+                              (e) {
+                                return Padding(
+                                  padding: const EdgeInsets.symmetric(
+                                    horizontal: 25.0,
+                                  ),
+                                  child: CheckboxListTile(
+                                    fillColor:
+                                        // e.value.activeStatus !=
+                                        //         "0"
+                                        //     ?
+                                        MaterialStateProperty.all<Color>(
+                                      AppColor.APP_BAR_COLOUR,
+                                    ),
+                                    controlAffinity:
+                                        ListTileControlAffinity.leading,
+                                    contentPadding: EdgeInsets.zero,
+                                    dense: true,
+                                    title: Text(
+                                      '${e.value.jobNumber}',
+                                      style: const TextStyle(
+                                        fontSize: 16.0,
+                                        color: Colors.black,
                                       ),
-                                      value: selectedIndex.contains(int.parse(
-                                          e.value.jobNumber.toString())),
-                                      onChanged: (value) {
-                                        if (selectedIndex.contains(int.parse(
-                                            e.value.jobNumber.toString()))) {
-                                          selectedIndex.remove(int.parse(
-                                              e.value.jobNumber.toString()));
-                                        } else {
-                                          selectedIndex.add(int.parse(
-                                              e.value.jobNumber.toString()));
-                                        }
-                                        setState(() {});
-                                      },
                                     ),
-                                  );
-                                })
-                              ],
-                            ))
-                      ],
-                    )),
-          Gap(10),
+                                    value: selectedIndex.contains(int.parse(
+                                        e.value.jobNumber.toString())),
+                                    onChanged: (value) {
+                                      if (selectedIndex.contains(int.parse(
+                                          e.value.jobNumber.toString()))) {
+                                        selectedIndex.remove(int.parse(
+                                            e.value.jobNumber.toString()));
+                                      } else {
+                                        selectedIndex.add(int.parse(
+                                            e.value.jobNumber.toString()));
+                                      }
+                                      setState(() {});
+                                    },
+                                  ),
+                                );
+                              },
+                            )
+                          ],
+                        ),
+                      )
+                    ],
+                  ),
+          ),
+          const Gap(10),
           Padding(
-            padding: EdgeInsets.only(bottom: 10.0),
+            padding: const EdgeInsets.only(bottom: 10.0),
             child: SizedBox(
               height: 45,
               child: ElevatedButton(
-                  onPressed: selectedIndex.isNotEmpty
-                      ? () {
-                          Provider.of<StaffProvider>(context, listen: false)
-                              .selectedJobs = selectedIndex;
-                          setState(() {});
-                          context.pop(true);
-                        }
-                      : null,
-                  child: Padding(
-                    padding: EdgeInsets.symmetric(horizontal: 60.0),
-                    child: Text('Select', style: TextStyle(fontSize: 14)),
+                onPressed: selectedIndex.isNotEmpty
+                    ? () {
+                        Provider.of<StaffProvider>(context, listen: false)
+                            .selectedJobs = selectedIndex;
+                        setState(() {});
+                        context.pop(true);
+                      }
+                    : null,
+                style: ElevatedButton.styleFrom(
+                  padding: EdgeInsets.zero,
+                  disabledBackgroundColor: Colors.grey,
+                  backgroundColor: const Color(0xFF093E52),
+                  shape: RoundedRectangleBorder(
+                    borderRadius: BorderRadius.circular(8),
                   ),
-                  style: ElevatedButton.styleFrom(
-                    padding: EdgeInsets.zero,
-                    disabledBackgroundColor: Colors.grey,
-                    backgroundColor: const Color(0xFF093E52),
-                    shape: RoundedRectangleBorder(
-                      borderRadius: BorderRadius.circular(8),
-                    ),
-                  )),
+                ),
+                child: const Padding(
+                  padding: EdgeInsets.symmetric(horizontal: 60.0),
+                  child: Text('Select', style: TextStyle(fontSize: 14)),
+                ),
+              ),
             ),
           )
         ],
diff --git a/lib/features/Settings/model/get_job_number_by_date_model.dart b/lib/features/Settings/model/get_job_number_by_date_model.dart
index 7d505b0..aeef97c 100644
--- a/lib/features/Settings/model/get_job_number_by_date_model.dart
+++ b/lib/features/Settings/model/get_job_number_by_date_model.dart
@@ -3,18 +3,23 @@ class GetJobNumberByDateModel {
   String? message;
   GetJobNumberByData? data;
 
-  GetJobNumberByDateModel({this.success, this.message, this.data});
+  GetJobNumberByDateModel({
+    this.success,
+    this.message,
+    this.data,
+  });
 
   GetJobNumberByDateModel.fromJson(Map<String, dynamic> json) {
     success = json['success'];
     message = json['message'];
-    data = json['data'] != null ? new GetJobNumberByData.fromJson(json['data']) : null;
+    data =
+        json['data'] != null ? GetJobNumberByData.fromJson(json['data']) : null;
   }
 
   Map<String, dynamic> toJson() {
-    final Map<String, dynamic> data = new Map<String, dynamic>();
-    data['success'] = this.success;
-    data['message'] = this.message;
+    final Map<String, dynamic> data = <String, dynamic>{};
+    data['success'] = success;
+    data['message'] = message;
     if (this.data != null) {
       data['data'] = this.data!.toJson();
     }
@@ -31,15 +36,15 @@ class GetJobNumberByData {
     if (json['jobDetails'] != null) {
       jobDetails = <JobDetails>[];
       json['jobDetails'].forEach((v) {
-        jobDetails!.add(new JobDetails.fromJson(v));
+        jobDetails!.add(JobDetails.fromJson(v));
       });
     }
   }
 
   Map<String, dynamic> toJson() {
-    final Map<String, dynamic> data = new Map<String, dynamic>();
-    if (this.jobDetails != null) {
-      data['jobDetails'] = this.jobDetails!.map((v) => v.toJson()).toList();
+    final Map<String, dynamic> data = <String, dynamic>{};
+    if (jobDetails != null) {
+      data['jobDetails'] = jobDetails!.map((v) => v.toJson()).toList();
     }
     return data;
   }
@@ -57,9 +62,9 @@ class JobDetails {
   }
 
   Map<String, dynamic> toJson() {
-    final Map<String, dynamic> data = new Map<String, dynamic>();
-    data['jobId'] = this.jobId;
-    data['jobNumber'] = this.jobNumber;
+    final Map<String, dynamic> data = <String, dynamic>{};
+    data['jobId'] = jobId;
+    data['jobNumber'] = jobNumber;
     return data;
   }
 }
diff --git a/lib/features/Settings/model/time_sheet_by_billno_staff_model.dart b/lib/features/Settings/model/time_sheet_by_billno_staff_model.dart
index 9a4a9b3..b4a6037 100644
--- a/lib/features/Settings/model/time_sheet_by_billno_staff_model.dart
+++ b/lib/features/Settings/model/time_sheet_by_billno_staff_model.dart
@@ -3,18 +3,22 @@ class TimeSheetByBillNoAndStaffModel {
   String? message;
   Data? data;
 
-  TimeSheetByBillNoAndStaffModel({this.success, this.message, this.data});
+  TimeSheetByBillNoAndStaffModel({
+    this.success,
+    this.message,
+    this.data,
+  });
 
   TimeSheetByBillNoAndStaffModel.fromJson(Map<String, dynamic> json) {
     success = json['success'];
     message = json['message'];
-    data = json['data'] != null ? new Data.fromJson(json['data']) : null;
+    data = json['data'] != null ? Data.fromJson(json['data']) : null;
   }
 
   Map<String, dynamic> toJson() {
-    final Map<String, dynamic> data = new Map<String, dynamic>();
-    data['success'] = this.success;
-    data['message'] = this.message;
+    final Map<String, dynamic> data = <String, dynamic>{};
+    data['success'] = success;
+    data['message'] = message;
     if (this.data != null) {
       data['data'] = this.data!.toJson();
     }
@@ -37,20 +41,21 @@ class Data {
   String? weekEndDate;
   String? timeSheetStatus;
 
-  Data(
-      {this.timesheetBillNo,
-      this.totalOvertimeHour,
-      this.totalRegularCost,
-      this.timeSheetData,
-      this.staffDetails,
-      this.totalPayableCost,
-      this.weekNumber,
-      this.timesheetId,
-      this.totalRegularHour,
-      this.weekStartDate,
-      this.totalOvertimeCost,
-      this.weekEndDate,
-      this.timeSheetStatus});
+  Data({
+    this.timesheetBillNo,
+    this.totalOvertimeHour,
+    this.totalRegularCost,
+    this.timeSheetData,
+    this.staffDetails,
+    this.totalPayableCost,
+    this.weekNumber,
+    this.timesheetId,
+    this.totalRegularHour,
+    this.weekStartDate,
+    this.totalOvertimeCost,
+    this.weekEndDate,
+    this.timeSheetStatus,
+  });
 
   Data.fromJson(Map<String, dynamic> json) {
     timesheetBillNo = json['timesheetBillNo'];
@@ -76,7 +81,7 @@ class Data {
   }
 
   Map<String, dynamic> toJson() {
-    final Map<String, dynamic> data = new Map<String, dynamic>();
+    final Map<String, dynamic> data = Map<String, dynamic>();
     data['timesheetBillNo'] = this.timesheetBillNo;
     data['totalOvertimeHour'] = this.totalOvertimeHour;
     data['totalRegularCost'] = this.totalRegularCost;
@@ -116,11 +121,11 @@ class TimeSheetData {
   }
 
   Map<String, dynamic> toJson() {
-    final Map<String, dynamic> data = new Map<String, dynamic>();
-    data['jobEvents'] = this.jobEvents;
-    data['regularHour'] = this.regularHour;
-    data['dateOfWeek'] = this.dateOfWeek;
-    data['overtimeHour'] = this.overtimeHour;
+    final Map<String, dynamic> data = <String, dynamic>{};
+    data['jobEvents'] = jobEvents;
+    data['regularHour'] = regularHour;
+    data['dateOfWeek'] = dateOfWeek;
+    data['overtimeHour'] = overtimeHour;
     return data;
   }
 }
@@ -139,10 +144,10 @@ class StaffDetails {
   }
 
   Map<String, dynamic> toJson() {
-    final Map<String, dynamic> data = new Map<String, dynamic>();
-    data['staffName'] = this.staffName;
-    data['staffId'] = this.staffId;
-    data['staffPhoneNo'] = this.staffPhoneNo;
+    final Map<String, dynamic> data = <String, dynamic>{};
+    data['staffName'] = staffName;
+    data['staffId'] = staffId;
+    data['staffPhoneNo'] = staffPhoneNo;
     return data;
   }
 }
diff --git a/lib/features/Settings/repo/settings_repo.dart b/lib/features/Settings/repo/settings_repo.dart
index 90ef656..2028757 100644
--- a/lib/features/Settings/repo/settings_repo.dart
+++ b/lib/features/Settings/repo/settings_repo.dart
@@ -5,6 +5,8 @@ abstract class SettingsRepo {
   final SettingsApiClientImpl apiClient;
   SettingsRepo({required this.apiClient});
 
-  Future<Resource> addTaxTable(
-      {required String taxName, required String taxRate});
+  Future<Resource> addTaxTable({
+    required String taxName,
+    required String taxRate,
+  });
 }
diff --git a/lib/features/Settings/repo/settings_repo_impl.dart b/lib/features/Settings/repo/settings_repo_impl.dart
index e324dd0..92fac05 100644
--- a/lib/features/Settings/repo/settings_repo_impl.dart
+++ b/lib/features/Settings/repo/settings_repo_impl.dart
@@ -4,16 +4,18 @@ import 'package:bizfns/features/Settings/repo/settings_repo.dart';
 import '../../../core/common/Status.dart';
 import '../../../core/utils/Utils.dart';
 
-class SettingsRepoImpl extends SettingsRepo{
+class SettingsRepoImpl extends SettingsRepo {
   SettingsRepoImpl({required super.apiClient});
 
   @override
-  Future<Resource> addTaxTable({required String taxName, required String taxRate}) async{
+  Future<Resource> addTaxTable({
+    required String taxName,
+    required String taxRate,
+  }) async {
     Utils().printMessage("here im");
 
     Resource data = await apiClient.addTaxTable(
-      taxMasterName: taxName, 
-      taxMasterRate: taxRate);
+        taxMasterName: taxName, taxMasterRate: taxRate);
     if (data.status == STATUS.SUCCESS) {
       Utils().printMessage("Tax added successfully");
     } else {
@@ -21,5 +23,4 @@ class SettingsRepoImpl extends SettingsRepo{
     }
     return data;
   }
-  
-}
\ No newline at end of file
+}
diff --git a/lib/features/Settings/settings_page.dart b/lib/features/Settings/settings_page.dart
index befa2e4..d8ba910 100644
--- a/lib/features/Settings/settings_page.dart
+++ b/lib/features/Settings/settings_page.dart
@@ -1,6 +1,4 @@
-import 'package:awesome_dialog/awesome_dialog.dart';
 import 'package:bizfns/core/utils/fonts.dart';
-import 'package:bizfns/core/utils/route_function.dart';
 import 'package:bizfns/core/widgets/common_text.dart';
 import 'package:bizfns/features/Admin/Staff/provider/staff_provider.dart';
 import 'package:bizfns/features/Home/bizfins_share_widget.dart';
@@ -12,18 +10,10 @@ import 'package:flutter/material.dart';
 import 'package:go_router/go_router.dart';
 import 'package:provider/provider.dart';
 import 'package:sizing/sizing.dart';
-
-// import 'package:provider/provider.dart';
 import 'package:flutter/foundation.dart';
 import 'package:gap/gap.dart';
-import '../../../core/widgets/common_button.dart';
-import '../../../core/utils/colour_constants.dart';
-import '../../core/route/RouteConstants.dart';
-import '../../core/shared_pref/shared_pref.dart';
-import '../../core/utils/Utils.dart';
 import '../../core/utils/bizfns_layout_widget.dart';
 import '../../provider/job_schedule_controller.dart';
-import '../Home/dashboard.dart';
 
 class SettingsPage extends StatefulWidget {
   const SettingsPage({super.key});
@@ -35,7 +25,7 @@ class SettingsPage extends StatefulWidget {
 class _SettingsPageState extends State<SettingsPage> {
   @override
   Widget build(BuildContext context) {
-    var controller = context.watch<JobScheduleProvider>();
+    // var controller = context.watch<JobScheduleProvider>();
 
     return Scaffold(
       body: Container(
@@ -70,15 +60,16 @@ class _SettingsPageState extends State<SettingsPage> {
                           child: Row(
                             children: [
                               CircleAvatar(
-                                  backgroundColor: Colors.grey[200],
-                                  radius: 20.ss,
-                                  // Adjust the radius as needed
-                                  child: Image.asset(
-                                    'assets/images/four-squares-button.png',
-                                    width: 20.ss,
-                                    height: 20.ss,
-                                    fit: BoxFit.cover,
-                                  )),
+                                backgroundColor: Colors.grey[200],
+                                radius: 20.ss,
+                                // Adjust the radius as needed
+                                child: Image.asset(
+                                  'assets/images/four-squares-button.png',
+                                  width: 20.ss,
+                                  height: 20.ss,
+                                  fit: BoxFit.cover,
+                                ),
+                              ),
                               SizedBox(width: 8.ss),
                               CommonText(
                                 text: '  Working Hours',
@@ -89,8 +80,8 @@ class _SettingsPageState extends State<SettingsPage> {
                                 ),
                               ),
                               // Padding(padding: const EdgeInsets.all(16.0),),
-                              Spacer(),
-                              Icon(
+                              const Spacer(),
+                              const Icon(
                                 Icons.arrow_forward_ios_outlined,
                               ),
                             ],
@@ -102,9 +93,10 @@ class _SettingsPageState extends State<SettingsPage> {
                       await Provider.of<JobScheduleProvider>(context,
                               listen: false)
                           .getWorkingHours(
-                              context: context,
-                              isRedirect: false,
-                              openDialogue: true);
+                        context: context,
+                        isRedirect: false,
+                        openDialogue: true,
+                      );
                     },
                   ),
                   InkWell(
@@ -112,9 +104,10 @@ class _SettingsPageState extends State<SettingsPage> {
                       await Provider.of<JobScheduleProvider>(context,
                               listen: false)
                           .getTimeInterval(
-                              context: context,
-                              isRedirect: false,
-                              openDialogue: true);
+                        context: context,
+                        isRedirect: false,
+                        openDialogue: true,
+                      );
                     },
                     child: SizedBox(
                       height: 80.ss,
@@ -152,8 +145,8 @@ class _SettingsPageState extends State<SettingsPage> {
                                   color: Colors.black,
                                 ),
                               ),
-                              Spacer(),
-                              Icon(
+                              const Spacer(),
+                              const Icon(
                                 Icons.arrow_forward_ios_outlined,
                               ),
                             ],
@@ -163,24 +156,24 @@ class _SettingsPageState extends State<SettingsPage> {
                     ),
                   ),
                   InkWell(
-                    onTap: () async{
-
-
+                    onTap: () async {
                       Provider.of<JobScheduleProvider>(context, listen: false)
                           .reminderResponseModel = null;
 
                       await Provider.of<JobScheduleProvider>(context,
-                          listen: false)
-                          .getReminder(context,openDialogue: true);
+                              listen: false)
+                          .getReminder(context, openDialogue: true);
 
                       GoRouter.of(context)
                           .pushNamed(
                         'reminder',
                       )
-                          .then((value) {
-                        Provider.of<TitleProvider>(context, listen: false)
-                            .changeTitle('Settings');
-                      });
+                          .then(
+                        (value) {
+                          Provider.of<TitleProvider>(context, listen: false)
+                              .changeTitle('Settings');
+                        },
+                      );
                     },
                     child: SizedBox(
                       height: 80.ss,
@@ -218,8 +211,8 @@ class _SettingsPageState extends State<SettingsPage> {
                                   color: Colors.black,
                                 ),
                               ),
-                              Spacer(),
-                              Icon(
+                              const Spacer(),
+                              const Icon(
                                 Icons.arrow_forward_ios_outlined,
                               ),
                             ],
@@ -282,8 +275,8 @@ class _SettingsPageState extends State<SettingsPage> {
                                   color: Colors.black,
                                 ),
                               ),
-                              Spacer(),
-                              Icon(
+                              const Spacer(),
+                              const Icon(
                                 Icons.arrow_forward_ios_outlined,
                               ),
                             ],
@@ -297,9 +290,10 @@ class _SettingsPageState extends State<SettingsPage> {
                       await Provider.of<JobScheduleProvider>(context,
                               listen: false)
                           .getMaxJobTask(
-                              context: context,
-                              isRedirect: false,
-                              openDialogue: true);
+                        context: context,
+                        isRedirect: false,
+                        openDialogue: true,
+                      );
                     },
                     child: SizedBox(
                       height: 80.ss,
@@ -337,8 +331,8 @@ class _SettingsPageState extends State<SettingsPage> {
                                   color: Colors.black,
                                 ),
                               ),
-                              Spacer(),
-                              Icon(
+                              const Spacer(),
+                              const Icon(
                                 Icons.arrow_forward_ios_outlined,
                               ),
                             ],
@@ -385,8 +379,8 @@ class _SettingsPageState extends State<SettingsPage> {
                                   color: Colors.black,
                                 ),
                               ),
-                              Spacer(),
-                              Icon(
+                              const Spacer(),
+                              const Icon(
                                 Icons.arrow_forward_ios_outlined,
                               ),
                             ],
@@ -397,12 +391,12 @@ class _SettingsPageState extends State<SettingsPage> {
                   ),
                   InkWell(
                     onTap: () {
-                      GoRouter.of(context)
-                          .pushNamed('tax-setting')
-                          .then((value) {
-                        Provider.of<TitleProvider>(context, listen: false)
-                            .changeTitle('Settings');
-                      });
+                      GoRouter.of(context).pushNamed('tax-setting').then(
+                        (value) {
+                          Provider.of<TitleProvider>(context, listen: false)
+                              .changeTitle('Settings');
+                        },
+                      );
                     },
                     child: SizedBox(
                       height: 80.ss,
@@ -440,8 +434,8 @@ class _SettingsPageState extends State<SettingsPage> {
                                   color: Colors.black,
                                 ),
                               ),
-                              Spacer(),
-                              Icon(
+                              const Spacer(),
+                              const Icon(
                                 Icons.arrow_forward_ios_outlined,
                               ),
                             ],
@@ -455,12 +449,6 @@ class _SettingsPageState extends State<SettingsPage> {
                       context
                           .read<StaffProvider>()
                           .getStaffDetailsWhileStaffLogin(context: context);
-                      // GoRouter.of(context)
-                      //     .pushNamed('time-sheet')
-                      //     .then((value) {
-                      //   Provider.of<TitleProvider>(context, listen: false)
-                      //       .changeTitle('Settings');
-                      // });
                     },
                     child: SizedBox(
                       height: 80.ss,
@@ -498,8 +486,8 @@ class _SettingsPageState extends State<SettingsPage> {
                                   color: Colors.black,
                                 ),
                               ),
-                              Spacer(),
-                              Icon(
+                              const Spacer(),
+                              const Icon(
                                 Icons.arrow_forward_ios_outlined,
                               ),
                             ],
@@ -546,8 +534,8 @@ class _SettingsPageState extends State<SettingsPage> {
                                   color: Colors.black,
                                 ),
                               ),
-                              Spacer(),
-                              Icon(
+                              const Spacer(),
+                              const Icon(
                                 Icons.arrow_forward_ios_outlined,
                               ),
                             ],
@@ -559,10 +547,10 @@ class _SettingsPageState extends State<SettingsPage> {
                 ],
               ),
             ),
-            SizedBox(
+            const SizedBox(
               height: 20,
             ),
-            BizfinsShareWidget(),
+            const BizfinsShareWidget(),
           ],
         ),
       ),
@@ -575,12 +563,12 @@ class _SettingsPageState extends State<SettingsPage> {
       context: context,
       builder: (context) {
         return Dialog(
-            shape: RoundedRectangleBorder(
-              borderRadius: BorderRadius.circular(12.0),
-            ),
-            child:
-                StatefulBuilder(// You need this, notice the parameters below:
-                    builder: (BuildContext context, StateSetter setState) {
+          shape: RoundedRectangleBorder(
+            borderRadius: BorderRadius.circular(12.0),
+          ),
+          child: StatefulBuilder(
+            // You need this, notice the parameters below:
+            builder: (BuildContext context, StateSetter setState) {
               return str == "working-hours"
                   ? WorkingHourWidget(
                       onChanged: (val) async {
@@ -615,23 +603,27 @@ class _SettingsPageState extends State<SettingsPage> {
                           : str == "reminder"
                               ? ReminderWidget()
                               : Container();
-            }));
+            },
+          ),
+        );
       },
-    ).then((value) {
-      if (value != null) {
-        setState(() {
-          // text=value;WriteNote
-        });
-      } else if (value is List) {
-        //todo set working hours
-        print(value.toString());
-      } else if (value is Map<String, int?>) {
-        if (value['interval'] == null) {
-          //todo maxJob
-        } else if (value['max_job'] == null) {
-          //todo interval
+    ).then(
+      (value) {
+        if (value != null) {
+          setState(() {
+            // text=value;WriteNote
+          });
+        } else if (value is List) {
+          //todo set working hours
+          print(value.toString());
+        } else if (value is Map<String, int?>) {
+          if (value['interval'] == null) {
+            //todo maxJob
+          } else if (value['max_job'] == null) {
+            //todo interval
+          }
         }
-      }
-    });
+      },
+    );
   }
 }
diff --git a/lib/features/Settings/staff_permission_screen.dart b/lib/features/Settings/staff_permission_screen.dart
index db7e07e..d07a52c 100644
--- a/lib/features/Settings/staff_permission_screen.dart
+++ b/lib/features/Settings/staff_permission_screen.dart
@@ -1,10 +1,8 @@
 import 'package:bizfns/core/utils/colour_constants.dart';
 import 'package:bizfns/core/widgets/AddModifyScheduleCustomField/custom_button.dart';
 import 'package:bizfns/provider/job_schedule_controller.dart';
-import 'package:dropdown_button2/dropdown_button2.dart';
 import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
-
 import '../../easy_drop_down.dart';
 
 class StaffPermissionScreen extends StatefulWidget {
@@ -52,7 +50,7 @@ class _StaffPermissionScreenState extends State<StaffPermissionScreen> {
     var controller = context.watch<JobScheduleProvider>();
 
     return controller.userTypeResponseModel == null
-        ? Center(
+        ? const Center(
             child: CircularProgressIndicator(),
           )
         : controller.userTypeResponseModel!.data == null
@@ -100,16 +98,18 @@ class _StaffPermissionScreenState extends State<StaffPermissionScreen> {
 
                         await Provider.of<JobScheduleProvider>(context,
                                 listen: false)
-                            .getUserPrivilege(context,
-                                phoneNumber: phoneNumber!);
+                            .getUserPrivilege(
+                          context,
+                          phoneNumber: phoneNumber!,
+                        );
                       },
                     ),
                   ),
-                  SizedBox(
+                  const SizedBox(
                     height: 30,
                   ),
                   controller.privilegeResponseModel == null
-                      ? SizedBox()
+                      ? const SizedBox()
                       : Expanded(
                           flex: 2,
                           child: ListView(
@@ -120,20 +120,23 @@ class _StaffPermissionScreenState extends State<StaffPermissionScreen> {
                                 color: Colors.grey.withOpacity(0.3),
                                 child: Padding(
                                   padding: const EdgeInsets.symmetric(
-                                      horizontal: 10),
+                                    horizontal: 10,
+                                  ),
                                   child: Row(
                                     mainAxisAlignment:
                                         MainAxisAlignment.spaceBetween,
                                     children: [
                                       ConstrainedBox(
                                         constraints: const BoxConstraints(
-                                            minWidth: 100, maxWidth: 100),
+                                          minWidth: 100,
+                                          maxWidth: 100,
+                                        ),
                                         child: const Text('Privilege Type'),
                                       ),
-                                      Text('View All'),
-                                      Text('View Own'),
-                                      Text('Edit All'),
-                                      Text('Edit Own'),
+                                      const Text('View All'),
+                                      const Text('View Own'),
+                                      const Text('Edit All'),
+                                      const Text('Edit Own'),
                                     ],
                                   ),
                                 ),
@@ -146,47 +149,52 @@ class _StaffPermissionScreenState extends State<StaffPermissionScreen> {
                                 ...controller.privilegeResponseModel!.data!
                                     .firstWhere((element) => element.type == 1)
                                     .privilegeList!
-                                    .map((e) => SizedBox(
-                                          height: 40,
-                                          child: Padding(
-                                            padding: const EdgeInsets.symmetric(
-                                                horizontal: 10),
-                                            child: Row(
-                                              mainAxisAlignment:
-                                                  MainAxisAlignment
-                                                      .spaceBetween,
-                                              children: [
-                                                ConstrainedBox(
-                                                  constraints:
-                                                      const BoxConstraints(
-                                                          minWidth: 100,
-                                                          maxWidth: 100),
-                                                  child: Text(e.title ?? ""),
+                                    .map(
+                                      (e) => SizedBox(
+                                        height: 40,
+                                        child: Padding(
+                                          padding: const EdgeInsets.symmetric(
+                                            horizontal: 10,
+                                          ),
+                                          child: Row(
+                                            mainAxisAlignment:
+                                                MainAxisAlignment.spaceBetween,
+                                            children: [
+                                              ConstrainedBox(
+                                                constraints:
+                                                    const BoxConstraints(
+                                                  minWidth: 100,
+                                                  maxWidth: 100,
                                                 ),
-                                                ...e.privilege!
-                                                    .map((e1) => Checkbox(
-                                                          value:
-                                                              e1.value ?? false,
-                                                          activeColor:
-                                                              Colors.green[400],
-                                                          onChanged: (val) {},
-                                                        ))
-                                                    .toList(),
-                                              ],
-                                            ),
+                                                child: Text(e.title ?? ""),
+                                              ),
+                                              ...e.privilege!
+                                                  .map(
+                                                    (e1) => Checkbox(
+                                                      value: e1.value ?? false,
+                                                      activeColor:
+                                                          Colors.green[400],
+                                                      onChanged: (val) {},
+                                                    ),
+                                                  )
+                                                  .toList(),
+                                            ],
                                           ),
-                                        ))
+                                        ),
+                                      ),
+                                    )
                                     .toList(),
                               },
-                              SizedBox(
+                              const SizedBox(
                                 height: 20,
                               ),
                               Container(
                                 height: 50,
-                                color: Colors.grey.withOpacity(0.3),
+                                color: const Color(0x4D9E9E9E),
                                 child: Padding(
                                   padding: const EdgeInsets.symmetric(
-                                      horizontal: 10),
+                                    horizontal: 10,
+                                  ),
                                   child: Row(
                                     mainAxisAlignment:
                                         MainAxisAlignment.spaceBetween,
@@ -196,10 +204,10 @@ class _StaffPermissionScreenState extends State<StaffPermissionScreen> {
                                             minWidth: 100, maxWidth: 100),
                                         child: const Text('Privilege Type'),
                                       ),
-                                      Text('View'),
-                                      Text('Add'),
-                                      Text('Edit'),
-                                      Text('Delete'),
+                                      const Text('View'),
+                                      const Text('Add'),
+                                      const Text('Edit'),
+                                      const Text('Delete'),
                                     ],
                                   ),
                                 ),
@@ -212,49 +220,52 @@ class _StaffPermissionScreenState extends State<StaffPermissionScreen> {
                                 ...controller.privilegeResponseModel!.data!
                                     .firstWhere((element) => element.type == 2)
                                     .privilegeList!
-                                    .map((e) => SizedBox(
-                                          height: 40,
-                                          child: Padding(
-                                            padding: const EdgeInsets.symmetric(
-                                                horizontal: 10),
-                                            child: Row(
-                                              mainAxisAlignment:
-                                                  MainAxisAlignment
-                                                      .spaceBetween,
-                                              children: [
-                                                ConstrainedBox(
-                                                  constraints:
-                                                      const BoxConstraints(
-                                                          minWidth: 100,
-                                                          maxWidth: 100),
-                                                  child: Text(e.title ?? ""),
+                                    .map(
+                                      (e) => SizedBox(
+                                        height: 40,
+                                        child: Padding(
+                                          padding: const EdgeInsets.symmetric(
+                                            horizontal: 10,
+                                          ),
+                                          child: Row(
+                                            mainAxisAlignment:
+                                                MainAxisAlignment.spaceBetween,
+                                            children: [
+                                              ConstrainedBox(
+                                                constraints:
+                                                    const BoxConstraints(
+                                                  minWidth: 100,
+                                                  maxWidth: 100,
                                                 ),
-                                                ...e.privilege!
-                                                    .map((e1) => Checkbox(
-                                                          value:
-                                                              e1.value ?? false,
-                                                          activeColor:
-                                                              Colors.green[400],
-                                                          onChanged: (val) {
-                                                            e1.value = val;
+                                                child: Text(e.title ?? ""),
+                                              ),
+                                              ...e.privilege!
+                                                  .map(
+                                                    (e1) => Checkbox(
+                                                      value: e1.value ?? false,
+                                                      activeColor:
+                                                          Colors.green[400],
+                                                      onChanged: (val) {
+                                                        e1.value = val;
 
-                                                            if (val == true) {
-                                                              selectedIDs
-                                                                  .add(e1.id!);
-                                                            } else {
-                                                              selectedIDs
-                                                                  .remove(
-                                                                      e1.id!);
-                                                            }
+                                                        if (val == true) {
+                                                          selectedIDs
+                                                              .add(e1.id!);
+                                                        } else {
+                                                          selectedIDs
+                                                              .remove(e1.id!);
+                                                        }
 
-                                                            setState(() {});
-                                                          },
-                                                        ))
-                                                    .toList(),
-                                              ],
-                                            ),
+                                                        setState(() {});
+                                                      },
+                                                    ),
+                                                  )
+                                                  .toList(),
+                                            ],
                                           ),
-                                        ))
+                                        ),
+                                      ),
+                                    )
                                     .toList(),
                               },
                             ],
@@ -265,10 +276,12 @@ class _StaffPermissionScreenState extends State<StaffPermissionScreen> {
                     child: InkWell(
                       onTap: () async {
                         if (selectedIDs.isNotEmpty) {
-                          await controller.addUserPrivilege(context,
-                              privileges: selectedIDs.join(','),
-                              type: userType!,
-                              phoneNumber: phoneNumber!);
+                          await controller.addUserPrivilege(
+                            context,
+                            privileges: selectedIDs.join(','),
+                            type: userType!,
+                            phoneNumber: phoneNumber!,
+                          );
                         }
                       },
                       child: CustomButton(
diff --git a/lib/features/Settings/tax_settings_screen.dart b/lib/features/Settings/tax_settings_screen.dart
index a206327..7685c64 100644
--- a/lib/features/Settings/tax_settings_screen.dart
+++ b/lib/features/Settings/tax_settings_screen.dart
@@ -1,14 +1,11 @@
 import 'dart:developer';
-
 import 'package:flutter/cupertino.dart';
 import 'package:flutter/material.dart';
 import 'package:go_router/go_router.dart';
 import 'package:provider/provider.dart';
-
 import '../../core/utils/Utils.dart';
 import '../../core/utils/colour_constants.dart';
 import '../../provider/job_schedule_controller.dart';
-import '../Admin/Create Job/model/tax_model.dart';
 
 class TaxSettings extends StatefulWidget {
   const TaxSettings({super.key});
@@ -145,10 +142,13 @@ class _TaxSettingsState extends State<TaxSettings> {
                   keyboardType: TextInputType.name,
                   controller: allTaxNameController[index],
                   decoration: const InputDecoration(
-                      border: OutlineInputBorder(),
-                      hintText: 'type tax name',
-                      contentPadding: EdgeInsets.symmetric(
-                          vertical: 5.0, horizontal: 10.0)),
+                    border: OutlineInputBorder(),
+                    hintText: 'type tax name',
+                    contentPadding: EdgeInsets.symmetric(
+                      vertical: 5.0,
+                      horizontal: 10.0,
+                    ),
+                  ),
                 ),
               ),
               const SizedBox(
@@ -187,42 +187,43 @@ class _TaxSettingsState extends State<TaxSettings> {
                               allTaxRateController.length &&
                           isEditable[index] == true,
                       child: InkWell(
-                          onTap: () {
-                            allTaxNameController.removeAt(index);
-                            allTaxRateController.removeAt(index);
-                            isEditTaxName.removeAt(index);
-                            isEditable.removeAt(index);
-                            setState(() {});
-                          },
-                          child: const Icon(
-                            Icons.delete,
-                            color: Colors.red,
-                          )),
+                        onTap: () {
+                          allTaxNameController.removeAt(index);
+                          allTaxRateController.removeAt(index);
+                          isEditTaxName.removeAt(index);
+                          isEditable.removeAt(index);
+                          setState(() {});
+                        },
+                        child: const Icon(
+                          Icons.delete,
+                          color: Colors.red,
+                        ),
+                      ),
                     ),
                     InkWell(
-                        onTap: () {
-                          if (Provider.of<JobScheduleProvider>(context,
-                                      listen: false)
-                                  .taxList
-                                  .length ==
-                              allTaxRateController.length) {
-                            if (allTaxNameController[index].text.isNotEmpty &&
-                                allTaxRateController[index].text.isNotEmpty) {
-                              taxUpdateMap['TaxTypeId'] =
-                                  Provider.of<JobScheduleProvider>(context,
-                                          listen: false)
-                                      .taxList[index]
-                                      .taxtypeid
-                                      .toString();
-                              taxUpdateMap['TaxRate'] =
-                                  allTaxRateController[index].text.toString();
+                      onTap: () {
+                        if (Provider.of<JobScheduleProvider>(context,
+                                    listen: false)
+                                .taxList
+                                .length ==
+                            allTaxRateController.length) {
+                          if (allTaxNameController[index].text.isNotEmpty &&
+                              allTaxRateController[index].text.isNotEmpty) {
+                            taxUpdateMap['TaxTypeId'] =
+                                Provider.of<JobScheduleProvider>(context,
+                                        listen: false)
+                                    .taxList[index]
+                                    .taxtypeid
+                                    .toString();
+                            taxUpdateMap['TaxRate'] =
+                                allTaxRateController[index].text.toString();
 
-                              Provider.of<JobScheduleProvider>(context,
-                                      listen: false)
-                                  .updateTaxTable(
-                                      taxUpdates: taxUpdateMap,
-                                      context: context)
-                                  .then(((value) {
+                            Provider.of<JobScheduleProvider>(context,
+                                    listen: false)
+                                .updateTaxTable(
+                                    taxUpdates: taxUpdateMap, context: context)
+                                .then(
+                              ((value) {
                                 Provider.of<JobScheduleProvider>(context,
                                         listen: false)
                                     .getTaxValue(context: context)
@@ -231,84 +232,86 @@ class _TaxSettingsState extends State<TaxSettings> {
                                   initializeTaxValue();
                                   setState(() {});
                                 });
-                              }));
-                            } else if (allTaxRateController[index]
-                                .text
-                                .isEmpty) {
-                              Utils().ShowWarningSnackBar(
-                                  context, 'Validation', 'Please add tax rate');
-                            } else if (allTaxNameController[index]
-                                .text
-                                .isEmpty) {
-                              Utils().ShowWarningSnackBar(
-                                  context, 'Validation', 'Please add tax name');
-                            } else {
-                              Utils().ShowWarningSnackBar(context, 'Validation',
-                                  'Please add tax name & rate');
-                            }
-
-                            // initializeTaxValue();
-                            // setState(() {});
-                            // log("Tax json : ${taxUpdateMap}");
+                              }),
+                            );
+                          } else if (allTaxRateController[index].text.isEmpty) {
+                            Utils().ShowWarningSnackBar(
+                                context, 'Validation', 'Please add tax rate');
+                          } else if (allTaxNameController[index].text.isEmpty) {
+                            Utils().ShowWarningSnackBar(
+                                context, 'Validation', 'Please add tax name');
                           } else {
-                            if (allTaxNameController[index].text.isNotEmpty &&
-                                allTaxRateController[index].text.isNotEmpty) {
-                              Provider.of<JobScheduleProvider>(
-                                      context,
+                            Utils().ShowWarningSnackBar(context, 'Validation',
+                                'Please add tax name & rate');
+                          }
+
+                          // initializeTaxValue();
+                          // setState(() {});
+                          // log("Tax json : ${taxUpdateMap}");
+                        } else {
+                          if (allTaxNameController[index].text.isNotEmpty &&
+                              allTaxRateController[index].text.isNotEmpty) {
+                            Provider.of<JobScheduleProvider>(
+                                    context,
+                                    listen: false)
+                                .addTaxTable(
+                                    taxMasterName:
+                                        allTaxNameController[index].text,
+                                    taxMasterRate:
+                                        allTaxRateController[index].text,
+                                    context: context)
+                                .then((value) {
+                              Provider.of<JobScheduleProvider>(context,
                                       listen: false)
-                                  .addTaxTable(
-                                      taxMasterName:
-                                          allTaxNameController[index].text,
-                                      taxMasterRate:
-                                          allTaxRateController[index].text,
-                                      context: context)
+                                  .getTaxValue(context: context)
                                   .then((value) {
-                                Provider.of<JobScheduleProvider>(context,
-                                        listen: false)
-                                    .getTaxValue(context: context)
-                                    .then((value) {
-                                  log("LENGHTH : ${Provider.of<JobScheduleProvider>(context, listen: false).taxList.length}");
-                                  initializeTaxValue();
-                                  // isEditable[index] = !isEditable[index];
-                                  setState(() {});
-                                  // initializeTaxValue();
-                                });
+                                log("LENGHTH : ${Provider.of<JobScheduleProvider>(context, listen: false).taxList.length}");
+                                initializeTaxValue();
+                                // isEditable[index] = !isEditable[index];
+                                setState(() {});
+                                // initializeTaxValue();
                               });
-                            } else if (allTaxRateController[index]
-                                .text
-                                .isEmpty) {
-                              Utils().ShowWarningSnackBar(
-                                  context, 'Validation', 'Please add tax rate');
-                            } else if (allTaxNameController[index]
-                                .text
-                                .isEmpty) {
-                              Utils().ShowWarningSnackBar(
-                                  context, 'Validation', 'Please add tax name');
-                            } else {
-                              Utils().ShowWarningSnackBar(context, 'Validation',
-                                  'Please add tax name & rate');
-                            }
+                            });
+                          } else if (allTaxRateController[index].text.isEmpty) {
+                            Utils().ShowWarningSnackBar(
+                                context, 'Validation', 'Please add tax rate');
+                          } else if (allTaxNameController[index].text.isEmpty) {
+                            Utils().ShowWarningSnackBar(
+                                context, 'Validation', 'Please add tax name');
+                          } else {
+                            Utils().ShowWarningSnackBar(context, 'Validation',
+                                'Please add tax name & rate');
                           }
-                        },
-                        child: Container(
-                            decoration: BoxDecoration(
-                                borderRadius: BorderRadius.circular(5),
-                                color: AppColor.APP_BAR_COLOUR),
-                            child: Padding(
-                              padding: const EdgeInsets.all(6.0),
-                              child: Provider.of<JobScheduleProvider>(context,
-                                                  listen: false)
-                                              .taxList
-                                              .length ==
-                                          allTaxRateController.length &&
-                                      isEditable[index] == true
-                                  ? const Text('Update',
-                                      style: TextStyle(color: Colors.white))
-                                  : const Text(
-                                      'Save',
-                                      style: TextStyle(color: Colors.white),
-                                    ),
-                            ))),
+                        }
+                      },
+                      child: Container(
+                        decoration: BoxDecoration(
+                          borderRadius: BorderRadius.circular(5),
+                          color: AppColor.APP_BAR_COLOUR,
+                        ),
+                        child: Padding(
+                          padding: const EdgeInsets.all(6.0),
+                          child: Provider.of<JobScheduleProvider>(context,
+                                              listen: false)
+                                          .taxList
+                                          .length ==
+                                      allTaxRateController.length &&
+                                  isEditable[index] == true
+                              ? const Text(
+                                  'Update',
+                                  style: TextStyle(
+                                    color: Colors.white,
+                                  ),
+                                )
+                              : const Text(
+                                  'Save',
+                                  style: TextStyle(
+                                    color: Colors.white,
+                                  ),
+                                ),
+                        ),
+                      ),
+                    ),
                   ],
                 )
               : Row(
@@ -324,39 +327,40 @@ class _TaxSettingsState extends State<TaxSettings> {
                             setState(() {});
                           } else {
                             showCupertinoDialog(
-                                context: context,
-                                builder: (_) {
-                                  return CupertinoAlertDialog(
-                                    content: const Text(
-                                      'Are you sure, you want to delete the Tax?',
-                                      style: TextStyle(
-                                        color: Color(0xff093d52),
-                                        fontSize: 17,
-                                      ),
+                              context: context,
+                              builder: (_) {
+                                return CupertinoAlertDialog(
+                                  content: const Text(
+                                    'Are you sure, you want to delete the Tax?',
+                                    style: TextStyle(
+                                      color: Color(0xff093d52),
+                                      fontSize: 17,
                                     ),
-                                    actions: [
-                                      CupertinoButton(
-                                        child: const Text(
-                                          'Yes, Delete',
-                                          style: TextStyle(
-                                            color: Colors.green,
-                                          ),
+                                  ),
+                                  actions: [
+                                    CupertinoButton(
+                                      child: const Text(
+                                        'Yes, Delete',
+                                        style: TextStyle(
+                                          color: Colors.green,
                                         ),
-                                        onPressed: () {
-                                          //-----Delete will be here----//
-                                          Provider.of<JobScheduleProvider>(
-                                                  context,
-                                                  listen: false)
-                                              .deleteTaxTable(
-                                                  taxTypeId: Provider.of<
-                                                              JobScheduleProvider>(
-                                                          context,
-                                                          listen: false)
-                                                      .taxList[index]
-                                                      .taxtypeid
-                                                      .toString(),
-                                                  context: context)
-                                              .then((value) async {
+                                      ),
+                                      onPressed: () {
+                                        //-----Delete will be here----//
+                                        Provider.of<JobScheduleProvider>(
+                                                context,
+                                                listen: false)
+                                            .deleteTaxTable(
+                                                taxTypeId: Provider.of<
+                                                            JobScheduleProvider>(
+                                                        context,
+                                                        listen: false)
+                                                    .taxList[index]
+                                                    .taxtypeid
+                                                    .toString(),
+                                                context: context)
+                                            .then(
+                                          (value) async {
                                             await Provider.of<
                                                         JobScheduleProvider>(
                                                     context,
@@ -364,27 +368,31 @@ class _TaxSettingsState extends State<TaxSettings> {
                                                 .getTaxValue(
                                               context: context,
                                             )
-                                                .then((value) async {
-                                              initializeTaxValue();
-                                              setState(() {});
-                                            });
-                                          });
-                                          context.pop();
-                                        },
-                                      ),
-                                      CupertinoButton(
-                                        child: const Text(
-                                          'No',
-                                          style: TextStyle(color: Colors.red),
-                                        ),
-                                        onPressed: () {
-                                          context.pop();
-                                          setState(() {});
-                                        },
+                                                .then(
+                                              (value) async {
+                                                initializeTaxValue();
+                                                setState(() {});
+                                              },
+                                            );
+                                          },
+                                        );
+                                        context.pop();
+                                      },
+                                    ),
+                                    CupertinoButton(
+                                      child: const Text(
+                                        'No',
+                                        style: TextStyle(color: Colors.red),
                                       ),
-                                    ],
-                                  );
-                                });
+                                      onPressed: () {
+                                        context.pop();
+                                        setState(() {});
+                                      },
+                                    ),
+                                  ],
+                                );
+                              },
+                            );
                           }
                         },
                         child: Container(
@@ -419,21 +427,22 @@ class _TaxSettingsState extends State<TaxSettings> {
                           updateListAtIndex(isEditable, index);
                         },
                         child: Container(
-                            width:
-                                20, // Adjust the width to control the size of the container
-                            height:
-                                20, // Adjust the height to control the size of the container
-                            decoration: const BoxDecoration(
-                              color: AppColor
-                                  .APP_BAR_COLOUR, // Background color of the container
-                              shape: BoxShape
-                                  .circle, // Makes the container circular
-                            ),
-                            child: Icon(
-                              isEditable[index] ? Icons.check : Icons.edit,
-                              color: Colors.white,
-                              size: 15,
-                            )),
+                          width:
+                              20, // Adjust the width to control the size of the container
+                          height:
+                              20, // Adjust the height to control the size of the container
+                          decoration: const BoxDecoration(
+                            color: AppColor
+                                .APP_BAR_COLOUR, // Background color of the container
+                            shape:
+                                BoxShape.circle, // Makes the container circular
+                          ),
+                          child: Icon(
+                            isEditable[index] ? Icons.check : Icons.edit,
+                            color: Colors.white,
+                            size: 15,
+                          ),
+                        ),
                       ),
                     )
                   ],
@@ -451,47 +460,51 @@ class _TaxSettingsState extends State<TaxSettings> {
           setAllToFalse(isEditable);
         }
       },
-      child: Container(
-          child: Column(
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          Column(
-            children: List.generate(allTaxNameController.length, (index) {
-              return getSpecialChargesTextField(index);
-            }),
-          ),
-          Visibility(
-            visible: !anyFieldIsBlank(),
-            child: Padding(
-              padding: const EdgeInsets.only(left: 10.0),
-              child: ElevatedButton.icon(
-                style: ElevatedButton.styleFrom(
-                  primary: Colors.grey[300], // Background color
-                  onPrimary: Colors.black, // Text color
-                  shape: RoundedRectangleBorder(
-                    borderRadius:
-                        BorderRadius.circular(20.0), // Rounded corners
+      child: SizedBox(
+        child: Column(
+          crossAxisAlignment: CrossAxisAlignment.start,
+          children: [
+            Column(
+              children: List.generate(
+                allTaxNameController.length,
+                (index) {
+                  return getSpecialChargesTextField(index);
+                },
+              ),
+            ),
+            Visibility(
+              visible: !anyFieldIsBlank(),
+              child: Padding(
+                padding: const EdgeInsets.only(left: 10.0),
+                child: ElevatedButton.icon(
+                  style: ElevatedButton.styleFrom(
+                    foregroundColor: Colors.black,
+                    backgroundColor: Colors.grey[300], // Text color
+                    shape: RoundedRectangleBorder(
+                      borderRadius:
+                          BorderRadius.circular(20.0), // Rounded corners
+                    ),
+                    elevation: 0, // No shadow
                   ),
-                  elevation: 0, // No shadow
-                ),
-                icon: const Icon(
-                  Icons.add_circle_outline,
-                  color: Colors.green, // Icon color
-                ),
-                label: const Text(
-                  'Add New Tax',
-                  style: TextStyle(fontSize: 14.0),
+                  icon: const Icon(
+                    Icons.add_circle_outline,
+                    color: Colors.green, // Icon color
+                  ),
+                  label: const Text(
+                    'Add New Tax',
+                    style: TextStyle(fontSize: 14.0),
+                  ),
+                  onPressed: () {
+                    // Add your onPressed code here!
+                    setAllToFalse(isEditable);
+                    generateTaxTextField();
+                  },
                 ),
-                onPressed: () {
-                  // Add your onPressed code here!
-                  setAllToFalse(isEditable);
-                  generateTaxTextField();
-                },
               ),
             ),
-          )
-        ],
-      )),
+          ],
+        ),
+      ),
     );
   }
 }
diff --git a/lib/features/Settings/time_sheet_bill.dart b/lib/features/Settings/time_sheet_bill.dart
index 3537297..fe4f401 100644
--- a/lib/features/Settings/time_sheet_bill.dart
+++ b/lib/features/Settings/time_sheet_bill.dart
@@ -1,5 +1,4 @@
 import 'dart:developer';
-
 import 'package:bizfns/features/Settings/widget/weekly_calender.dart';
 import 'package:dropdown_button2/dropdown_button2.dart';
 import 'package:flutter/material.dart';
@@ -17,7 +16,10 @@ import 'model/time_sheet_by_billno_staff_model.dart';
 
 class TimeSheetBill extends StatefulWidget {
   final StaffDetailsData data;
-  const TimeSheetBill({super.key, required this.data});
+  const TimeSheetBill({
+    super.key,
+    required this.data,
+  });
 
   @override
   State<TimeSheetBill> createState() => _TimeSheetBillState();
@@ -48,33 +50,37 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
   ];
 
   void addFieldsForDate(int index) {
-    setState(() {
-      // Ensure the sublist exists for this date
-      if (hourControllers.length <= index) {
-        hourControllers.add([]); // Add empty list if not present
-      }
-      if (overtimeControllers.length <= index) {
-        overtimeControllers.add([]); // Same for overtime
-      }
+    setState(
+      () {
+        // Ensure the sublist exists for this date
+        if (hourControllers.length <= index) {
+          hourControllers.add([]); // Add empty list if not present
+        }
+        if (overtimeControllers.length <= index) {
+          overtimeControllers.add([]); // Same for overtime
+        }
 
-      // Add a new controller for regular and overtime hours
-      hourControllers[index].add(TextEditingController());
-      overtimeControllers[index].add(TextEditingController());
+        // Add a new controller for regular and overtime hours
+        hourControllers[index].add(TextEditingController());
+        overtimeControllers[index].add(TextEditingController());
 
-      // Initialize jobEvents for this index
-      Provider.of<StaffProvider>(context, listen: false)
-          .jobEvents[index]
-          .add([]);
-    });
+        // Initialize jobEvents for this index
+        Provider.of<StaffProvider>(context, listen: false)
+            .jobEvents[index]
+            .add([]);
+      },
+    );
   }
 
   void addOvertimeListeners() {
     for (var overtimeRow in overtimeControllers) {
       for (var controller in overtimeRow) {
-        controller.addListener(() {
-          // Call the total overtime calculation function whenever a value changes
-          updateTotalOvertime();
-        });
+        controller.addListener(
+          () {
+            // Call the total overtime calculation function whenever a value changes
+            updateTotalOvertime();
+          },
+        );
       }
     }
   }
@@ -135,110 +141,106 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
 
   // Function to open calendar in a dialog
   Future<void> _openCalendarDialog(BuildContext context) async {
-    List<DateTime>? result = await showDialog(
+    List<DateTime> result = await showDialog(
       context: context,
       builder: (context) {
         return CalendarDialog(initialSelectedDates: selectedWeekDates);
       },
     );
 
-    if (result != null) {
-      setState(() {
-        hourControllers.clear();
-        overtimeControllers.clear();
-        Provider.of<StaffProvider>(context, listen: false).jobEvents.clear();
-        selectedWeekDates = result;
-        for (var i = 0; i < selectedWeekDates.length; i++) {
-          hourControllers.add([]); // Initialize empty controllers for hours
-          overtimeControllers.add([]);
-          Provider.of<StaffProvider>(context, listen: false).jobEvents.add([]);
-          addFieldsForDate(i);
-          setState(() {});
+    setState(() {
+      hourControllers.clear();
+      overtimeControllers.clear();
+      Provider.of<StaffProvider>(context, listen: false).jobEvents.clear();
+      selectedWeekDates = result;
+      for (var i = 0; i < selectedWeekDates.length; i++) {
+        hourControllers.add([]); // Initialize empty controllers for hours
+        overtimeControllers.add([]);
+        Provider.of<StaffProvider>(context, listen: false).jobEvents.add([]);
+        addFieldsForDate(i);
+        setState(() {});
+      }
+      Provider.of<StaffProvider>(context, listen: false)
+          .getTimeSheetByBillNoId(
+              billNo: generateDynamicString(
+                  selectedWeekDates, '${widget.data.stafflastname}'),
+              staffId: widget.data.staffid.toString())
+          .then((value) {
+        if (Provider.of<StaffProvider>(context, listen: false)
+            .timeSheetData
+            .isNotEmpty) {
+          populateTimeSheetData();
         }
-        Provider.of<StaffProvider>(context, listen: false)
-            .getTimeSheetByBillNoId(
-                billNo: generateDynamicString(
-                    selectedWeekDates, '${widget.data.stafflastname}'),
-                staffId: widget.data.staffid.toString())
-            .then((value) {
-          if (Provider.of<StaffProvider>(context, listen: false)
-              .timeSheetData
-              .isNotEmpty) {
-            populateTimeSheetData();
-          }
-
-          // if (Provider.of<StaffProvider>(context, listen: false)
-          //     .timeSheetData
-          //     .isNotEmpty) {
-          //   log("Selected weekDates length : ${selectedWeekDates.length}");
-          //   log("timeSheetData length : ${Provider.of<StaffProvider>(context, listen: false).timeSheetData.length}");
-          //   log("hourcontroller length : ${hourControllers.length}");
 
-          //   for (var i = 0; i < selectedWeekDates.length; i++) {
-          //     // if (DateFormat('yyyy-MM-dd').format(selectedWeekDates[i]) ==
-          //     //     '') {}
-          //     log("Formatted Date : ${DateFormat('yyyy-MM-dd').format(selectedWeekDates[i])}");
-          //     hourControllers[i][0].text = Provider.of<StaffProvider>(context, listen: false).timeSheetData[i].regularHour.toString();
+        // if (Provider.of<StaffProvider>(context, listen: false)
+        //     .timeSheetData
+        //     .isNotEmpty) {
+        //   log("Selected weekDates length : ${selectedWeekDates.length}");
+        //   log("timeSheetData length : ${Provider.of<StaffProvider>(context, listen: false).timeSheetData.length}");
+        //   log("hourcontroller length : ${hourControllers.length}");
 
-          //     // for (var j = 0; i < count; i++) {
+        //   for (var i = 0; i < selectedWeekDates.length; i++) {
+        //     // if (DateFormat('yyyy-MM-dd').format(selectedWeekDates[i]) ==
+        //     //     '') {}
+        //     log("Formatted Date : ${DateFormat('yyyy-MM-dd').format(selectedWeekDates[i])}");
+        //     hourControllers[i][0].text = Provider.of<StaffProvider>(context, listen: false).timeSheetData[i].regularHour.toString();
 
-          //     // }
+        //     // for (var j = 0; i < count; i++) {
 
-          //     // if (DateFormat('yyyy-MM-dd').format(selectedWeekDates[i]) ==
-          //     //     Provider.of<StaffProvider>(context, listen: false)
-          //     //         .timeSheetData[i]
-          //     //         .dateOfWeek) {
-          //     //   log("YES");
-          //     //   for (var j = 0;
-          //     //       j <
-          //     //           hourControllers
-          //     //               .length-1;
-          //     //       j++) {
-          //     //     hourControllers[i][j].text =
-          //     //         Provider.of<StaffProvider>(context, listen: false)
-          //     //             .timeSheetData[j]
-          //     //             .regularHour
-          //     //             .toString();
-          //     //   }
-          //     // } else {
-          //     //   log("No");
-          //     // }
-          //   }
+        //     // }
 
-          //   // for (var i = 0; i < selectedWeekDates.length; i++) {
-          //   //   for (var i = 0;
-          //   //     i <
-          //   //         Provider.of<StaffProvider>(context, listen: false)
-          //   //             .timeSheetData
-          //   //             .length;
-          //   //     i++) {
-          //   //   log("timeSheetData : ${Provider.of<StaffProvider>(context, listen: false).timeSheetData[i].dateOfWeek}");
-          //   //   for (var j = 0; j < selectedWeekDates.length; j++) {
-          //   //     hourControllers[i][j].text =
-          //   //         Provider.of<StaffProvider>(context, listen: false)
-          //   //             .timeSheetData[i]
-          //   //             .regularHour
-          //   //             .toString();
-          //   //   }
-          //   // }
-          //   // }
+        //     // if (DateFormat('yyyy-MM-dd').format(selectedWeekDates[i]) ==
+        //     //     Provider.of<StaffProvider>(context, listen: false)
+        //     //         .timeSheetData[i]
+        //     //         .dateOfWeek) {
+        //     //   log("YES");
+        //     //   for (var j = 0;
+        //     //       j <
+        //     //           hourControllers
+        //     //               .length-1;
+        //     //       j++) {
+        //     //     hourControllers[i][j].text =
+        //     //         Provider.of<StaffProvider>(context, listen: false)
+        //     //             .timeSheetData[j]
+        //     //             .regularHour
+        //     //             .toString();
+        //     //   }
+        //     // } else {
+        //     //   log("No");
+        //     // }
+        //   }
 
-          //   // for (var i = 0; i < selectedWeekDates.length; i++) {
-          //   //   hourControllers.add([]); // Initialize empty controllers for hours
-          //   //   overtimeControllers.add([]);
-          //   //   Provider.of<StaffProvider>(context, listen: false)
-          //   //       .jobEvents
-          //   //       .add([]);
-          //   //   addFieldsForDate(i);
-          //   //   setState(() {});
-          //   // }
-          // }
-          setState(() {});
-        });
+        //   // for (var i = 0; i < selectedWeekDates.length; i++) {
+        //   //   for (var i = 0;
+        //   //     i <
+        //   //         Provider.of<StaffProvider>(context, listen: false)
+        //   //             .timeSheetData
+        //   //             .length;
+        //   //     i++) {
+        //   //   log("timeSheetData : ${Provider.of<StaffProvider>(context, listen: false).timeSheetData[i].dateOfWeek}");
+        //   //   for (var j = 0; j < selectedWeekDates.length; j++) {
+        //   //     hourControllers[i][j].text =
+        //   //         Provider.of<StaffProvider>(context, listen: false)
+        //   //             .timeSheetData[i]
+        //   //             .regularHour
+        //   //             .toString();
+        //   //   }
+        //   // }
+        //   // }
 
-        ;
+        //   // for (var i = 0; i < selectedWeekDates.length; i++) {
+        //   //   hourControllers.add([]); // Initialize empty controllers for hours
+        //   //   overtimeControllers.add([]);
+        //   //   Provider.of<StaffProvider>(context, listen: false)
+        //   //       .jobEvents
+        //   //       .add([]);
+        //   //   addFieldsForDate(i);
+        //   //   setState(() {});
+        //   // }
+        // }
+        setState(() {});
       });
-    }
+    });
   }
 
   void populateTimeSheetData() {
@@ -275,13 +277,14 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
 
           // Add jobEvents if necessary (just an example, update accordingly)
           Provider.of<StaffProvider>(context, listen: false).jobEvents[i].add(
-              entry.jobEvents != null && entry.jobEvents!.isNotEmpty
-                  ? entry.jobEvents!
-                      .split(',')
-                      .map((e) => int.tryParse(e))
-                      .whereType<int>()
-                      .toList()
-                  : []);
+                entry.jobEvents != null && entry.jobEvents!.isNotEmpty
+                    ? entry.jobEvents!
+                        .split(',')
+                        .map((e) => int.tryParse(e))
+                        .whereType<int>()
+                        .toList()
+                    : [],
+              );
         }
       } else {
         // Add empty controllers if no matching entry for the date
@@ -352,11 +355,17 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
                   children: [
                     const Text(
                       "Time-Sheet Bill No : ",
-                      style:
-                          TextStyle(fontWeight: FontWeight.w800, fontSize: 14),
+                      style: TextStyle(
+                        fontWeight: FontWeight.w800,
+                        fontSize: 14,
+                      ),
                     ),
-                    Text(generateDynamicString(
-                        selectedWeekDates, '${widget.data.stafflastname}'))
+                    Text(
+                      generateDynamicString(
+                        selectedWeekDates,
+                        '${widget.data.stafflastname}',
+                      ),
+                    )
                   ],
                 ),
                 Column(
@@ -364,14 +373,16 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
                   children: [
                     const Text(
                       "Status : ",
-                      style:
-                          TextStyle(fontWeight: FontWeight.w800, fontSize: 14),
+                      style: TextStyle(
+                        fontWeight: FontWeight.w800,
+                        fontSize: 14,
+                      ),
                     ),
                     Padding(
                       padding: const EdgeInsets.only(
                         top: 2.0,
                       ),
-                      child: Container(
+                      child: SizedBox(
                         height: 30,
                         width: 100,
                         child: DropdownButtonFormField2(
@@ -395,15 +406,17 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
                           //   style: TextStyle(fontSize: 14),
                           // ),
                           items: status
-                              .map((item) => DropdownMenuItem<String>(
-                                    value: item,
-                                    child: Text(
-                                      item,
-                                      style: const TextStyle(
-                                        fontSize: 14,
-                                      ),
+                              .map(
+                                (item) => DropdownMenuItem<String>(
+                                  value: item,
+                                  child: Text(
+                                    item,
+                                    style: const TextStyle(
+                                      fontSize: 14,
                                     ),
-                                  ))
+                                  ),
+                                ),
+                              )
                               .toList(),
                           /*validator: (value) {
                                       if (value == null) {
@@ -454,20 +467,25 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
                 Row(
                   children: [
                     Container(
-                        decoration: BoxDecoration(
-                            border: Border.all(color: Colors.black)),
-                        child: Padding(
-                          padding: const EdgeInsets.all(8.0),
-                          child: selectedWeekDates.isNotEmpty
-                              ? Text(
-                                  DateFormat('yyyy-MM-dd')
-                                      .format(selectedWeekDates[0]),
-                                )
-                              : Text(
-                                  DateFormat('yyyy-MM-dd')
-                                      .format(DateTime.now()),
+                      decoration: BoxDecoration(
+                        border: Border.all(
+                          color: Colors.black,
+                        ),
+                      ),
+                      child: Padding(
+                        padding: const EdgeInsets.all(8.0),
+                        child: selectedWeekDates.isNotEmpty
+                            ? Text(
+                                DateFormat('yyyy-MM-dd')
+                                    .format(selectedWeekDates[0]),
+                              )
+                            : Text(
+                                DateFormat('yyyy-MM-dd').format(
+                                  DateTime.now(),
                                 ),
-                        )),
+                              ),
+                      ),
+                    ),
                     const SizedBox(
                       width: 5,
                     ),
@@ -476,29 +494,33 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
                       width: 5,
                     ),
                     Container(
-                        decoration: BoxDecoration(
-                            border: Border.all(color: Colors.black)),
-                        child: Padding(
-                          padding: const EdgeInsets.all(8.0),
-                          child: selectedWeekDates.isNotEmpty
-                              ? Text(
-                                  DateFormat('yyyy-MM-dd').format(
-                                      selectedWeekDates[
-                                          selectedWeekDates.length - 1]),
-                                )
-                              : Text(
-                                  DateFormat('yyyy-MM-dd')
-                                      .format(DateTime.now()),
-                                ),
-                        )),
+                      decoration: BoxDecoration(
+                        border: Border.all(
+                          color: Colors.black,
+                        ),
+                      ),
+                      child: Padding(
+                        padding: const EdgeInsets.all(8.0),
+                        child: selectedWeekDates.isNotEmpty
+                            ? Text(
+                                DateFormat('yyyy-MM-dd').format(
+                                    selectedWeekDates[
+                                        selectedWeekDates.length - 1]),
+                              )
+                            : Text(
+                                DateFormat('yyyy-MM-dd').format(DateTime.now()),
+                              ),
+                      ),
+                    ),
                     const SizedBox(
                       width: 10,
                     ),
                     InkWell(
-                        onTap: () {
-                          _openCalendarDialog(context);
-                        },
-                        child: const Icon(Icons.calendar_month))
+                      onTap: () {
+                        _openCalendarDialog(context);
+                      },
+                      child: const Icon(Icons.calendar_month),
+                    )
                   ],
                 )
               ],
@@ -517,8 +539,10 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
                   children: [
                     const Text(
                       'Staff Details',
-                      style:
-                          TextStyle(fontSize: 14, fontWeight: FontWeight.w800),
+                      style: TextStyle(
+                        fontSize: 14,
+                        fontWeight: FontWeight.w800,
+                      ),
                     ),
                     Row(
                       children: [
@@ -546,8 +570,10 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
                   children: [
                     const Text(
                       'Cost Rate',
-                      style:
-                          TextStyle(fontSize: 14, fontWeight: FontWeight.w800),
+                      style: TextStyle(
+                        fontSize: 14,
+                        fontWeight: FontWeight.w800,
+                      ),
                     ),
                     Row(
                       children: [
@@ -557,7 +583,10 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
                       ],
                     ),
                     const Row(
-                      children: [Text("Over Time :"), Text("N/A")],
+                      children: [
+                        Text("Over Time :"),
+                        Text("N/A"),
+                      ],
                     ),
                   ],
                 )
@@ -574,8 +603,10 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
                   children: [
                     const Text(
                       'Exempt',
-                      style:
-                          TextStyle(fontSize: 14, fontWeight: FontWeight.w800),
+                      style: TextStyle(
+                        fontSize: 14,
+                        fontWeight: FontWeight.w800,
+                      ),
                     ),
                     const SizedBox(width: 8),
                     FlutterSwitch(
@@ -616,43 +647,72 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
             height: 10.0,
           ),
           const Padding(
-            padding: EdgeInsets.symmetric(horizontal: 10.0, vertical: 10.0),
+            padding: EdgeInsets.symmetric(
+              horizontal: 10.0,
+              vertical: 10.0,
+            ),
             child: Row(
               children: [
                 Flexible(
-                    flex: 2,
-                    fit: FlexFit.tight,
-                    child: Align(
-                        alignment: Alignment.center,
-                        child: Text(
-                          "Day of week",
-                          style: TextStyle(fontWeight: FontWeight.w700),
-                        ))),
+                  flex: 2,
+                  fit: FlexFit.tight,
+                  child: Align(
+                    alignment: Alignment.center,
+                    child: Text(
+                      "Day of week",
+                      style: TextStyle(
+                        fontWeight: FontWeight.w700,
+                      ),
+                    ),
+                  ),
+                ),
                 Flexible(
-                    flex: 5,
-                    fit: FlexFit.tight,
-                    child: Align(
-                        alignment: Alignment.center,
-                        child: Text("Job Events",
-                            style: TextStyle(fontWeight: FontWeight.w700)))),
+                  flex: 5,
+                  fit: FlexFit.tight,
+                  child: Align(
+                    alignment: Alignment.center,
+                    child: Text(
+                      "Job Events",
+                      style: TextStyle(
+                        fontWeight: FontWeight.w700,
+                      ),
+                    ),
+                  ),
+                ),
                 Flexible(
-                    flex: 3,
-                    fit: FlexFit.tight,
-                    child: Align(
-                        alignment: Alignment.center,
-                        child: Text("Regular Hour",
-                            style: TextStyle(fontWeight: FontWeight.w700)))),
+                  flex: 3,
+                  fit: FlexFit.tight,
+                  child: Align(
+                    alignment: Alignment.center,
+                    child: Text(
+                      "Regular Hour",
+                      style: TextStyle(
+                        fontWeight: FontWeight.w700,
+                      ),
+                    ),
+                  ),
+                ),
                 Flexible(
-                    flex: 3,
-                    fit: FlexFit.tight,
-                    child: Align(
-                        alignment: Alignment.center,
-                        child: Text("Over Time Hour",
-                            style: TextStyle(fontWeight: FontWeight.w700)))),
+                  flex: 3,
+                  fit: FlexFit.tight,
+                  child: Align(
+                    alignment: Alignment.center,
+                    child: Text(
+                      "Over Time Hour",
+                      style: TextStyle(
+                        fontWeight: FontWeight.w700,
+                      ),
+                    ),
+                  ),
+                ),
                 Flexible(
-                    flex: 1,
-                    fit: FlexFit.tight,
-                    child: Align(alignment: Alignment.center, child: Text("")))
+                  flex: 1,
+                  fit: FlexFit.tight,
+                  child: Align(
+                    alignment: Alignment.center,
+                    child: Text(""),
+                  ),
+                ),
               ],
             ),
           ),
@@ -672,92 +732,94 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
                       child: Row(
                         children: [
                           Flexible(
-                              flex: 2,
-                              fit: FlexFit.tight,
-                              child: Align(
-                                  alignment: Alignment.center,
-                                  child: Text(
-                                    "${DateFormat.EEEE().format(selectedWeekDates[e.key]).substring(0, 3)}",
-                                    style: const TextStyle(
-                                        fontWeight: FontWeight.w600),
-                                  ))),
+                            flex: 2,
+                            fit: FlexFit.tight,
+                            child: Align(
+                              alignment: Alignment.center,
+                              child: Text(
+                                "${DateFormat.EEEE().format(selectedWeekDates[e.key]).substring(0, 3)}",
+                                style: const TextStyle(
+                                    fontWeight: FontWeight.w600),
+                              ),
+                            ),
+                          ),
                           Flexible(
-                              flex: 5,
-                              fit: FlexFit.tight,
-                              child: Align(
-                                  alignment: Alignment.center,
-                                  child: Padding(
-                                    padding: const EdgeInsets.symmetric(
-                                        horizontal: 5.0),
-                                    child: Column(
-                                      children: hourControllers[e.key]
-                                          .asMap()
-                                          .entries
-                                          .map((e2) {
-                                        return
-                                            //  Text(
-                                            //     '${hourControllers[e.key][e2.key].text.isEmpty ?? "data"}');
-                                            Padding(
-                                          padding: const EdgeInsets.symmetric(
-                                              vertical: 5.0),
-                                          child: InkWell(
-                                            onTap: () {
-                                              // print(
-                                              //     "tapped on container : ${}");
-                                              context
-                                                  .read<StaffProvider>()
-                                                  .getJobNumberByDate(
-                                                      date: DateFormat(
-                                                              'yyyy-MM-dd')
-                                                          .format(
-                                                              selectedWeekDates[
-                                                                  e.key]),
-                                                      context: context)
-                                                  .then((value) {
-                                                //-------------------//
-                                                if (Provider.of<StaffProvider>(
-                                                        context,
-                                                        listen: false)
-                                                    .jobDetailsData
-                                                    .isNotEmpty) {
-                                                  showDialog(
-                                                    context: context,
-                                                    builder: (context) {
-                                                      return Dialog(
-                                                        shape:
-                                                            RoundedRectangleBorder(
-                                                          borderRadius:
-                                                              BorderRadius
-                                                                  .circular(
-                                                                      12.0),
-                                                        ),
-                                                        child: StatefulBuilder(
-                                                          builder: (context,
-                                                              setState) {
-                                                            return JobList(
-                                                              date: DateFormat(
-                                                                      'yyyy-MM-dd')
-                                                                  .format(
-                                                                      selectedWeekDates[
-                                                                          e.key]),
-                                                              jobDetailsData: Provider.of<
-                                                                          StaffProvider>(
-                                                                      context,
-                                                                      listen:
-                                                                          false)
-                                                                  .jobDetailsData,
-                                                              preSelectedIndex: Provider.of<
-                                                                          StaffProvider>(
-                                                                      context,
-                                                                      listen:
-                                                                          false)
-                                                                  .jobEvents[e.key][e2.key],
-                                                            );
-                                                          },
-                                                        ),
-                                                      );
-                                                    },
-                                                  ).then((value) {
+                            flex: 5,
+                            fit: FlexFit.tight,
+                            child: Align(
+                              alignment: Alignment.center,
+                              child: Padding(
+                                padding:
+                                    const EdgeInsets.symmetric(horizontal: 5.0),
+                                child: Column(
+                                  children: hourControllers[e.key]
+                                      .asMap()
+                                      .entries
+                                      .map((e2) {
+                                    return
+                                        //  Text(
+                                        //     '${hourControllers[e.key][e2.key].text.isEmpty ?? "data"}');
+                                        Padding(
+                                      padding: const EdgeInsets.symmetric(
+                                          vertical: 5.0),
+                                      child: InkWell(
+                                        onTap: () {
+                                          // print(
+                                          //     "tapped on container : ${}");
+                                          context
+                                              .read<StaffProvider>()
+                                              .getJobNumberByDate(
+                                                  date: DateFormat('yyyy-MM-dd')
+                                                      .format(selectedWeekDates[
+                                                          e.key]),
+                                                  context: context)
+                                              .then(
+                                            (value) {
+                                              //-------------------//
+                                              if (Provider.of<StaffProvider>(
+                                                      context,
+                                                      listen: false)
+                                                  .jobDetailsData
+                                                  .isNotEmpty) {
+                                                showDialog(
+                                                  context: context,
+                                                  builder: (context) {
+                                                    return Dialog(
+                                                      shape:
+                                                          RoundedRectangleBorder(
+                                                        borderRadius:
+                                                            BorderRadius
+                                                                .circular(12.0),
+                                                      ),
+                                                      child: StatefulBuilder(
+                                                        builder: (context,
+                                                            setState) {
+                                                          return JobList(
+                                                            date: DateFormat(
+                                                                    'yyyy-MM-dd')
+                                                                .format(
+                                                                    selectedWeekDates[
+                                                                        e.key]),
+                                                            jobDetailsData: Provider.of<
+                                                                        StaffProvider>(
+                                                                    context,
+                                                                    listen:
+                                                                        false)
+                                                                .jobDetailsData,
+                                                            preSelectedIndex: Provider.of<
+                                                                            StaffProvider>(
+                                                                        context,
+                                                                        listen:
+                                                                            false)
+                                                                    .jobEvents[
+                                                                e.key][e2.key],
+                                                          );
+                                                        },
+                                                      ),
+                                                    );
+                                                  },
+                                                ).then(
+                                                  (value) {
                                                     // ignore: unnecessary_brace_in_string_interps
                                                     print(
                                                         "After pop showdialog val : ${value}");
@@ -782,268 +844,283 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
                                                               .selectedJobs);
                                                       setState(() {});
                                                     }
-                                                  });
-                                                } else {
-                                                  Utils().ShowWarningSnackBar(
-                                                      context,
-                                                      'Job Not Assigned',
-                                                      'msg');
-                                                }
-                                                //------------------//
-                                                log(".then calling");
-                                                setState(() {});
-                                              });
+                                                  },
+                                                );
+                                              } else {
+                                                Utils().ShowWarningSnackBar(
+                                                    context,
+                                                    'Job Not Assigned',
+                                                    'msg');
+                                              }
+                                              //------------------//
+                                              log(".then calling");
+                                              setState(() {});
                                             },
-                                            child: Container(
-                                              padding: const EdgeInsets.symmetric(
-                                                  horizontal: 5.0,
-                                                  vertical: 5.0),
-                                              // key: ValueKey(value),
-                                              height: 40,
-                                              // width: 40,
-                                              decoration: BoxDecoration(
-                                                  color: Colors.white,
-                                                  border: Border.all(),
-                                                  borderRadius:
-                                                      BorderRadius.circular(5)),
-                                              child: Row(
-                                                children: [
-                                                  Expanded(
-                                                    child: ListView.builder(
-                                                      itemCount: Provider.of<
-                                                                  StaffProvider>(
-                                                              context,
-                                                              listen: false)
-                                                          .jobEvents[e.key]
-                                                              [e2.key]
-                                                          .length,
-                                                      itemBuilder:
-                                                          (context, idx) {
-                                                        return Text(
-                                                            '${Provider.of<StaffProvider>(context, listen: false).jobEvents[e.key][e2.key][idx]}',
-                                                            style: const TextStyle(
-                                                              color: Colors
-                                                                  .blue, // Set text color to blue
-                                                              decoration:
-                                                                  TextDecoration
-                                                                      .underline, // Add underline
-                                                            ));
-                                                      },
-                                                    ),
-                                                  ),
-                                                  const Icon(Icons.search)
-                                                ],
-                                              )
-                                              //  Text(
-                                              //     '${Provider.of<StaffProvider>(context, listen: false).jobEvents[e.key][e2.key]}')
-                                              ,
-                                              // child: ,
-                                            ),
-                                          ),
-                                        );
-                                      }).toList(),
-                                    ),
-                                  ))),
-                          Flexible(
-                              flex: 3,
-                              fit: FlexFit.tight,
-                              child: Align(
-                                  alignment: Alignment.center,
-                                  child: Padding(
-                                    padding: const EdgeInsets.symmetric(
-                                        horizontal: 5.0),
-                                    child: Column(
-                                      children: hourControllers[e.key]
-                                          .asMap()
-                                          .entries
-                                          .map((e2) {
-                                        return
-                                            //  Text(
-                                            //     '${hourControllers[e.key][e2.key].text.isEmpty ?? "data"}');
-                                            Padding(
+                                          );
+                                        },
+                                        child: Container(
                                           padding: const EdgeInsets.symmetric(
-                                              vertical: 5.0, horizontal: 2.0),
-                                          child: Container(
+                                            horizontal: 5.0,
+                                            vertical: 5.0,
+                                          ),
+                                          // key: ValueKey(value),
+                                          height: 40,
+                                          // width: 40,
+                                          decoration: BoxDecoration(
                                             color: Colors.white,
-                                            height: 40,
-                                            // width: 40,
-                                            child: TextField(
-                                              onTapOutside: (event) {
-                                                if (hourControllers[e.key]
-                                                            [e2.key]
-                                                        .text
-                                                        .isNotEmpty &&
-                                                    int.tryParse(
-                                                            hourControllers[
-                                                                        e.key]
-                                                                    [e2.key]
-                                                                .text) !=
-                                                        null) {
-                                                  setState(() {
-                                                    hourControllers[e.key]
-                                                                [e2.key]
-                                                            .text =
-                                                        '${hourControllers[e.key][e2.key].text}.0';
-                                                    hourControllers[e.key]
-                                                                [e2.key]
-                                                            .selection =
-                                                        TextSelection
-                                                            .fromPosition(
-                                                      TextPosition(
-                                                          offset:
-                                                              hourControllers[
-                                                                          e.key]
-                                                                      [e2.key]
-                                                                  .text
-                                                                  .length),
+                                            border: Border.all(),
+                                            borderRadius:
+                                                BorderRadius.circular(5),
+                                          ),
+                                          child: Row(
+                                            children: [
+                                              Expanded(
+                                                child: ListView.builder(
+                                                  itemCount: Provider.of<
+                                                              StaffProvider>(
+                                                          context,
+                                                          listen: false)
+                                                      .jobEvents[e.key][e2.key]
+                                                      .length,
+                                                  itemBuilder: (context, idx) {
+                                                    return Text(
+                                                      '${Provider.of<StaffProvider>(context, listen: false).jobEvents[e.key][e2.key][idx]}',
+                                                      style: const TextStyle(
+                                                        color: Colors
+                                                            .blue, // Set text color to blue
+                                                        decoration: TextDecoration
+                                                            .underline, // Add underline
+                                                      ),
                                                     );
-                                                  });
-                                                }
-                                                updateTotalTime();
-                                              },
-                                              onChanged: (value) {
-                                                updateTotalTime();
-                                              },
-                                              keyboardType: const TextInputType
-                                                  .numberWithOptions(
-                                                      decimal: true),
-                                              inputFormatters: [
-                                                FilteringTextInputFormatter
-                                                    .allow(
-                                                  RegExp(
-                                                      r'^\d*\.?\d*'), // Regular expression to allow only numbers and one decimal point
+                                                  },
                                                 ),
-                                              ],
-                                              controller: hourControllers[e.key]
-                                                  [e2.key],
-                                              decoration: const InputDecoration(
-                                                  contentPadding:
-                                                      EdgeInsets.symmetric(
-                                                          vertical: 5.0,
-                                                          horizontal: 10.0),
-                                                  border: OutlineInputBorder(
-                                                      borderRadius:
-                                                          BorderRadius.all(
-                                                              Radius.circular(
-                                                                  5))),
-                                                  hintText: 'Hours'),
-                                            ),
-                                          ),
-                                        );
-                                      }).toList(),
-                                    ),
-                                  ))),
+                                              ),
+                                              const Icon(Icons.search)
+                                            ],
+                                          )
+                                          //  Text(
+                                          //     '${Provider.of<StaffProvider>(context, listen: false).jobEvents[e.key][e2.key]}')
+                                          ,
+                                          // child: ,
+                                        ),
+                                      ),
+                                    );
+                                  }).toList(),
+                                ),
+                              ),
+                            ),
+                          ),
                           Flexible(
-                              flex: 3,
-                              fit: FlexFit.tight,
-                              child: Align(
-                                  alignment: Alignment.center,
-                                  child: Padding(
-                                    padding: const EdgeInsets.symmetric(
-                                        horizontal: 10.0),
-                                    child: Column(
-                                      children: overtimeControllers[e.key]
-                                          .asMap()
-                                          .entries
-                                          .map((e2) {
-                                        return
-                                            //  Text(
-                                            //     '${hourControllers[e.key][e2.key].text.isEmpty ?? "data"}');
-                                            Padding(
-                                          padding: const EdgeInsets.symmetric(
-                                              vertical: 5.0),
-                                          child: Container(
-                                            color: Colors.white,
-                                            height: 40,
-                                            child: TextField(
-                                              onTapOutside: (event) {
-                                                if (overtimeControllers[e.key]
-                                                            [e2.key]
-                                                        .text
-                                                        .isNotEmpty &&
-                                                    int.tryParse(
-                                                            overtimeControllers[
-                                                                        e.key]
-                                                                    [e2.key]
-                                                                .text) !=
-                                                        null) {
-                                                  setState(() {
-                                                    overtimeControllers[e.key]
-                                                                [e2.key]
-                                                            .text =
-                                                        '${overtimeControllers[e.key][e2.key].text}.0';
-                                                    overtimeControllers[e.key]
+                            flex: 3,
+                            fit: FlexFit.tight,
+                            child: Align(
+                              alignment: Alignment.center,
+                              child: Padding(
+                                padding: const EdgeInsets.symmetric(
+                                  horizontal: 5.0,
+                                ),
+                                child: Column(
+                                  children: hourControllers[e.key]
+                                      .asMap()
+                                      .entries
+                                      .map((e2) {
+                                    return
+                                        //  Text(
+                                        //     '${hourControllers[e.key][e2.key].text.isEmpty ?? "data"}');
+                                        Padding(
+                                      padding: const EdgeInsets.symmetric(
+                                        vertical: 5.0,
+                                        horizontal: 2.0,
+                                      ),
+                                      child: Container(
+                                        color: Colors.white,
+                                        height: 40,
+                                        // width: 40,
+                                        child: TextField(
+                                          onTapOutside: (event) {
+                                            if (hourControllers[e.key][e2.key]
+                                                    .text
+                                                    .isNotEmpty &&
+                                                int.tryParse(
+                                                        hourControllers[e.key]
                                                                 [e2.key]
-                                                            .selection =
-                                                        TextSelection
-                                                            .fromPosition(
-                                                      TextPosition(
-                                                          offset:
-                                                              overtimeControllers[
-                                                                          e.key]
-                                                                      [e2.key]
-                                                                  .text
-                                                                  .length),
-                                                    );
-                                                  });
-                                                }
-                                                updateTotalOvertime();
-                                              },
-                                              onChanged: (value) {
-                                                updateTotalOvertime();
-                                              },
-                                              controller:
-                                                  overtimeControllers[e.key]
-                                                      [e2.key],
-                                              decoration: const InputDecoration(
-                                                  contentPadding:
-                                                      EdgeInsets.symmetric(
-                                                          vertical: 5.0,
-                                                          horizontal: 10.0),
-                                                  border: OutlineInputBorder(
-                                                      borderRadius:
-                                                          BorderRadius.all(
-                                                              Radius.circular(
-                                                                  5))),
-                                                  hintText: 'Hours'),
-                                              keyboardType: const TextInputType
-                                                  .numberWithOptions(
-                                                      decimal: true),
-                                              inputFormatters: [
-                                                FilteringTextInputFormatter
-                                                    .allow(
-                                                  RegExp(
-                                                      r'^\d*\.?\d*'), // Regular expression to allow only numbers and one decimal point
-                                                ),
-                                              ],
+                                                            .text) !=
+                                                    null) {
+                                              setState(
+                                                () {
+                                                  hourControllers[e.key][e2.key]
+                                                          .text =
+                                                      '${hourControllers[e.key][e2.key].text}.0';
+                                                  hourControllers[e.key][e2.key]
+                                                          .selection =
+                                                      TextSelection
+                                                          .fromPosition(
+                                                    TextPosition(
+                                                      offset:
+                                                          hourControllers[e.key]
+                                                                  [e2.key]
+                                                              .text
+                                                              .length,
+                                                    ),
+                                                  );
+                                                },
+                                              );
+                                            }
+                                            updateTotalTime();
+                                          },
+                                          onChanged: (value) {
+                                            updateTotalTime();
+                                          },
+                                          keyboardType: const TextInputType
+                                              .numberWithOptions(decimal: true),
+                                          inputFormatters: [
+                                            FilteringTextInputFormatter.allow(
+                                              RegExp(
+                                                  r'^\d*\.?\d*'), // Regular expression to allow only numbers and one decimal point
+                                            ),
+                                          ],
+                                          controller: hourControllers[e.key]
+                                              [e2.key],
+                                          decoration: const InputDecoration(
+                                            contentPadding:
+                                                EdgeInsets.symmetric(
+                                              vertical: 5.0,
+                                              horizontal: 10.0,
                                             ),
+                                            border: OutlineInputBorder(
+                                              borderRadius: BorderRadius.all(
+                                                Radius.circular(5),
+                                              ),
+                                            ),
+                                            hintText: 'Hours',
                                           ),
-                                        );
-                                      }).toList(),
-                                    ),
-                                  ))),
+                                        ),
+                                      ),
+                                    );
+                                  }).toList(),
+                                ),
+                              ),
+                            ),
+                          ),
                           Flexible(
-                              flex: 1,
-                              fit: FlexFit.tight,
-                              child: Align(
-                                  alignment: Alignment.center,
-                                  child: InkWell(
-                                      onTap: () {
-                                        addFieldsForDate(e.key);
-                                      },
-                                      child: const Padding(
-                                        padding: EdgeInsets.only(right: 10.0),
-                                        child: CircleAvatar(
-                                          backgroundColor: Colors
-                                              .black, // Background color of the circle
-                                          radius: 24,
-                                          child: Icon(
-                                            Icons.add,
-                                            size: 15,
-                                            color: Colors.white,
+                            flex: 3,
+                            fit: FlexFit.tight,
+                            child: Align(
+                              alignment: Alignment.center,
+                              child: Padding(
+                                padding: const EdgeInsets.symmetric(
+                                  horizontal: 10.0,
+                                ),
+                                child: Column(
+                                  children: overtimeControllers[e.key]
+                                      .asMap()
+                                      .entries
+                                      .map((e2) {
+                                    return
+                                        //  Text(
+                                        //     '${hourControllers[e.key][e2.key].text.isEmpty ?? "data"}');
+                                        Padding(
+                                      padding: const EdgeInsets.symmetric(
+                                        vertical: 5.0,
+                                      ),
+                                      child: Container(
+                                        color: Colors.white,
+                                        height: 40,
+                                        child: TextField(
+                                          onTapOutside: (event) {
+                                            if (overtimeControllers[e.key]
+                                                        [e2.key]
+                                                    .text
+                                                    .isNotEmpty &&
+                                                int.tryParse(
+                                                        overtimeControllers[
+                                                                e.key][e2.key]
+                                                            .text) !=
+                                                    null) {
+                                              setState(
+                                                () {
+                                                  overtimeControllers[e.key]
+                                                              [e2.key]
+                                                          .text =
+                                                      '${overtimeControllers[e.key][e2.key].text}.0';
+                                                  overtimeControllers[e.key]
+                                                              [e2.key]
+                                                          .selection =
+                                                      TextSelection
+                                                          .fromPosition(
+                                                    TextPosition(
+                                                      offset:
+                                                          overtimeControllers[
+                                                                  e.key][e2.key]
+                                                              .text
+                                                              .length,
+                                                    ),
+                                                  );
+                                                },
+                                              );
+                                            }
+                                            updateTotalOvertime();
+                                          },
+                                          onChanged: (value) {
+                                            updateTotalOvertime();
+                                          },
+                                          controller: overtimeControllers[e.key]
+                                              [e2.key],
+                                          decoration: const InputDecoration(
+                                              contentPadding:
+                                                  EdgeInsets.symmetric(
+                                                vertical: 5.0,
+                                                horizontal: 10.0,
+                                              ),
+                                              border: OutlineInputBorder(
+                                                borderRadius: BorderRadius.all(
+                                                  Radius.circular(5),
+                                                ),
+                                              ),
+                                              hintText: 'Hours'),
+                                          keyboardType: const TextInputType
+                                              .numberWithOptions(
+                                            decimal: true,
                                           ),
+                                          inputFormatters: [
+                                            FilteringTextInputFormatter.allow(
+                                              RegExp(
+                                                  r'^\d*\.?\d*'), // Regular expression to allow only numbers and one decimal point
+                                            ),
+                                          ],
                                         ),
-                                      )))),
+                                      ),
+                                    );
+                                  }).toList(),
+                                ),
+                              ),
+                            ),
+                          ),
+                          Flexible(
+                            flex: 1,
+                            fit: FlexFit.tight,
+                            child: Align(
+                              alignment: Alignment.center,
+                              child: InkWell(
+                                onTap: () {
+                                  addFieldsForDate(e.key);
+                                },
+                                child: const Padding(
+                                  padding: EdgeInsets.only(right: 10.0),
+                                  child: CircleAvatar(
+                                    backgroundColor: Colors
+                                        .black, // Background color of the circle
+                                    radius: 24,
+                                    child: Icon(
+                                      Icons.add,
+                                      size: 15,
+                                      color: Colors.white,
+                                    ),
+                                  ),
+                                ),
+                              ),
+                            ),
+                          ),
                         ],
                       ),
                     );
@@ -1052,61 +1129,79 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
           Visibility(
             visible: selectedWeekDates.isNotEmpty,
             child: Padding(
-              padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 10.0),
+              padding:
+                  const EdgeInsets.symmetric(horizontal: 10.0, vertical: 10.0),
               child: Row(
                 children: [
                   const Flexible(
-                      flex: 3,
-                      fit: FlexFit.tight,
-                      child: Align(
-                          alignment: Alignment.center,
-                          child: Text(
-                            "",
-                            style: TextStyle(fontWeight: FontWeight.w700),
-                          ))),
+                    flex: 3,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Text(
+                        "",
+                        style: TextStyle(fontWeight: FontWeight.w700),
+                      ),
+                    ),
+                  ),
                   const Flexible(
-                      flex: 5,
-                      fit: FlexFit.tight,
-                      child: Align(
-                          alignment: Alignment.center,
-                          child: Text("Total Hour :",
-                              style: TextStyle(fontWeight: FontWeight.w700)))),
+                    flex: 5,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Text(
+                        "Total Hour :",
+                        style: TextStyle(
+                          fontWeight: FontWeight.w700,
+                        ),
+                      ),
+                    ),
+                  ),
                   Flexible(
-                      flex: 3,
-                      fit: FlexFit.tight,
-                      child: Align(
-                          alignment: Alignment.center,
-                          child: Padding(
-                            padding: const EdgeInsets.symmetric(horizontal: 10.0),
-                            child: Container(
-                              height: 30,
-                              decoration: BoxDecoration(
-                                  border: Border.all(color: Colors.black),
-                                  borderRadius: BorderRadius.circular(5)),
-                              child: Center(child: Text('${totalHour}')),
-                            ),
-                          ))),
+                    flex: 3,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Padding(
+                        padding: const EdgeInsets.symmetric(horizontal: 10.0),
+                        child: Container(
+                          height: 30,
+                          decoration: BoxDecoration(
+                              border: Border.all(color: Colors.black),
+                              borderRadius: BorderRadius.circular(5)),
+                          child: Center(child: Text('$totalHour')),
+                        ),
+                      ),
+                    ),
+                  ),
                   Flexible(
-                      flex: 3,
-                      fit: FlexFit.tight,
-                      child: Align(
-                          alignment: Alignment.center,
-                          child: Padding(
-                            padding: const EdgeInsets.symmetric(horizontal: 10.0),
-                            child: Container(
-                              height: 30,
-                              decoration: BoxDecoration(
-                                  border: Border.all(color: Colors.black),
-                                  borderRadius: BorderRadius.circular(5)),
-                              child:
-                                  Center(child: Text('${totalOverTimeHour}')),
-                            ),
-                          ))),
+                    flex: 3,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Padding(
+                        padding: const EdgeInsets.symmetric(horizontal: 10.0),
+                        child: Container(
+                          height: 30,
+                          decoration: BoxDecoration(
+                            border: Border.all(color: Colors.black),
+                            borderRadius: BorderRadius.circular(5),
+                          ),
+                          child: Center(
+                            child: Text('$totalOverTimeHour'),
+                          ),
+                        ),
+                      ),
+                    ),
+                  ),
                   const Flexible(
-                      flex: 1,
-                      fit: FlexFit.tight,
-                      child:
-                          Align(alignment: Alignment.center, child: Text("")))
+                    flex: 1,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Text(""),
+                    ),
+                  ),
                 ],
               ),
             ),
@@ -1114,64 +1209,94 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
           Visibility(
             visible: selectedWeekDates.isNotEmpty,
             child: Padding(
-              padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 10.0),
+              padding: const EdgeInsets.symmetric(
+                horizontal: 10.0,
+                vertical: 10.0,
+              ),
               child: Row(
                 children: [
                   const Flexible(
-                      flex: 3,
-                      fit: FlexFit.tight,
-                      child: Align(
-                          alignment: Alignment.center,
-                          child: Text(
-                            "",
-                            style: TextStyle(fontWeight: FontWeight.w700),
-                          ))),
+                    flex: 3,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Text(
+                        "",
+                        style: TextStyle(
+                          fontWeight: FontWeight.w700,
+                        ),
+                      ),
+                    ),
+                  ),
                   const Flexible(
-                      flex: 5,
-                      fit: FlexFit.tight,
-                      child: Align(
-                          alignment: Alignment.center,
-                          child: Text("Cost Breakup :",
-                              style: TextStyle(fontWeight: FontWeight.w700)))),
+                    flex: 5,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Text(
+                        "Cost Breakup :",
+                        style: TextStyle(
+                          fontWeight: FontWeight.w700,
+                        ),
+                      ),
+                    ),
+                  ),
                   Flexible(
-                      flex: 3,
-                      fit: FlexFit.tight,
-                      child: Align(
-                          alignment: Alignment.center,
-                          child: Padding(
-                            padding: const EdgeInsets.symmetric(horizontal: 10.0),
-                            child: Container(
-                              height: 30,
-                              decoration: BoxDecoration(
-                                  border: Border.all(color: Colors.black),
-                                  borderRadius: BorderRadius.circular(5)),
-                              child: Center(
-                                  child: Text(
-                                      '${totalHourTimeCost.toStringAsFixed(2)}')),
+                    flex: 3,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Padding(
+                        padding: const EdgeInsets.symmetric(horizontal: 10.0),
+                        child: Container(
+                          height: 30,
+                          decoration: BoxDecoration(
+                            border: Border.all(
+                              color: Colors.black,
+                            ),
+                            borderRadius: BorderRadius.circular(5),
+                          ),
+                          child: Center(
+                            child: Text(
+                              '${totalHourTimeCost.toStringAsFixed(2)}',
                             ),
-                          ))),
+                          ),
+                        ),
+                      ),
+                    ),
+                  ),
                   Flexible(
-                      flex: 3,
-                      fit: FlexFit.tight,
-                      child: Align(
-                          alignment: Alignment.center,
-                          child: Padding(
-                            padding: const EdgeInsets.symmetric(horizontal: 10.0),
-                            child: Container(
-                              height: 30,
-                              decoration: BoxDecoration(
-                                  border: Border.all(color: Colors.black),
-                                  borderRadius: BorderRadius.circular(5)),
-                              child: Center(
-                                  child: Text(
-                                      '${totalOverTimeCost.toStringAsFixed(2)}')),
+                    flex: 3,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Padding(
+                        padding: const EdgeInsets.symmetric(horizontal: 10.0),
+                        child: Container(
+                          height: 30,
+                          decoration: BoxDecoration(
+                            border: Border.all(
+                              color: Colors.black,
+                            ),
+                            borderRadius: BorderRadius.circular(5),
+                          ),
+                          child: Center(
+                            child: Text(
+                              '${totalOverTimeCost.toStringAsFixed(2)}',
                             ),
-                          ))),
+                          ),
+                        ),
+                      ),
+                    ),
+                  ),
                   const Flexible(
-                      flex: 1,
-                      fit: FlexFit.tight,
-                      child:
-                          Align(alignment: Alignment.center, child: Text("")))
+                    flex: 1,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Text(""),
+                    ),
+                  ),
                 ],
               ),
             ),
@@ -1179,64 +1304,70 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
           Visibility(
             visible: selectedWeekDates.isNotEmpty,
             child: Padding(
-              padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 10.0),
+              padding: const EdgeInsets.symmetric(
+                horizontal: 10.0,
+                vertical: 10.0,
+              ),
               child: Row(
                 children: [
                   const Flexible(
-                      flex: 3,
-                      fit: FlexFit.tight,
-                      child: Align(
-                          alignment: Alignment.center,
-                          child: Text(
-                            "",
-                            style: TextStyle(fontWeight: FontWeight.w700),
-                          ))),
+                    flex: 3,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Text(
+                        "",
+                        style: TextStyle(
+                          fontWeight: FontWeight.w700,
+                        ),
+                      ),
+                    ),
+                  ),
                   const Flexible(
-                      flex: 5,
-                      fit: FlexFit.tight,
-                      child: Align(
-                          alignment: Alignment.center,
-                          child: Text("Total Cost :",
-                              style: TextStyle(fontWeight: FontWeight.w700)))),
+                    flex: 5,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Text(
+                        "Total Cost :",
+                        style: TextStyle(
+                          fontWeight: FontWeight.w700,
+                        ),
+                      ),
+                    ),
+                  ),
                   Flexible(
-                      flex: 6,
-                      fit: FlexFit.tight,
-                      child: Align(
-                          alignment: Alignment.center,
-                          child: Padding(
-                            padding: const EdgeInsets.symmetric(horizontal: 10.0),
-                            child: Container(
-                              height: 30,
-                              decoration: BoxDecoration(
-                                  border: Border.all(color: Colors.black),
-                                  borderRadius: BorderRadius.circular(5)),
-                              child: Center(
-                                  child: Text(
-                                      '${(totalHourTimeCost + totalOverTimeCost).toStringAsFixed(2)}')),
+                    flex: 6,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Padding(
+                        padding: const EdgeInsets.symmetric(horizontal: 10.0),
+                        child: Container(
+                          height: 30,
+                          decoration: BoxDecoration(
+                            border: Border.all(
+                              color: Colors.black,
+                            ),
+                            borderRadius: BorderRadius.circular(5),
+                          ),
+                          child: Center(
+                            child: Text(
+                              '${(totalHourTimeCost + totalOverTimeCost).toStringAsFixed(2)}',
                             ),
-                          ))),
-                  // Flexible(
-                  //     flex: 3,
-                  //     fit: FlexFit.tight,
-                  //     child: Align(
-                  //         alignment: Alignment.center,
-                  //         child: Padding(
-                  //           padding: EdgeInsets.symmetric(horizontal: 10.0),
-                  //           child: Container(
-                  //             height: 30,
-                  //             decoration: BoxDecoration(
-                  //                 border: Border.all(color: Colors.black),
-                  //                 borderRadius: BorderRadius.circular(5)),
-                  //             child: Center(
-                  //                 child: Text(
-                  //                     '${totalOverTimeCost.toStringAsFixed(2)}')),
-                  //           ),
-                  //         ))),
+                          ),
+                        ),
+                      ),
+                    ),
+                  ),
                   const Flexible(
-                      flex: 1,
-                      fit: FlexFit.tight,
-                      child:
-                          Align(alignment: Alignment.center, child: Text("")))
+                    flex: 1,
+                    fit: FlexFit.tight,
+                    child: Align(
+                      alignment: Alignment.center,
+                      child: Text(""),
+                    ),
+                  ),
                 ],
               ),
             ),
@@ -1249,44 +1380,46 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
             child: Row(
               children: [
                 Expanded(
-                    child: InkWell(
-                  onTap: () {
-                    Provider.of<StaffProvider>(context, listen: false)
-                        .submitTimeSheetBill(
-                      selectedWeekDates: selectedWeekDates,
-                      hourControllers: hourControllers,
-                      overtimeControllers: overtimeControllers,
-                      weekStartDate:
-                          DateFormat('yyyy-MM-dd').format(selectedWeekDates[0]),
-                      weekEndDate: DateFormat('yyyy-MM-dd').format(
-                          selectedWeekDates[selectedWeekDates.length - 1]),
-                      weekNumber: getWeekNumber(selectedWeekDates.isNotEmpty
-                          ? selectedWeekDates.first
-                          : DateTime.now()),
-                      timesheetBillNo: generateDynamicString(
-                          selectedWeekDates, '${widget.data.stafflastname}'),
-                      staffId: widget.data.staffid!,
-                      isExempt: isExempt,
-                      timeSheetStatus: 'active',
-                      totalRegularHour: totalHour,
-                      totalOvertimeHour: totalOverTimeHour,
-                      totalRegularCost: totalHourTimeCost,
-                      context: context,
-                    );
-                  },
-                  child: const CustomButton(
-                    title: 'Save',
+                  child: InkWell(
+                    onTap: () {
+                      Provider.of<StaffProvider>(context, listen: false)
+                          .submitTimeSheetBill(
+                        selectedWeekDates: selectedWeekDates,
+                        hourControllers: hourControllers,
+                        overtimeControllers: overtimeControllers,
+                        weekStartDate: DateFormat('yyyy-MM-dd')
+                            .format(selectedWeekDates[0]),
+                        weekEndDate: DateFormat('yyyy-MM-dd').format(
+                            selectedWeekDates[selectedWeekDates.length - 1]),
+                        weekNumber: getWeekNumber(selectedWeekDates.isNotEmpty
+                            ? selectedWeekDates.first
+                            : DateTime.now()),
+                        timesheetBillNo: generateDynamicString(
+                            selectedWeekDates, '${widget.data.stafflastname}'),
+                        staffId: widget.data.staffid!,
+                        isExempt: isExempt,
+                        timeSheetStatus: 'active',
+                        totalRegularHour: totalHour,
+                        totalOvertimeHour: totalOverTimeHour,
+                        totalRegularCost: totalHourTimeCost,
+                        context: context,
+                      );
+                    },
+                    child: const CustomButton(
+                      title: 'Save',
+                    ),
                   ),
-                )),
+                ),
                 Expanded(
-                    child: InkWell(
-                  onTap: () {
-                    context.pop();
-                  },
-                  child: const CustomButton(
-                    title: 'Cancel',
+                  child: InkWell(
+                    onTap: () {
+                      context.pop();
+                    },
+                    child: const CustomButton(
+                      title: 'Cancel',
+                    ),
                   ),
-                ))
+                )
               ],
             ),
           ),
@@ -1298,14 +1431,16 @@ class _TimeSheetBillState extends State<TimeSheetBill> {
             child: const Row(
               children: [
                 Expanded(
-                    child: CustomButton(
-                  btnColor: Colors.green,
-                  title: 'Submit',
-                )),
+                  child: CustomButton(
+                    btnColor: Colors.green,
+                    title: 'Submit',
+                  ),
+                ),
                 Expanded(
-                    child: CustomDeleteButton(
-                  title: 'Delete',
-                ))
+                  child: CustomDeleteButton(
+                    title: 'Delete',
+                  ),
+                )
               ],
             ),
           )
diff --git a/lib/features/Settings/widget/calender_dialog.dart b/lib/features/Settings/widget/calender_dialog.dart
index 24712ad..7c7ae96 100644
--- a/lib/features/Settings/widget/calender_dialog.dart
+++ b/lib/features/Settings/widget/calender_dialog.dart
@@ -26,13 +26,16 @@ class _CalendarDialogState extends State<CalendarDialog> {
   @override
   void initState() {
     super.initState();
-    selectedWeekDates = getWeekDates(focusedDay); // Initialize with the current week
+    selectedWeekDates =
+        getWeekDates(focusedDay); // Initialize with the current week
   }
 
   // Function to select the previous week
   void selectPreviousWeek() {
     setState(() {
-      focusedDay = focusedDay.subtract(Duration(days: 7));
+      focusedDay = focusedDay.subtract(
+        const Duration(days: 7),
+      );
       selectedWeekDates = getWeekDates(focusedDay);
     });
   }
@@ -40,7 +43,9 @@ class _CalendarDialogState extends State<CalendarDialog> {
   // Function to select the next week
   void selectNextWeek() {
     setState(() {
-      focusedDay = focusedDay.add(Duration(days: 7));
+      focusedDay = focusedDay.add(
+        const Duration(days: 7),
+      );
       selectedWeekDates = getWeekDates(focusedDay);
     });
   }
@@ -59,15 +64,22 @@ class _CalendarDialogState extends State<CalendarDialog> {
               mainAxisAlignment: MainAxisAlignment.spaceBetween,
               children: [
                 IconButton(
-                  icon: Icon(Icons.arrow_back),
+                  icon: const Icon(
+                    Icons.arrow_back,
+                  ),
                   onPressed: selectPreviousWeek,
                 ),
                 Text(
                   '${dateFormatter.format(selectedWeekDates.first)} - ${dateFormatter.format(selectedWeekDates.last)}',
-                  style: TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
+                  style: const TextStyle(
+                    fontSize: 18.0,
+                    fontWeight: FontWeight.bold,
+                  ),
                 ),
                 IconButton(
-                  icon: Icon(Icons.arrow_forward),
+                  icon: const Icon(
+                    Icons.arrow_forward,
+                  ),
                   onPressed: selectNextWeek,
                 ),
               ],
@@ -88,7 +100,8 @@ class _CalendarDialogState extends State<CalendarDialog> {
                 this.selectedWeekDates = getWeekDates(focusedDay);
               });
             },
-            headerVisible: false, // Hide the default header to replace it with week navigation
+            headerVisible:
+                false, // Hide the default header to replace it with week navigation
           ),
           Padding(
             padding: const EdgeInsets.all(16.0),
@@ -97,15 +110,20 @@ class _CalendarDialogState extends State<CalendarDialog> {
               children: [
                 TextButton(
                   onPressed: () {
-                    Navigator.pop(context); // Close dialog without selecting dates
+                    Navigator.pop(
+                      context,
+                    ); // Close dialog without selecting dates
                   },
-                  child: Text('Cancel'),
+                  child: const Text('Cancel'),
                 ),
                 ElevatedButton(
                   onPressed: () {
-                    Navigator.pop(context, selectedWeekDates); // Return the selected dates
+                    Navigator.pop(
+                      context,
+                      selectedWeekDates,
+                    ); // Return the selected dates
                   },
-                  child: Text('OK'),
+                  child: const Text('OK'),
                 ),
               ],
             ),
@@ -114,4 +132,4 @@ class _CalendarDialogState extends State<CalendarDialog> {
       ),
     );
   }
-}
\ No newline at end of file
+}
diff --git a/lib/features/Settings/widget/max_job_task_widget.dart b/lib/features/Settings/widget/max_job_task_widget.dart
index 649baaf..8973d6d 100644
--- a/lib/features/Settings/widget/max_job_task_widget.dart
+++ b/lib/features/Settings/widget/max_job_task_widget.dart
@@ -4,7 +4,6 @@ import 'package:gap/gap.dart';
 import 'package:go_router/go_router.dart';
 import 'package:provider/provider.dart';
 import 'package:sizing/sizing.dart';
-
 import '../../../core/utils/colour_constants.dart';
 import '../../../core/utils/fonts.dart';
 import '../../../core/widgets/AddModifyScheduleCustomField/custom_button.dart';
@@ -12,7 +11,6 @@ import '../../../core/widgets/common_text_form_field.dart';
 import '../../../provider/job_schedule_controller.dart';
 
 class MaxJobTaskWidget extends StatefulWidget {
-
   final ValueChanged<String> onChanged;
 
   const MaxJobTaskWidget({super.key, required this.onChanged});
@@ -22,7 +20,6 @@ class MaxJobTaskWidget extends StatefulWidget {
 }
 
 class _MaxJobTaskWidgetState extends State<MaxJobTaskWidget> {
-
   var countController = TextEditingController();
 
   @override
@@ -37,7 +34,9 @@ class _MaxJobTaskWidgetState extends State<MaxJobTaskWidget> {
       height: size.height / 3, //1.6
       width: size.width / 1.2,
       decoration: BoxDecoration(
-        borderRadius: const BorderRadius.all(Radius.circular(12.0)),
+        borderRadius: const BorderRadius.all(
+          Radius.circular(12.0),
+        ),
         color: Colors.grey.withOpacity(0.05),
       ),
       child: Column(
@@ -55,7 +54,10 @@ class _MaxJobTaskWidgetState extends State<MaxJobTaskWidget> {
                 const Expanded(
                   child: Text(
                     "Max Job Task",
-                    style: TextStyle(color: Colors.white, fontSize: 16),
+                    style: TextStyle(
+                      color: Colors.white,
+                      fontSize: 16,
+                    ),
                   ),
                 ),
                 GestureDetector(
@@ -84,25 +86,20 @@ class _MaxJobTaskWidgetState extends State<MaxJobTaskWidget> {
             textInputType: TextInputType.number,
             inputFormatters: [FilteringTextInputFormatter.digitsOnly],
             textInputAction: TextInputAction.next,
-            fontTextStyle:
-            CustomTextStyle(fontSize: 16.fss),
+            fontTextStyle: CustomTextStyle(fontSize: 16.fss),
             decoration: const InputDecoration(
-              hintText:
-              "No of jobs per time slot",
-              border:
-              OutlineInputBorder(gapPadding: 1),
+              hintText: "No of jobs per time slot",
+              border: OutlineInputBorder(gapPadding: 1),
               isDense: true,
-              enabledBorder:
-              OutlineInputBorder(gapPadding: 1),
-              focusedBorder:
-              OutlineInputBorder(gapPadding: 1),
+              enabledBorder: OutlineInputBorder(gapPadding: 1),
+              focusedBorder: OutlineInputBorder(gapPadding: 1),
             ),
           ),
           const Gap(15),
           Align(
             alignment: Alignment.center,
             child: Padding(
-              padding: EdgeInsets.symmetric(horizontal: 25.0),
+              padding: const EdgeInsets.symmetric(horizontal: 25.0),
               child: InkWell(
                 child: const CustomButton(
                   title: 'Save',
diff --git a/lib/features/Settings/widget/reminder_widget.dart b/lib/features/Settings/widget/reminder_widget.dart
index da881fb..d1bc094 100644
--- a/lib/features/Settings/widget/reminder_widget.dart
+++ b/lib/features/Settings/widget/reminder_widget.dart
@@ -1,13 +1,8 @@
-import 'dart:convert';
-
 import 'package:bizfns/features/Admin/Create%20Job/api-client/schedule_api_client_implementation.dart';
 import 'package:flutter/material.dart';
 import 'package:gap/gap.dart';
-import 'package:go_router/go_router.dart';
-import 'package:googleapis/binaryauthorization/v1.dart';
 import 'package:provider/provider.dart';
 import 'package:sizing/sizing.dart';
-
 import '../../../core/utils/colour_constants.dart';
 import '../../../core/widgets/AddModifyScheduleCustomField/custom_button.dart';
 import '../../../provider/job_schedule_controller.dart';
@@ -31,7 +26,9 @@ class _ReminderWidgetState extends State<ReminderWidget> {
             child: CircularProgressIndicator(),
           )
         : controller.reminderResponseModel!.data == null
-            ? const Center(child: Text('No Data Found'))
+            ? const Center(
+                child: Text('No Data Found'),
+              )
             : Padding(
                 padding: const EdgeInsets.all(8.0),
                 child: ListView(
@@ -39,98 +36,102 @@ class _ReminderWidgetState extends State<ReminderWidget> {
                   children: [
                     const Gap(10),
                     ...controller.reminderResponseModel!.data!.events!
-                        .map((e) => Column(
-                              crossAxisAlignment: CrossAxisAlignment.start,
-                              children: [
-                                Row(
-                                  children: [
-                                    SizedBox(
-                                      width: 150,
-                                      child: Text(
-                                        e.eventName!,
-                                        style: const TextStyle(
-                                          color: AppColor.APP_BAR_COLOUR,
-                                          fontSize: 14,
-                                        ),
-                                      ),
-                                    ),
-                                    const Spacer(
-                                      flex: 2,
-                                    ),
-                                    const Text(
-                                      'SMS',
-                                      style: TextStyle(
+                        .map(
+                          (e) => Column(
+                            crossAxisAlignment: CrossAxisAlignment.start,
+                            children: [
+                              Row(
+                                children: [
+                                  SizedBox(
+                                    width: 150,
+                                    child: Text(
+                                      e.eventName!,
+                                      style: const TextStyle(
                                         color: AppColor.APP_BAR_COLOUR,
                                         fontSize: 14,
                                       ),
                                     ),
-                                    const SizedBox(
-                                      width: 20,
-                                    ),
-                                    const Text(
-                                      'Push',
-                                      style: TextStyle(
-                                        color: AppColor.APP_BAR_COLOUR,
-                                        fontSize: 14,
-                                      ),
+                                  ),
+                                  const Spacer(
+                                    flex: 2,
+                                  ),
+                                  const Text(
+                                    'SMS',
+                                    style: TextStyle(
+                                      color: AppColor.APP_BAR_COLOUR,
+                                      fontSize: 14,
                                     ),
-                                    const SizedBox(
-                                      width: 10,
+                                  ),
+                                  const SizedBox(
+                                    width: 20,
+                                  ),
+                                  const Text(
+                                    'Push',
+                                    style: TextStyle(
+                                      color: AppColor.APP_BAR_COLOUR,
+                                      fontSize: 14,
                                     ),
-                                  ],
-                                ),
-                                const SizedBox(
-                                  height: 10,
-                                ),
-                                ...e.reminders!
-                                    .map((e1) => Padding(
-                                          padding:
-                                              const EdgeInsets.only(left: 5),
-                                          child: Row(
-                                            mainAxisAlignment:
-                                                MainAxisAlignment.end,
-                                            children: [
-                                              SizedBox(
-                                                width: 150,
-                                                child: Text(
-                                                  e1.reminder!,
-                                                  style: TextStyle(
-                                                      fontSize: 12,
-                                                      color: Colors.grey[700]),
-                                                ),
+                                  ),
+                                  const SizedBox(
+                                    width: 10,
+                                  ),
+                                ],
+                              ),
+                              const SizedBox(
+                                height: 10,
+                              ),
+                              ...e.reminders!
+                                  .map(
+                                    (e1) => Padding(
+                                      padding: const EdgeInsets.only(left: 5),
+                                      child: Row(
+                                        mainAxisAlignment:
+                                            MainAxisAlignment.end,
+                                        children: [
+                                          SizedBox(
+                                            width: 150,
+                                            child: Text(
+                                              e1.reminder!,
+                                              style: TextStyle(
+                                                fontSize: 12,
+                                                color: Colors.grey[700],
                                               ),
-                                              const Spacer(
-                                                flex: 2,
-                                              ),
-                                              Transform.scale(
-                                                scale: 0.8,
-                                                child: Checkbox(
-                                                  value: e1.sms == true,
-                                                  onChanged: (val) {
-                                                    e1.sms = val ?? false;
-                                                    setState(() {});
-                                                  },
-                                                ),
-                                              ),
-                                              Transform.scale(
-                                                scale: 0.8,
-                                                child: Checkbox(
-                                                  value: e1.push == true,
-                                                  onChanged: (val) {
-                                                    e1.push = val ?? false;
-                                                    setState(() {});
-                                                  },
-                                                ),
-                                              ),
-                                            ],
+                                            ),
+                                          ),
+                                          const Spacer(
+                                            flex: 2,
+                                          ),
+                                          Transform.scale(
+                                            scale: 0.8,
+                                            child: Checkbox(
+                                              value: e1.sms == true,
+                                              onChanged: (val) {
+                                                e1.sms = val ?? false;
+                                                setState(() {});
+                                              },
+                                            ),
                                           ),
-                                        ))
-                                    .toList(),
-                                const SizedBox(
-                                  height: 10,
-                                ),
-                              ],
-                            ))
+                                          Transform.scale(
+                                            scale: 0.8,
+                                            child: Checkbox(
+                                              value: e1.push == true,
+                                              onChanged: (val) {
+                                                e1.push = val ?? false;
+                                                setState(() {});
+                                              },
+                                            ),
+                                          ),
+                                        ],
+                                      ),
+                                    ),
+                                  )
+                                  .toList(),
+                              const SizedBox(
+                                height: 10,
+                              ),
+                            ],
+                          ),
+                        )
                         .toList(),
                     const Gap(15),
                     Offstage(
diff --git a/lib/features/Settings/widget/time_interval_widget.dart b/lib/features/Settings/widget/time_interval_widget.dart
index 72c589d..d2ca0b4 100644
--- a/lib/features/Settings/widget/time_interval_widget.dart
+++ b/lib/features/Settings/widget/time_interval_widget.dart
@@ -1,4 +1,3 @@
-import 'package:bizfns/core/utils/Utils.dart';
 import 'package:bizfns/provider/job_schedule_controller.dart';
 import 'package:flutter/material.dart';
 import 'package:gap/gap.dart';
@@ -6,10 +5,8 @@ import 'package:go_router/go_router.dart';
 import 'package:intl/intl.dart';
 import 'package:provider/provider.dart';
 import 'package:sizing/sizing.dart';
-
 import '../../../core/utils/colour_constants.dart';
 import '../../../core/widgets/AddModifyScheduleCustomField/custom_button.dart';
-import '../../../core/widgets/common_text_form_field.dart';
 
 class TimeIntervalWidget extends StatefulWidget {
   final ValueChanged<List<String>> onChanged;
@@ -56,7 +53,9 @@ class _TimeIntervalWidgetState extends State<TimeIntervalWidget> {
             padding: const EdgeInsets.symmetric(horizontal: 12),
             height: 55,
             decoration: const BoxDecoration(
-              borderRadius: BorderRadius.all(Radius.circular(12.0)),
+              borderRadius: BorderRadius.all(
+                Radius.circular(12.0),
+              ),
               color: AppColor.APP_BAR_COLOUR,
             ),
             child: Row(
@@ -64,7 +63,10 @@ class _TimeIntervalWidgetState extends State<TimeIntervalWidget> {
                 const Expanded(
                   child: Text(
                     "Time Interval",
-                    style: TextStyle(color: Colors.white, fontSize: 16),
+                    style: TextStyle(
+                      color: Colors.white,
+                      fontSize: 16,
+                    ),
                   ),
                 ),
                 GestureDetector(
@@ -88,20 +90,28 @@ class _TimeIntervalWidgetState extends State<TimeIntervalWidget> {
           ),
           const Gap(10),
           Padding(
-              padding: const EdgeInsets.symmetric(horizontal: 20),
-              child: RichText(
-                  text: TextSpan(
-                      text: 'New changes will be applicable \nfrom ',
-                      style: TextStyle(fontSize: 12, color: Colors.grey[600]),
-                      children: [
-                    TextSpan(
-                        text: DateFormat('dd MMM, yyyy').format(
-                            DateTime.now().add(const Duration(days: 1))),
-                        style: TextStyle(
-                            fontSize: 14,
-                            color: AppColor.APP_BAR_COLOUR,
-                            fontWeight: FontWeight.bold))
-                  ]))),
+            padding: const EdgeInsets.symmetric(horizontal: 20),
+            child: RichText(
+              text: TextSpan(
+                text: 'New changes will be applicable \nfrom ',
+                style: TextStyle(fontSize: 12, color: Colors.grey[600]),
+                children: [
+                  TextSpan(
+                    text: DateFormat('dd MMM, yyyy').format(
+                      DateTime.now().add(
+                        const Duration(days: 1),
+                      ),
+                    ),
+                    style: const TextStyle(
+                      fontSize: 14,
+                      color: AppColor.APP_BAR_COLOUR,
+                      fontWeight: FontWeight.bold,
+                    ),
+                  )
+                ],
+              ),
+            ),
+          ),
           const Gap(10),
           Padding(
             padding: const EdgeInsets.symmetric(horizontal: 10.0),
@@ -122,7 +132,7 @@ class _TimeIntervalWidgetState extends State<TimeIntervalWidget> {
                     height: 10,
                   ),
                   InkWell(
-                    child: Container(
+                    child: SizedBox(
                       height: 30,
                       width: size.width / 1.5,
                       child: Padding(
@@ -153,11 +163,14 @@ class _TimeIntervalWidgetState extends State<TimeIntervalWidget> {
                                     AutovalidateMode.onUserInteraction,
                                 enableInteractiveSelection: false,
                                 keyboardType: TextInputType.number,
-                                decoration: InputDecoration(
-                                    counterText: '',
-                                    border: OutlineInputBorder(
-                                        borderRadius: BorderRadius.all(
-                                            Radius.circular(4)))),
+                                decoration: const InputDecoration(
+                                  counterText: '',
+                                  border: OutlineInputBorder(
+                                    borderRadius: BorderRadius.all(
+                                      Radius.circular(4),
+                                    ),
+                                  ),
+                                ),
                                 onChanged: (val) {
                                   hour = val;
                                   if (controller.timeInterval!.hour! == val) {
@@ -170,7 +183,7 @@ class _TimeIntervalWidgetState extends State<TimeIntervalWidget> {
                                 },
                               ),
                             ),
-                            Text(' Hrs'),
+                            const Text(' Hrs'),
                             const Spacer(
                               flex: 1,
                             ),
@@ -183,12 +196,14 @@ class _TimeIntervalWidgetState extends State<TimeIntervalWidget> {
                                     AutovalidateMode.onUserInteraction,
                                 enableInteractiveSelection: false,
                                 keyboardType: TextInputType.number,
-                                decoration: InputDecoration(
-                                    counterText: '',
-
-                                    border: OutlineInputBorder(
-                                        borderRadius: BorderRadius.all(
-                                            Radius.circular(4)))),
+                                decoration: const InputDecoration(
+                                  counterText: '',
+                                  border: OutlineInputBorder(
+                                    borderRadius: BorderRadius.all(
+                                      Radius.circular(4),
+                                    ),
+                                  ),
+                                ),
                                 onChanged: (val) {
                                   min = val;
                                   if (controller.timeInterval!.minute == val) {
@@ -201,7 +216,7 @@ class _TimeIntervalWidgetState extends State<TimeIntervalWidget> {
                                 },
                               ),
                             ),
-                            Text(' Min'),
+                            const Text(' Min'),
                           ],
                         ),
                       ),
@@ -213,7 +228,7 @@ class _TimeIntervalWidgetState extends State<TimeIntervalWidget> {
           ),
           const Gap(15),
           controller.timeInterval == null
-              ? SizedBox()
+              ? const SizedBox()
               : Align(
                   alignment: Alignment.center,
                   child: Padding(
@@ -227,16 +242,18 @@ class _TimeIntervalWidgetState extends State<TimeIntervalWidget> {
                       ),
                       onTap: () {
                         if (hourChanged || minChanged) {
-                          widget.onChanged([
-                            hour ??
-                                (controller.timeInterval == null
-                                    ? "00"
-                                    : controller.timeInterval!.hour!),
-                            min ??
-                                (controller.timeInterval == null
-                                    ? "00"
-                                    : controller.timeInterval!.minute!),
-                          ]);
+                          widget.onChanged(
+                            [
+                              hour ??
+                                  (controller.timeInterval == null
+                                      ? "00"
+                                      : controller.timeInterval!.hour!),
+                              min ??
+                                  (controller.timeInterval == null
+                                      ? "00"
+                                      : controller.timeInterval!.minute!),
+                            ],
+                          );
                         }
                         context.pop();
                       },
diff --git a/lib/features/Settings/widget/weekly_calender.dart b/lib/features/Settings/widget/weekly_calender.dart
index f254ae8..05bfb31 100644
--- a/lib/features/Settings/widget/weekly_calender.dart
+++ b/lib/features/Settings/widget/weekly_calender.dart
@@ -12,18 +12,16 @@ class _CalendarPopupExampleState extends State<CalendarPopupExample> {
 
   // Function to open calendar in a dialog
   Future<void> _openCalendarDialog(BuildContext context) async {
-    List<DateTime>? result = await showDialog(
+    List<DateTime> result = await showDialog(
       context: context,
       builder: (context) {
         return CalendarDialog();
       },
     );
 
-    if (result != null) {
-      setState(() {
-        selectedWeekDates = result;
-      });
-    }
+    setState(() {
+      selectedWeekDates = result;
+    });
   }
 
   @override
@@ -143,15 +141,18 @@ class _CalendarDialogState extends State<CalendarDialog> {
               mainAxisSize: MainAxisSize.min,
               children: [
                 IconButton(
-                  icon: Icon(Icons.arrow_back),
+                  icon: const Icon(Icons.arrow_back),
                   onPressed: selectPreviousWeek,
                 ),
                 Text(
                   '${dateFormatter.format(selectedWeekDates.first)} - ${dateFormatter.format(selectedWeekDates.last)}',
-                  style: TextStyle(fontSize: 14.0, fontWeight: FontWeight.bold),
+                  style: const TextStyle(
+                    fontSize: 14.0,
+                    fontWeight: FontWeight.bold,
+                  ),
                 ),
                 IconButton(
-                  icon: Icon(Icons.arrow_forward),
+                  icon: const Icon(Icons.arrow_forward),
                   onPressed: selectNextWeek,
                 ),
               ],
@@ -189,10 +190,12 @@ class _CalendarDialogState extends State<CalendarDialog> {
                 ),
                 ElevatedButton(
                   onPressed: () {
-                    Navigator.pop(context,
-                        selectedWeekDates); // Return the selected dates
+                    Navigator.pop(
+                      context,
+                      selectedWeekDates,
+                    ); // Return the selected dates
                   },
-                  child: Text('OK'),
+                  child: const Text('OK'),
                 ),
               ],
             ),
diff --git a/lib/features/Settings/widget/working_hour_widget.dart b/lib/features/Settings/widget/working_hour_widget.dart
index 723fea2..52c85b6 100644
--- a/lib/features/Settings/widget/working_hour_widget.dart
+++ b/lib/features/Settings/widget/working_hour_widget.dart
@@ -1,5 +1,3 @@
-import 'dart:math';
-
 import 'package:bizfns/provider/job_schedule_controller.dart';
 import 'package:flutter/material.dart';
 import 'package:gap/gap.dart';
@@ -7,7 +5,6 @@ import 'package:go_router/go_router.dart';
 import 'package:intl/intl.dart';
 import 'package:provider/provider.dart';
 import 'package:sizing/sizing.dart';
-
 import '../../../core/utils/colour_constants.dart';
 import '../../../core/widgets/AddModifyScheduleCustomField/custom_button.dart';
 
@@ -45,9 +42,9 @@ class _WorkingHourWidgetState extends State<WorkingHourWidget> {
     return Container(
       height: size.height / 3.4, //1.6
       width: size.width / 1.2,
-      decoration: BoxDecoration(
-        borderRadius: const BorderRadius.all(Radius.circular(12.0)),
-        color: Colors.grey.withOpacity(0.05),
+      decoration: const BoxDecoration(
+        borderRadius: BorderRadius.all(Radius.circular(12.0)),
+        color: Color(0x0D9E9E9E),
       ),
       child: Column(
         crossAxisAlignment: CrossAxisAlignment.start,
@@ -64,7 +61,10 @@ class _WorkingHourWidgetState extends State<WorkingHourWidget> {
                 const Expanded(
                   child: Text(
                     "Working Hours",
-                    style: TextStyle(color: Colors.white, fontSize: 16),
+                    style: TextStyle(
+                      color: Colors.white,
+                      fontSize: 16,
+                    ),
                   ),
                 ),
                 GestureDetector(
@@ -74,7 +74,10 @@ class _WorkingHourWidgetState extends State<WorkingHourWidget> {
                     width: 22,
                     decoration: BoxDecoration(
                       borderRadius: BorderRadius.circular(100),
-                      border: Border.all(color: Colors.white, width: 1.5),
+                      border: Border.all(
+                        color: Colors.white,
+                        width: 1.5,
+                      ),
                     ),
                     child: const Icon(
                       Icons.clear_rounded,
@@ -89,20 +92,28 @@ class _WorkingHourWidgetState extends State<WorkingHourWidget> {
           const Gap(10),
           // Gap(10.ss),
           Padding(
-              padding: const EdgeInsets.symmetric(horizontal: 20),
-              child: RichText(
-                  text: TextSpan(
-                      text: 'New changes will be applicable \nfrom ',
-                      style: TextStyle(fontSize: 12, color: Colors.grey[600]),
-                      children: [
-                    TextSpan(
-                        text: DateFormat('dd MMM, yyyy').format(
-                            DateTime.now().add(const Duration(days: 1))),
-                        style: TextStyle(
-                            fontSize: 14,
-                            color: AppColor.APP_BAR_COLOUR,
-                            fontWeight: FontWeight.bold))
-                  ]))),
+            padding: const EdgeInsets.symmetric(horizontal: 20),
+            child: RichText(
+              text: TextSpan(
+                text: 'New changes will be applicable \nfrom ',
+                style: TextStyle(
+                  fontSize: 12,
+                  color: Colors.grey[600],
+                ),
+                children: [
+                  TextSpan(
+                    text: DateFormat('dd MMM, yyyy')
+                        .format(DateTime.now().add(const Duration(days: 1))),
+                    style: const TextStyle(
+                      fontSize: 14,
+                      color: AppColor.APP_BAR_COLOUR,
+                      fontWeight: FontWeight.bold,
+                    ),
+                  )
+                ],
+              ),
+            ),
+          ),
           const Gap(10),
           Padding(
             padding: const EdgeInsets.symmetric(horizontal: 10.0),
@@ -152,9 +163,10 @@ class _WorkingHourWidgetState extends State<WorkingHourWidget> {
                                   controller
                                       .workingHoursResponseModel!.data!.start!,
                               style: const TextStyle(
-                                  color: Colors.grey,
-                                  fontSize: 14,
-                                  fontWeight: FontWeight.bold),
+                                color: Colors.grey,
+                                fontSize: 14,
+                                fontWeight: FontWeight.bold,
+                              ),
                             ),
                           ],
                         ),
@@ -170,12 +182,13 @@ class _WorkingHourWidgetState extends State<WorkingHourWidget> {
                     },
                     child: Container(
                       decoration: BoxDecoration(
-                          borderRadius: const BorderRadius.all(
-                            Radius.circular(5),
-                          ),
-                          border: Border.all(
-                            color: AppColor.APP_BAR_COLOUR,
-                          )),
+                        borderRadius: const BorderRadius.all(
+                          Radius.circular(5),
+                        ),
+                        border: Border.all(
+                          color: AppColor.APP_BAR_COLOUR,
+                        ),
+                      ),
                       height: 45,
                       width: size.width / 3,
                       child: Padding(
@@ -205,9 +218,10 @@ class _WorkingHourWidgetState extends State<WorkingHourWidget> {
                                   controller
                                       .workingHoursResponseModel!.data!.end!,
                               style: const TextStyle(
-                                  color: Colors.grey,
-                                  fontSize: 14,
-                                  fontWeight: FontWeight.bold),
+                                color: Colors.grey,
+                                fontSize: 14,
+                                fontWeight: FontWeight.bold,
+                              ),
                             ),
                           ],
                         ),
@@ -242,7 +256,8 @@ class _WorkingHourWidgetState extends State<WorkingHourWidget> {
                           } else if (startTime != null && endTime == null) {
                             widget.onChanged([
                               getPostFormat(startTime!),
-                              getPostFormat(controller.workingHoursResponseModel!.data!.end!),
+                              getPostFormat(controller
+                                  .workingHoursResponseModel!.data!.end!),
                             ]);
                           } else if (startTime != null && endTime != null) {
                             widget.onChanged([
@@ -269,11 +284,11 @@ class _WorkingHourWidgetState extends State<WorkingHourWidget> {
     );
   }
 
-  String getPostFormat(String time){
+  String getPostFormat(String time) {
     String hour = time.split(":")[0];
     String minute = time.split(":")[1].replaceAll(RegExp(r'[^0-9]'), '');
 
-    if(time.contains('P')){
+    if (time.contains('P')) {
       hour = (int.parse(hour) + 12).toString();
     }
     return '$hour:$minute:00';
@@ -304,26 +319,30 @@ class _WorkingHourWidgetState extends State<WorkingHourWidget> {
                 : startTime!.contains('P')
                     ? 12
                     : 0),
-        minute: int.parse(startTime == null
-            ? controller.workingHoursResponseModel!.data!.start!
-                .split(":")[1]
-                .replaceAll(RegExp(r'[^0-9]'), '')
-            : startTime!.split(':')[1].replaceAll(RegExp(r'[^0-9]'), '')),
+        minute: int.parse(
+          startTime == null
+              ? controller.workingHoursResponseModel!.data!.start!
+                  .split(":")[1]
+                  .replaceAll(RegExp(r'[^0-9]'), '')
+              : startTime!.split(':')[1].replaceAll(RegExp(r'[^0-9]'), ''),
+        ),
       ),
     );
 
     if (picked != null) {
-      setState(() {
-        final now = DateTime.now();
-        final dt =
-            DateTime(now.year, now.month, now.day, picked.hour, picked.minute);
-        final format = DateFormat.jm(); //"6:00 AM"
+      setState(
+        () {
+          final now = DateTime.now();
+          final dt = DateTime(
+              now.year, now.month, now.day, picked.hour, picked.minute);
+          final format = DateFormat.jm(); //"6:00 AM"
 
-        startTime = format.format(dt);
-        //     '${picked.hour < 10 ? '0${picked.hour}' : picked.hour} : 00';
-        startTimeChanged =
-            controller.workingHoursResponseModel!.data!.start! != startTime;
-      });
+          startTime = format.format(dt);
+          //     '${picked.hour < 10 ? '0${picked.hour}' : picked.hour} : 00';
+          startTimeChanged =
+              controller.workingHoursResponseModel!.data!.start! != startTime;
+        },
+      );
     }
   }
 
@@ -346,11 +365,13 @@ class _WorkingHourWidgetState extends State<WorkingHourWidget> {
                 : endTime!.contains('P')
                     ? 12
                     : 0),
-        minute: int.parse(endTime == null
-            ? controller.workingHoursResponseModel!.data!.end!
-                .split(":")[1]
-                .replaceAll(RegExp(r'[^0-9]'), '')
-            : endTime!.split(':')[1].replaceAll(RegExp(r'[^0-9]'), '')),
+        minute: int.parse(
+          endTime == null
+              ? controller.workingHoursResponseModel!.data!.end!
+                  .split(":")[1]
+                  .replaceAll(RegExp(r'[^0-9]'), '')
+              : endTime!.split(':')[1].replaceAll(RegExp(r'[^0-9]'), ''),
+        ),
       ),
       builder: (context, Widget? child) {
         return MediaQuery(
@@ -383,18 +404,19 @@ class _WorkingHourWidgetState extends State<WorkingHourWidget> {
         //_selectDate(context, startDate);
       },
       child: Container(
-          alignment: Alignment.center,
-          height: 55,
-          width: 30,
-          decoration: BoxDecoration(
-            borderRadius: BorderRadius.circular(8),
-            color: Colors.white,
-          ),
-          child: const Icon(
-            Icons.calendar_month_outlined,
-            color: Colors.black,
-            size: 30,
-          )),
+        alignment: Alignment.center,
+        height: 55,
+        width: 30,
+        decoration: BoxDecoration(
+          borderRadius: BorderRadius.circular(8),
+          color: Colors.white,
+        ),
+        child: const Icon(
+          Icons.calendar_month_outlined,
+          color: Colors.black,
+          size: 30,
+        ),
+      ),
     );
   }
 }
diff --git a/lib/features/SplashScreen/splash_screen.dart b/lib/features/SplashScreen/splash_screen.dart
index 4efadbc..dad7c4f 100644
--- a/lib/features/SplashScreen/splash_screen.dart
+++ b/lib/features/SplashScreen/splash_screen.dart
@@ -1,14 +1,7 @@
 import 'dart:async';
-import 'package:encrypt/encrypt.dart' as encrypt;
-
-import 'dart:convert';
-
 import 'package:flutter/material.dart';
 import 'package:flutter/services.dart';
-import 'package:gap/gap.dart';
-
 import 'package:go_router/go_router.dart';
-
 import '../../core/route/RouteConstants.dart';
 import '../../core/shared_pref/shared_pref.dart';
 import '../../core/utils/EncryptionUtils.dart';
@@ -29,44 +22,46 @@ class _SplashScreenState extends State<SplashScreen> {
     SystemChannels.textInput.invokeMethod('TextInput.hide');
 
     // Future.delayed(const Duration(milliseconds: 3000),() => context.go(login));
-    Future.delayed(Duration(microseconds: 3000)).then((value) async {
-      TestEncryption();
-      var loogedin = await GlobalHandler.isLoggedIn();
-      if (!loogedin)
-        Navigate.NavigateAndReplace(context, login, params: {});
-      else {
-        var answered = await GlobalHandler.getSequrityQuestionAnswered();
-        if (answered)
-          GoRouter.of(context)
-              .pushNamed('home'); //Navigate.NavigateAndReplace(context, home);
-        // else  Navigate.NavigateAndReplace(context,security_question_page);
-        OtpVerificationData? data = await GlobalHandler.getLoginData();
-        bool isSequrityQuestionAnswered =
-            await GlobalHandler.getSequrityQuestionAnswered();
-        if (data != null && data!.userType != null && data!.userType == "1") {
-          if (isSequrityQuestionAnswered != null && isSequrityQuestionAnswered)
-            context
-                .goNamed('home'); //Navigate.NavigateAndReplace(context, home);
-          else {
-            Navigate.NavigateAndReplace(context, security_question_page,
-                params: {"forWhat": ""});
+    Future.delayed(const Duration(microseconds: 3000)).then(
+      (value) async {
+        TestEncryption();
+        var loogedin = await GlobalHandler.isLoggedIn();
+        if (!loogedin)
+          Navigate.NavigateAndReplace(context, login, params: {});
+        else {
+          var answered = await GlobalHandler.getSequrityQuestionAnswered();
+          if (answered)
+            GoRouter.of(context).pushNamed(
+                'home'); //Navigate.NavigateAndReplace(context, home);
+          // else  Navigate.NavigateAndReplace(context,security_question_page);
+          OtpVerificationData? data = await GlobalHandler.getLoginData();
+          bool isSequrityQuestionAnswered =
+              await GlobalHandler.getSequrityQuestionAnswered();
+          if (data != null && data.userType != null && data.userType == "1") {
+            if (isSequrityQuestionAnswered)
+              context.goNamed(
+                  'home'); //Navigate.NavigateAndReplace(context, home);
+            else {
+              Navigate.NavigateAndReplace(context, security_question_page,
+                  params: {"forWhat": ""});
+            }
           }
-        }
-        //  else if (data!.userType != null && data!.userType == "2") {
-        else if (data!.userType != null && data!.userType == "2") {
-          if (isSequrityQuestionAnswered != null && isSequrityQuestionAnswered)
-            context
-                .goNamed('home'); //Navigate.NavigateAndReplace(context, home);
-          else {
-            // Navigate(context, change_password);
-            Navigate.NavigateAndReplace(context, login);
+          //  else if (data!.userType != null && data!.userType == "2") {
+          else if (data!.userType != null && data.userType == "2") {
+            if (isSequrityQuestionAnswered)
+              context.goNamed(
+                  'home'); //Navigate.NavigateAndReplace(context, home);
+            else {
+              // Navigate(context, change_password);
+              Navigate.NavigateAndReplace(context, login);
+            }
+          } else {
+            await GlobalHandler.setSequrityQuestionAnswered(true);
+            context.goNamed(home); //Navigate.NavigateAndReplace(context, home);
           }
-        } else {
-          await GlobalHandler.setSequrityQuestionAnswered(true);
-          context.goNamed(home); //Navigate.NavigateAndReplace(context, home);
         }
-      }
-    });
+      },
+    );
 
     /*Timer.periodic(
       Duration(seconds: 3),
@@ -77,32 +72,43 @@ class _SplashScreenState extends State<SplashScreen> {
 
     return Scaffold(
       body: Container(
-          height: size.height,
-          decoration: const BoxDecoration(
-              gradient: LinearGradient(
-                  colors: [Color(0xFF00ACD8), Color(0xFF093E52)])),
-          child: Stack(
-            alignment: Alignment.center,
-            children: [
-              Positioned(
-                  bottom: 0,
-                  top: 0,
-                  right: 0,
-                  left: 0,
-                  child: Image.asset("assets/images/image.png")),
-              const Positioned(
-                  bottom: 0,
-                  child: Padding(
-                    padding: EdgeInsets.all(15.0),
-                    child: SizedBox(
-                        height: 22,
-                        width: 22,
-                        child: CircularProgressIndicator(
-                          color: Colors.white,
-                        )),
-                  )),
+        height: size.height,
+        decoration: const BoxDecoration(
+          gradient: LinearGradient(
+            colors: [
+              Color(0xFF00ACD8),
+              Color(0xFF093E52),
             ],
-          )),
+          ),
+        ),
+        child: Stack(
+          alignment: Alignment.center,
+          children: [
+            Positioned(
+              bottom: 0,
+              top: 0,
+              right: 0,
+              left: 0,
+              child: Image.asset(
+                "assets/images/image.png",
+              ),
+            ),
+            const Positioned(
+              bottom: 0,
+              child: Padding(
+                padding: EdgeInsets.all(15.0),
+                child: SizedBox(
+                  height: 22,
+                  width: 22,
+                  child: CircularProgressIndicator(
+                    color: Colors.white,
+                  ),
+                ),
+              ),
+            ),
+          ],
+        ),
+      ),
     );
   }
 
diff --git a/lib/features/auth/ForgotBusinessId/repo/forgot_business_id_repo_impl.dart b/lib/features/auth/ForgotBusinessId/repo/forgot_business_id_repo_impl.dart
index 2dff97a..f08e25f 100644
--- a/lib/features/auth/ForgotBusinessId/repo/forgot_business_id_repo_impl.dart
+++ b/lib/features/auth/ForgotBusinessId/repo/forgot_business_id_repo_impl.dart
@@ -1,27 +1,17 @@
-
-
-import 'dart:convert';
-
-import 'package:bizfns/core/utils/const.dart';
-import 'package:bizfns/features/auth/ForgotPassword/model/ForgotPasswordModel.dart';
-import 'package:bizfns/features/auth/ForgotPassword/model/ForgotPasswordVerifyOtpModel.dart';
 import 'package:flutter/material.dart';
 
-
 import '../../../../core/common/Resource.dart';
 import '../../../../core/common/Status.dart';
 import '../../data/api/auth_api_client/auth_api_client.dart';
 
-
-class ForgotBusinessIdRepoImpl{
-
+class ForgotBusinessIdRepoImpl {
   final AuthApiClient apiClient;
 
   ForgotBusinessIdRepoImpl({required this.apiClient});
 
-  Future<Resource> ForgotBusinessId({required body}) async{
+  Future<Resource> ForgotBusinessId({required body}) async {
     Resource data = await apiClient.forgotBusinessId(body: body);
-    if(data.status ==STATUS.SUCCESS) {
+    if (data.status == STATUS.SUCCESS) {
       // try {
       //   // var mData = data.data;
       //   // data.data = forgotPasswordData;
@@ -32,7 +22,4 @@ class ForgotBusinessIdRepoImpl{
     }
     return data;
   }
-
-
-
-}
\ No newline at end of file
+}
diff --git a/lib/features/auth/ForgotPassword/provider/forgot_password_provider.dart b/lib/features/auth/ForgotPassword/provider/forgot_password_provider.dart
index c16669a..b6dba05 100644
--- a/lib/features/auth/ForgotPassword/provider/forgot_password_provider.dart
+++ b/lib/features/auth/ForgotPassword/provider/forgot_password_provider.dart
@@ -384,7 +384,7 @@ class ForgotPasswordProvider extends ChangeNotifier {
         secondsRemaining--;
         notifyListeners();
       } else {
-        timer!.cancel();
+        timer.cancel();
         enableResend = true;
       }
       notifyListeners();
diff --git a/lib/features/auth/ForgotPassword/verify_otp.dart b/lib/features/auth/ForgotPassword/verify_otp.dart
index 0a4d596..d5df4d9 100644
--- a/lib/features/auth/ForgotPassword/verify_otp.dart
+++ b/lib/features/auth/ForgotPassword/verify_otp.dart
@@ -80,7 +80,7 @@ class VerifyForgotPasswordOTP extends StatelessWidget {
                     ),
                     const Gap(20),
                     Pinput(
-                      androidSmsAutofillMethod: AndroidSmsAutofillMethod.none,
+                      pinputAutovalidateMode: PinputAutovalidateMode.onSubmit,
                       length: 6,
                       controller: Provider.of<ForgotPasswordProvider>(context,
                               listen: false)
diff --git a/lib/features/auth/Login/login_page.dart b/lib/features/auth/Login/login_page.dart
index de60d17..c4cce8c 100644
--- a/lib/features/auth/Login/login_page.dart
+++ b/lib/features/auth/Login/login_page.dart
@@ -57,9 +57,6 @@ class _LoginPageState extends State<LoginPage> {
   }
 
   bool _isNumeric(String str) {
-    if (str == null) {
-      return false;
-    }
     return double.tryParse(str) != null;
   }
 
@@ -282,20 +279,18 @@ class _LoginPageState extends State<LoginPage> {
                                         }
                                       },
                                       onSave: (val) async {
-
-                                        if(_isNumeric(val!) &&
-                                            val!.length == 10){
-                                          await controller.getBusinessId(context);
+                                        if (_isNumeric(val!) &&
+                                            val.length == 10) {
+                                          await controller
+                                              .getBusinessId(context);
                                         }
                                       },
                                       onValueChanged: (val) async {
-                                        if (val != null) {
-                                          // Check if val is a 10-digit numeric string
-                                          if (_isNumeric(val) &&
-                                              val.length == 10) {
-                                            await controller
-                                                .getBusinessId(context);
-                                          }
+                                        // Check if val is a 10-digit numeric string
+                                        if (_isNumeric(val) &&
+                                            val.length == 10) {
+                                          await controller
+                                              .getBusinessId(context);
                                         }
                                       },
                                       textInputAction: TextInputAction.next,
@@ -327,7 +322,10 @@ class _LoginPageState extends State<LoginPage> {
                                     onFocusChange: (hasFocus) async {
                                       if (!hasFocus &&
                                           controller.userIdController.text
-                                              .isNotEmpty && controller.userIdController.text.length >= 10) {
+                                              .isNotEmpty &&
+                                          controller.userIdController.text
+                                                  .length >=
+                                              10) {
                                         await controller.getBusinessId(context);
                                       }
                                     },
diff --git a/lib/features/auth/Login/provider/login_provider.dart b/lib/features/auth/Login/provider/login_provider.dart
index 9b02928..79d5a07 100644
--- a/lib/features/auth/Login/provider/login_provider.dart
+++ b/lib/features/auth/Login/provider/login_provider.dart
@@ -320,7 +320,7 @@ class LoginProvider extends ChangeNotifier {
             EasyLoading.dismiss();
             loading = false;
             print(userIdController.text);
-            await GlobalHandler.setToken(data!.first.token ?? "");
+            await GlobalHandler.setToken(data.first.token ?? "");
             await GlobalHandler.setLogedIn(true);
             await GlobalHandler.setUserId(userIdController.text);
             // await GlobalHandler.setCompanyId(tenantIdController.text);
@@ -331,9 +331,9 @@ class LoginProvider extends ChangeNotifier {
             // userIdController.text = "";
             // passwordController.text = "";
 
-            if (data!.first.userType != null && data!.first.userType == "1") {
-              if (data!.first.isSequrityQuestionAnswered != null &&
-                  data!.first.isSequrityQuestionAnswered == "Y") {
+            if (data.first.userType != null && data.first.userType == "1") {
+              if (data.first.isSequrityQuestionAnswered != null &&
+                  data.first.isSequrityQuestionAnswered == "Y") {
                 await GlobalHandler.setSequrityQuestionAnswered(true);
                 //Navigate.NavigateAndReplace(context, home);
                 context.goNamed('home');
@@ -342,10 +342,10 @@ class LoginProvider extends ChangeNotifier {
                 Navigate.NavigateAndReplace(context, security_question_page,
                     params: {"forWhat": ""});
               }
-            } else if (data!.first.userType != null &&
-                data!.first.userType == "2") {
-              if (data!.first.isSequrityQuestionAnswered != null &&
-                  data!.first.isSequrityQuestionAnswered == "Y") {
+            } else if (data.first.userType != null &&
+                data.first.userType == "2") {
+              if (data.first.isSequrityQuestionAnswered != null &&
+                  data.first.isSequrityQuestionAnswered == "Y") {
                 await GlobalHandler.setSequrityQuestionAnswered(true);
                 context.goNamed('home');
                 // Navigate.NavigateAndReplace(context, home);
diff --git a/lib/features/auth/Login/repo/login_repo_impl.dart b/lib/features/auth/Login/repo/login_repo_impl.dart
index 44cf0c6..edce05a 100644
--- a/lib/features/auth/Login/repo/login_repo_impl.dart
+++ b/lib/features/auth/Login/repo/login_repo_impl.dart
@@ -2,7 +2,6 @@ import 'package:flutter/material.dart';
 import 'package:get/get.dart';
 
 import '../../../../core/common/Resource.dart';
-import '../../../../core/common/Status.dart';
 import '../../../../core/shared_pref/shared_pref.dart';
 import '../../data/api/auth_api_client/auth_api_client.dart';
 
diff --git a/lib/features/auth/Login/verify_otp.dart b/lib/features/auth/Login/verify_otp.dart
index 250be18..5b98e40 100644
--- a/lib/features/auth/Login/verify_otp.dart
+++ b/lib/features/auth/Login/verify_otp.dart
@@ -150,8 +150,8 @@ class _VerifyOTPState extends State<VerifyOTP> {
 
                               Center(
                                 child: Pinput(
-                                  androidSmsAutofillMethod:
-                                      AndroidSmsAutofillMethod.none,
+                                  pinputAutovalidateMode:
+                                      PinputAutovalidateMode.onSubmit,
                                   length: 6,
                                   controller: widget.forWhat == ""
                                       ? Provider.of<LoginProvider>(context,
diff --git a/lib/features/auth/Signup/verify_registration_otp.dart b/lib/features/auth/Signup/verify_registration_otp.dart
index 4fa4bfd..eb751b3 100644
--- a/lib/features/auth/Signup/verify_registration_otp.dart
+++ b/lib/features/auth/Signup/verify_registration_otp.dart
@@ -14,10 +14,7 @@ import 'package:provider/provider.dart';
 import '../../../core/utils/colour_constants.dart';
 import '../../../core/widgets/otp_input.dart';
 
-
 class VerifyRegistrationOTP extends StatefulWidget {
-
-
   VerifyRegistrationOTP({super.key});
 
   @override
@@ -25,8 +22,6 @@ class VerifyRegistrationOTP extends StatefulWidget {
 }
 
 class _VerifyRegistrationOTPState extends State<VerifyRegistrationOTP> {
-
-
   @override
   void dispose() {
     // if( Provider.of<SignupProvider>(context,listen: false).timer!=null) Provider.of<SignupProvider>(context,listen: false).timer!.cancel();
@@ -34,11 +29,13 @@ class _VerifyRegistrationOTPState extends State<VerifyRegistrationOTP> {
     // Provider.of<SignupProvider>(context,listen: false).otpController.dispose();
     super.dispose();
   }
+
   @override
   void initState() {
-    Provider.of<SignupProvider>(context, listen: false).otpController.text ="";
+    Provider.of<SignupProvider>(context, listen: false).otpController.text = "";
     super.initState();
   }
+
   @override
   Widget build(BuildContext context) {
     Size size = MediaQuery.of(context).size;
@@ -47,177 +44,214 @@ class _VerifyRegistrationOTPState extends State<VerifyRegistrationOTP> {
 
     var provider = Provider.of<SignupProvider>(context, listen: false);
 
-
     return SafeArea(
-        child: Scaffold(
-      // appBar: AppBar(
-      //   backgroundColor: Colors.white,
-      //   elevation: 0,
-      //   // centerTitle: true,
-      //   title: Center(
-      //     child:  Text(
-      //       "Verify OTP",
-      //       style: TextStyle(color: Colors.black, fontSize: 16.fss),
-      //     ),
-      //   ),
-      //   // leading: IconButton(
-      //   //   icon: const Icon(
-      //   //     Icons.arrow_back,
-      //   //     size: 22,
-      //   //     color: Colors.black,
-      //   //   ),
-      //   //   onPressed: () {
-      //   //     Navigator.pop(context);
-      //   //   },
-      //   // ),
-      //   automaticallyImplyLeading: false,
-      // ),
-
-      body: provider.loading
-          ?SizedBox(
-        //color: Colors.red,
-        width: size.width,
-        child:  const Center(
-                child: CircularProgressIndicator(
-                  color: Colors.white,
-                ),
-              ))
-            : SingleChildScrollView(
-              child: Container(
-                height: size.height,
-                child: Column(
-                  // shrinkWrap: true,
-
-                  children: [
-                    Padding(
-                        padding: EdgeInsets.symmetric(horizontal: 20.ss),
-                        child:Column(
-                      crossAxisAlignment: CrossAxisAlignment.start,
-                      mainAxisAlignment: MainAxisAlignment.end,
-                      children: [
-                        Gap(size.height/12.ss),
-                        Padding(
-                          padding:  EdgeInsets.all(8.0.ss),
-                          child: SizedBox(
-                            height: 20.ss,
-                            child: Center(
-                              child: Image.asset("assets/images/logo.png"),
-                            ),
-                          ),
-                        ),
-                        Row(
-                          mainAxisAlignment: MainAxisAlignment.center,
-                          children: [
-                            const Text(
-                              "Simple Services",
-                              style: TextStyle(
-                                  fontSize: 18, fontFamily: "Roboto", color: Colors.black),
-                            ),
-                          ],
-                        ),
+      child: Scaffold(
+        // appBar: AppBar(
+        //   backgroundColor: Colors.white,
+        //   elevation: 0,
+        //   // centerTitle: true,
+        //   title: Center(
+        //     child:  Text(
+        //       "Verify OTP",
+        //       style: TextStyle(color: Colors.black, fontSize: 16.fss),
+        //     ),
+        //   ),
+        //   // leading: IconButton(
+        //   //   icon: const Icon(
+        //   //     Icons.arrow_back,
+        //   //     size: 22,
+        //   //     color: Colors.black,
+        //   //   ),
+        //   //   onPressed: () {
+        //   //     Navigator.pop(context);
+        //   //   },
+        //   // ),
+        //   automaticallyImplyLeading: false,
+        // ),
 
-                        Gap(10.ss),
-                        CommonText(text: "OTP Sent",textStyle: CustomTextStyle(fontSize: 24.fss,fontWeight: FontWeight.w700)),
-                        Gap(10.ss),
-                        // Gap(30.ss),
-                        Text(
-                          provider.model!.otpMessage??"",
-                          style: TextStyle(
-                              fontSize: 14,
-                              color: Colors.black,
-                              fontWeight: FontWeight.normal),
-                          textAlign: TextAlign.center,
-                        ),
+        body: provider.loading
+            ? SizedBox(
+                //color: Colors.red,
+                width: size.width,
+                child: const Center(
+                  child: CircularProgressIndicator(
+                    color: Colors.white,
+                  ),
+                ))
+            : SingleChildScrollView(
+                child: Container(
+                  height: size.height,
+                  child: Column(
+                    // shrinkWrap: true,
 
-                        Gap(20.ss),
+                    children: [
+                      Padding(
+                          padding: EdgeInsets.symmetric(horizontal: 20.ss),
+                          child: Column(
+                            crossAxisAlignment: CrossAxisAlignment.start,
+                            mainAxisAlignment: MainAxisAlignment.end,
+                            children: [
+                              Gap(size.height / 12.ss),
+                              Padding(
+                                padding: EdgeInsets.all(8.0.ss),
+                                child: SizedBox(
+                                  height: 20.ss,
+                                  child: Center(
+                                    child:
+                                        Image.asset("assets/images/logo.png"),
+                                  ),
+                                ),
+                              ),
+                              Row(
+                                mainAxisAlignment: MainAxisAlignment.center,
+                                children: [
+                                  const Text(
+                                    "Simple Services",
+                                    style: TextStyle(
+                                        fontSize: 18,
+                                        fontFamily: "Roboto",
+                                        color: Colors.black),
+                                  ),
+                                ],
+                              ),
 
+                              Gap(10.ss),
+                              CommonText(
+                                  text: "OTP Sent",
+                                  textStyle: CustomTextStyle(
+                                      fontSize: 24.fss,
+                                      fontWeight: FontWeight.w700)),
+                              Gap(10.ss),
+                              // Gap(30.ss),
+                              Text(
+                                provider.model!.otpMessage ?? "",
+                                style: TextStyle(
+                                    fontSize: 14,
+                                    color: Colors.black,
+                                    fontWeight: FontWeight.normal),
+                                textAlign: TextAlign.center,
+                              ),
 
-                        Pinput(
-                          androidSmsAutofillMethod: AndroidSmsAutofillMethod.none,
-                          length: 6,
-                          controller: Provider.of<SignupProvider>(context,listen: false).otpController,
-                        ),
-                        Gap(10.ss),
-                        Visibility(
-                          visible: Provider.of<SignupProvider>(context,listen: true).enableResend?false:true,
-                          child: Row(
-                            mainAxisAlignment: MainAxisAlignment.center,
-                            children: [
-                              Container(
-                                alignment: Alignment.center,
+                              Gap(20.ss),
 
-                                child: CommonText(text:"Resend otp after ${context.watch<SignupProvider>().secondsRemaining} seconds",
-                                  textStyle: CustomTextStyle(color: AppColor.APP_BAR_COLOUR),),
+                              Pinput(
+                                pinputAutovalidateMode:
+                                    PinputAutovalidateMode.onSubmit,
+                                length: 6,
+                                controller: Provider.of<SignupProvider>(context,
+                                        listen: false)
+                                    .otpController,
                               ),
-                            ],
-                          ),
-                        ),
-                        Visibility(
-                          visible: Provider.of<SignupProvider>(context,listen: true).enableResend,
-                          child: InkWell(
-                            onTap: (){
-                              provider.resendCode(context);
-                            },
-                            child: Container(
-                              alignment: Alignment.center,
-                              child: CommonText(text:"Resend",textStyle: CustomTextStyle(color: AppColor.APP_BAR_COLOUR,fontSize: 16.ss)),
-                            ),
-                          ),
-                        ),
-                        Gap(20.ss),
-                        Center(
-                          child: InkWell(
-                              onTap: () {},
-                              child: SizedBox(
-                                height: 50.ss,
-                                child: ElevatedButton(
-                                  style: ElevatedButton.styleFrom(
-                                    backgroundColor: Provider.of<SignupProvider>(context,listen: true).otpController.text.isNotEmpty &&
-                                        Provider.of<SignupProvider>(context,listen: true).otpController.text.length==6
-                                        ? AppColor.APP_BAR_COLOUR
-                                        : Colors.grey,
-                                    padding:  EdgeInsets.symmetric(
-                                      horizontal: 20.ss,
+                              Gap(10.ss),
+                              Visibility(
+                                visible: Provider.of<SignupProvider>(context,
+                                            listen: true)
+                                        .enableResend
+                                    ? false
+                                    : true,
+                                child: Row(
+                                  mainAxisAlignment: MainAxisAlignment.center,
+                                  children: [
+                                    Container(
+                                      alignment: Alignment.center,
+                                      child: CommonText(
+                                        text:
+                                            "Resend otp after ${context.watch<SignupProvider>().secondsRemaining} seconds",
+                                        textStyle: CustomTextStyle(
+                                            color: AppColor.APP_BAR_COLOUR),
+                                      ),
                                     ),
-                                  ),
-                                  onPressed: () {
-
-                                    // Utils().printMessage("_fieldSix.text.isNotEmpty=>${_fieldSix.text.isNotEmpty}");
-                                    Provider.of<SignupProvider>(context,listen: false).otpController.text.length==6?provider.otpPagevalidation(context, provider.otpController.text):null;
+                                  ],
+                                ),
+                              ),
+                              Visibility(
+                                visible: Provider.of<SignupProvider>(context,
+                                        listen: true)
+                                    .enableResend,
+                                child: InkWell(
+                                  onTap: () {
+                                    provider.resendCode(context);
                                   },
-                                  child: const Text(
-                                    "Verify OTP",
-                                    style: TextStyle(color: Colors.white),
+                                  child: Container(
+                                    alignment: Alignment.center,
+                                    child: CommonText(
+                                        text: "Resend",
+                                        textStyle: CustomTextStyle(
+                                            color: AppColor.APP_BAR_COLOUR,
+                                            fontSize: 16.ss)),
                                   ),
                                 ),
-                              )),
-                        ),
-                      ],
-                    )),
-
-                    Expanded(
-                      flex: 1,
-                      child: Column(
-                        mainAxisAlignment: MainAxisAlignment.end,
-                        children: [
-                          Container(
-                            height: size.height/4.ss,
-                            decoration: BoxDecoration(
-                                image: DecorationImage(fit: BoxFit.fitWidth,
-                                    image: AssetImage("assets/images/login_bottom_background.png")
-                                )
+                              ),
+                              Gap(20.ss),
+                              Center(
+                                child: InkWell(
+                                    onTap: () {},
+                                    child: SizedBox(
+                                      height: 50.ss,
+                                      child: ElevatedButton(
+                                        style: ElevatedButton.styleFrom(
+                                          backgroundColor: Provider.of<
+                                                              SignupProvider>(
+                                                          context,
+                                                          listen: true)
+                                                      .otpController
+                                                      .text
+                                                      .isNotEmpty &&
+                                                  Provider.of<SignupProvider>(
+                                                              context,
+                                                              listen: true)
+                                                          .otpController
+                                                          .text
+                                                          .length ==
+                                                      6
+                                              ? AppColor.APP_BAR_COLOUR
+                                              : Colors.grey,
+                                          padding: EdgeInsets.symmetric(
+                                            horizontal: 20.ss,
+                                          ),
+                                        ),
+                                        onPressed: () {
+                                          // Utils().printMessage("_fieldSix.text.isNotEmpty=>${_fieldSix.text.isNotEmpty}");
+                                          Provider.of<SignupProvider>(context,
+                                                          listen: false)
+                                                      .otpController
+                                                      .text
+                                                      .length ==
+                                                  6
+                                              ? provider.otpPagevalidation(
+                                                  context,
+                                                  provider.otpController.text)
+                                              : null;
+                                        },
+                                        child: const Text(
+                                          "Verify OTP",
+                                          style: TextStyle(color: Colors.white),
+                                        ),
+                                      ),
+                                    )),
+                              ),
+                            ],
+                          )),
+                      Expanded(
+                        flex: 1,
+                        child: Column(
+                          mainAxisAlignment: MainAxisAlignment.end,
+                          children: [
+                            Container(
+                              height: size.height / 4.ss,
+                              decoration: BoxDecoration(
+                                  image: DecorationImage(
+                                      fit: BoxFit.fitWidth,
+                                      image: AssetImage(
+                                          "assets/images/login_bottom_background.png"))),
                             ),
-                          ),
-                        ],
-                      ),
-                    )
-
-
-
-                  ],
+                          ],
+                        ),
+                      )
+                    ],
+                  ),
                 ),
               ),
-            ),
       ),
     );
   }
diff --git a/lib/features/auth/data/api/auth_api_client/auth_api_client.dart b/lib/features/auth/data/api/auth_api_client/auth_api_client.dart
index 80b6e42..db2d27d 100644
--- a/lib/features/auth/data/api/auth_api_client/auth_api_client.dart
+++ b/lib/features/auth/data/api/auth_api_client/auth_api_client.dart
@@ -29,7 +29,7 @@ class AuthApiClient extends GetConnect {
 
     try {
       Utils().printMessage(response.data.toString());
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> responseMap = response.data;
           LoginModel model = LoginModel.fromJson(responseMap);
@@ -58,7 +58,7 @@ class AuthApiClient extends GetConnect {
         queryParameters: {});
 
     try {
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         Utils().printMessage(response.data.toString());
         if (response.data['success'] == true) {
           return Resource(
@@ -195,7 +195,7 @@ class AuthApiClient extends GetConnect {
 
     try {
       Utils().printMessage(response.data.toString());
-      if (response != null && response.status == STATUS.SUCCESS) {
+      if (response.status == STATUS.SUCCESS) {
         if (response.data["success"] == true) {
           Map<String, dynamic> responseMap = response.data;
           RegistrationSuccessModel model =
@@ -320,10 +320,10 @@ class AuthApiClient extends GetConnect {
         //     // ||
         //     //     response.data['success'] == false
         //     ) {
-          return Resource(
-              status: STATUS.SUCCESS,
-              data: response.data,
-              message: response.data['message']);
+        return Resource(
+            status: STATUS.SUCCESS,
+            data: response.data,
+            message: response.data['message']);
         // } else {
         //   return Resource.error(message: response.data["message"].toString());
         // }
diff --git a/lib/main.dart b/lib/main.dart
index 631f133..e0e63d3 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -1,5 +1,4 @@
 import 'dart:io';
-
 import 'package:bizfns/core/utils/bizfns_layout_widget.dart';
 import 'package:bizfns/core/utils/colour_constants.dart';
 import 'package:bizfns/features/Home/dashboard.dart';
@@ -51,32 +50,40 @@ final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
 Future<void> showNotification(RemoteMessage message) async {
   AndroidNotificationDetails androidNotificationDetails =
       AndroidNotificationDetails(
-          androidChannel.id.toString(), androidChannel.name.toString(),
-          channelDescription: 'your channel description',
-          importance: Importance.high,
-          priority: Priority.high,
-          playSound: true,
-          ticker: 'ticker',
-          icon: '@mipmap/launcher_icon',
-          colorized: true,
-          color: AppColor.APP_BAR_COLOUR,
-          sound: androidChannel.sound);
+    androidChannel.id.toString(),
+    androidChannel.name.toString(),
+    channelDescription: 'your channel description',
+    importance: Importance.high,
+    priority: Priority.high,
+    playSound: true,
+    ticker: 'ticker',
+    icon: '@mipmap/launcher_icon',
+    colorized: true,
+    color: AppColor.APP_BAR_COLOUR,
+    sound: androidChannel.sound,
+  );
 
   const DarwinNotificationDetails darwinNotificationDetails =
       DarwinNotificationDetails(
-          presentAlert: true, presentBadge: true, presentSound: true);
+    presentAlert: true,
+    presentBadge: true,
+    presentSound: true,
+  );
 
   NotificationDetails notificationDetails = NotificationDetails(
       android: androidNotificationDetails, iOS: darwinNotificationDetails);
 
-  Future.delayed(Duration.zero, () {
-    flutterLocalNotificationsPlugin.show(
-      0,
-      message.notification!.title.toString(),
-      message.notification!.body.toString(),
-      notificationDetails,
-    );
-  });
+  Future.delayed(
+    Duration.zero,
+    () {
+      flutterLocalNotificationsPlugin.show(
+        0,
+        message.notification!.title.toString(),
+        message.notification!.body.toString(),
+        notificationDetails,
+      );
+    },
+  );
 }
 
 Future forgroundMessage() async {
@@ -97,11 +104,13 @@ void initLocalNotifications(RemoteMessage message) async {
   var initializationSetting = InitializationSettings(
       android: androidInitializationSettings, iOS: iosInitializationSettings);
 
-  await flutterLocalNotificationsPlugin.initialize(initializationSetting,
-      onDidReceiveNotificationResponse: (payload) {
-    // handle interaction when app is active for android
-    handleMessage(message);
-  });
+  await flutterLocalNotificationsPlugin.initialize(
+    initializationSetting,
+    onDidReceiveNotificationResponse: (payload) {
+      // handle interaction when app is active for android
+      handleMessage(message);
+    },
+  );
 }
 
 main() async {
@@ -140,19 +149,21 @@ main() async {
     );
     // Set the background messaging handler early on, as a named top-level function
     //FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
-    FirebaseMessaging.onMessage.listen((event) {
-      RemoteNotification? notification = event.notification;
-      AndroidNotification? android = event.notification!.android;
-
-      if (Platform.isIOS) {
-        forgroundMessage();
-      }
-
-      if (Platform.isAndroid) {
-        initLocalNotifications(event);
-        showNotification(event);
-      }
-    });
+    FirebaseMessaging.onMessage.listen(
+      (event) {
+        // RemoteNotification? notification = event.notification;
+        // AndroidNotification? android = event.notification!.android;
+
+        if (Platform.isIOS) {
+          forgroundMessage();
+        }
+
+        if (Platform.isAndroid) {
+          initLocalNotifications(event);
+          showNotification(event);
+        }
+      },
+    );
   }
 
   runApp(
@@ -200,7 +211,7 @@ void configLoading() {
     ..backgroundColor = Colors.green
     ..indicatorColor = Colors.yellow
     ..textColor = Colors.yellow
-    ..maskColor = Colors.blue.withOpacity(0.5)
+    ..maskColor = const Color(0x800000FF)
     ..userInteractions = true
     ..dismissOnTap = false;
   // ..customAnimation = EasyLoadingAnimation();
diff --git a/lib/provider/job_schedule_controller.dart b/lib/provider/job_schedule_controller.dart
index 376e119..9de402e 100644
--- a/lib/provider/job_schedule_controller.dart
+++ b/lib/provider/job_schedule_controller.dart
@@ -1,8 +1,5 @@
 import 'dart:convert';
-
-// import 'dart:html';
 import 'package:bizfns/core/route/NavRouter.dart';
-import 'package:googleapis/admin/directory_v1.dart';
 import 'package:http/http.dart' as http;
 import 'dart:developer';
 import 'dart:io';
@@ -29,7 +26,6 @@ import 'package:url_launcher/url_launcher.dart';
 import '../core/common/Status.dart';
 import '../core/shared_pref/shared_pref.dart';
 import '../core/utils/Utils.dart';
-import '../core/utils/bizfns_layout_widget.dart';
 import '../core/utils/const.dart';
 import '../features/Admin/Create Job/ScheduleJobPages/preview_customer_invoice.dart';
 import '../features/Admin/Create Job/ScheduleJobPages/view_all_created_invoices.dart';
@@ -46,7 +42,6 @@ import '../features/Admin/Customer/provider/customer_provider.dart';
 import '../features/Admin/Material/provider/material_provider.dart';
 import '../features/Admin/Service/provider/service_provider.dart';
 import '../features/Admin/Staff/provider/staff_provider.dart';
-import '../features/Settings/staff_permission_screen.dart';
 import '../features/Settings/widget/max_job_task_widget.dart';
 import '../features/Settings/widget/reminder_widget.dart';
 import '../features/Settings/widget/time_interval_widget.dart';
@@ -113,8 +108,11 @@ class JobScheduleProvider extends ChangeNotifier {
   }
 
   Future<void> _launchUrl(double lat, double long) async {
-    if (!await launchUrl(Uri.parse(
-        'https://www.google.com/maps/search/?api=1&query=${lat},${long}'))) {
+    if (!await launchUrl(
+      Uri.parse(
+        'https://www.google.com/maps/search/?api=1&query=${lat},${long}',
+      ),
+    )) {
       throw Exception('Could not launch ');
     }
   }
@@ -153,8 +151,8 @@ class JobScheduleProvider extends ChangeNotifier {
   doneYourPayment() {
     isPaymentDone = true;
     model.paymentModeId = selectedValue;
-    print("Selected val : ${selectedValue}");
-    print("Selected paylater duration val : ${selectedPayLetterDurationValue}");
+    print("Selected val : $selectedValue");
+    print("Selected paylater duration val : $selectedPayLetterDurationValue");
     if (selectedPayLetterDurationValue != null) {
       model.paymentTypeId = "$selectedPayLetterDurationValue-\$$depositAmount";
       notifyListeners();
@@ -324,7 +322,11 @@ class JobScheduleProvider extends ChangeNotifier {
         7,
         (index) => index == 6
             ? '${DateFormat('MMM').format(_date)} \n ${_date.day}'
-            : '${DateFormat('MMM').format(_date.subtract(Duration(days: dayCount - index)))} \n ${_date.subtract(Duration(days: dayCount - index)).day}',
+            : '${DateFormat('MMM').format(
+                _date.subtract(
+                  Duration(days: dayCount - index),
+                ),
+              )} \n ${_date.subtract(Duration(days: dayCount - index)).day}',
       );
 
       dates.addAll(_dates);
@@ -357,9 +359,17 @@ class JobScheduleProvider extends ChangeNotifier {
           (index) => index == dayCount
               ? '${DateFormat('MMM').format(_date)} \n ${_date.day}'
               : index > dayCount
-                  ? '${DateFormat('MMM').format(_date.add(Duration(days: index - dayCount)))} \n ${_date.add(Duration(days: index - dayCount)).day}'
+                  ? '${DateFormat('MMM').format(
+                      _date.add(
+                        Duration(days: index - dayCount),
+                      ),
+                    )} \n ${_date.add(Duration(days: index - dayCount)).day}'
                   : index < dayCount
-                      ? '${DateFormat('MMM').format(_date.subtract(Duration(days: dayCount - index)))} \n ${_date.subtract(Duration(days: dayCount - index)).day}'
+                      ? '${DateFormat('MMM').format(
+                          _date.subtract(
+                            Duration(days: dayCount - index),
+                          ),
+                        )} \n ${_date.subtract(Duration(days: dayCount - index)).day}'
                       : '');
 
       _dates.remove('');
@@ -455,11 +465,6 @@ class JobScheduleProvider extends ChangeNotifier {
             swipeValue = dragValue ?? 0;
 
             notifyListeners();
-            // }
-            // } catch (e, stackTrace) {
-            //   print(stackTrace.toString());
-            //   Utils().ShowErrorSnackBar(context, "Failed", SomethingWentWrong);
-            // }
           }
 
           loading = false;
@@ -497,13 +502,9 @@ class JobScheduleProvider extends ChangeNotifier {
     print("schedule value=====>$jsonBody");
     loading = true;
     EasyLoading.show(
-        status: "Loading", indicator: const CircularProgressIndicator());
-
-    // for (var i = 0; i < model.images!.length; i++) {
-    //   print('obj1');
-    //   await ScheduleAPIClientImpl().addImage(image: model.images![i]);
-    //   await Future.delayed(Duration(milliseconds: 100));
-    // }
+      status: "Loading",
+      indicator: const CircularProgressIndicator(),
+    );
 
     scheduleRepo.addSchedule(scheduleData: jsonBody).then((value) async {
       if (value.status == STATUS.SUCCESS) {
@@ -552,17 +553,7 @@ class JobScheduleProvider extends ChangeNotifier {
                 ///
                 ///
                 await context.read<ServiceProvider>().getServiceList(context);
-                // timeScheduleController = await Provider.of<JobScheduleProvider>(
-                //     context,
-                //     listen: false);
-                // GoRouter.of(context).goNamed('create-schedule', extra: {
-                //   'time': getTime(timeScheduleController
-                //       .items[0]
-                //       .jobList![Provider.of<JobScheduleProvider>(context,
-                //               listen: false)
-                //           .timeIndex]
-                //       .time!),
-                // });
+
                 GoRouter.of(context).pop();
                 GoRouter.of(context).goNamed('schedule');
                 //Navigate.NavigatePushUntil(context, SCHEDULE_PAGE, params: {});
@@ -1087,36 +1078,34 @@ class JobScheduleProvider extends ChangeNotifier {
 
             try {
               List<ServiceEntityItems> list = resp.data!.serviceEntityItems!;
-              if (list != null) {
-                print('Length: ${list.length}');
-                print(
-                    'Response Length: ${resp.data!.serviceEntityItems!.length}');
-                entityType = resp.message ?? '';
-                items.clear();
-                getScheduleList(context);
-                keys.clear();
-                for (int index = 0; index < list.length; index++) {
-                  List<String> answerItems = [];
-
-                  if (list[index].items != null) {
-                    answerItems.addAll(
-                        list[index].items!.map((e) => e.toString()).toList());
-                  }
-
-                  serviceEntityItems.add(
-                    ServiceEntityItems(
-                      typeId: list[index].typeId,
-                      answer: list[index].answer,
-                      items: answerItems,
-                      question: list[index].question,
-                      rowItems: list[index].rowItems,
-                      questionId: list[index].questionId,
-                    ),
-                  );
+              print('Length: ${list.length}');
+              print(
+                  'Response Length: ${resp.data!.serviceEntityItems!.length}');
+              entityType = resp.message ?? '';
+              items.clear();
+              getScheduleList(context);
+              keys.clear();
+              for (int index = 0; index < list.length; index++) {
+                List<String> answerItems = [];
+
+                if (list[index].items != null) {
+                  answerItems.addAll(
+                      list[index].items!.map((e) => e.toString()).toList());
                 }
 
-                notifyListeners();
+                serviceEntityItems.add(
+                  ServiceEntityItems(
+                    typeId: list[index].typeId,
+                    answer: list[index].answer,
+                    items: answerItems,
+                    question: list[index].question,
+                    rowItems: list[index].rowItems,
+                    questionId: list[index].questionId,
+                  ),
+                );
               }
+
+              notifyListeners();
             } catch (e) {
               print(e.toString());
               Utils().ShowErrorSnackBar(context, "Failed", SomethingWentWrong);
@@ -1171,7 +1160,7 @@ class JobScheduleProvider extends ChangeNotifier {
         status: "Loading", indicator: const CircularProgressIndicator());
     /*List<String> deviceDetails = await Utils.getDeviceDetails();
     String? userId = await GlobalHandler.getUserId();*/
-    String? companyId = await GlobalHandler.getCompanyId();
+    // String? companyId = await GlobalHandler.getCompanyId();
     scheduleRepo
         .getServiceEntityDetails(
       customerID: customerID,
@@ -1193,65 +1182,63 @@ class JobScheduleProvider extends ChangeNotifier {
             try {
               List<ServiceEntityItems> list = resp.data!.serviceEntityItems!;
 
-              if (list != null) {
-                print('Length: ${list.length}');
-                print(
-                    'Response Length: ${resp.data!.serviceEntityItems!.length}');
-                // entityType = resp.message ?? '';
-                items.clear();
-                keys.clear();
-                for (int index = 0; index < list.length; index++) {
-                  //print('Question ID: ${list[index].questionId!}');
-
-                  List<String> answerItems = [];
-
-                  if (list[index].items != null) {
-                    answerItems.addAll(
-                        list[index].items!.map((e) => e.toString()).toList());
-                  }
+              print('Length: ${list.length}');
+              print(
+                  'Response Length: ${resp.data!.serviceEntityItems!.length}');
+              // entityType = resp.message ?? '';
+              items.clear();
+              keys.clear();
+              for (int index = 0; index < list.length; index++) {
+                //print('Question ID: ${list[index].questionId!}');
 
-                  serviceEntityItems.add(
-                    ServiceEntityItems(
-                      typeId: list[index].typeId,
-                      answer: list[index].answer,
-                      items: answerItems,
-                      question: list[index].question,
-                      rowItems: list[index].rowItems,
-                      questionId: list[index].questionId,
-                    ),
-                  );
-                }
+                List<String> answerItems = [];
 
-                print(
-                    'Service Entity Items Length: ${serviceEntityItems.length}');
+                if (list[index].items != null) {
+                  answerItems.addAll(
+                      list[index].items!.map((e) => e.toString()).toList());
+                }
 
-                serviceEntityItems.forEach((element) {
-                  Map<String, dynamic> answer = {
-                    'question': element.question,
-                    'answer': element.answer,
-                  };
+                serviceEntityItems.add(
+                  ServiceEntityItems(
+                    typeId: list[index].typeId,
+                    answer: list[index].answer,
+                    items: answerItems,
+                    question: list[index].question,
+                    rowItems: list[index].rowItems,
+                    questionId: list[index].questionId,
+                  ),
+                );
+              }
 
-                  answerList.add(answer);
-                });
+              print(
+                  'Service Entity Items Length: ${serviceEntityItems.length}');
 
-                print(answerList);
-
-                Map<String, dynamic> map = {
-                  "item": "",
-                  "data": answerList
-                      .map((e) => {
-                            "question_id": e['question_id'].toString(),
-                            "question_name": e['question'],
-                            "answer": e['answer'],
-                            "answer_type_id": e['answer_type'],
-                          })
-                      .toList()
+              serviceEntityItems.forEach((element) {
+                Map<String, dynamic> answer = {
+                  'question': element.question,
+                  'answer': element.answer,
                 };
 
-                model.serviceEntity = map;
+                answerList.add(answer);
+              });
+
+              print(answerList);
+
+              Map<String, dynamic> map = {
+                "item": "",
+                "data": answerList
+                    .map((e) => {
+                          "question_id": e['question_id'].toString(),
+                          "question_name": e['question'],
+                          "answer": e['answer'],
+                          "answer_type_id": e['answer_type'],
+                        })
+                    .toList()
+              };
 
-                notifyListeners();
-              }
+              model.serviceEntity = map;
+
+              notifyListeners();
             } catch (e) {
               print(e.toString());
               Utils().ShowErrorSnackBar(context, "Failed", SomethingWentWrong);
@@ -1697,8 +1684,8 @@ class JobScheduleProvider extends ChangeNotifier {
         } else {
           //error dialog
           EasyLoading.dismiss();
-          Utils().ShowErrorSnackBar(
-              rootNavigatorKey.currentContext!, "Error", value.message ?? "Unable to save data");
+          Utils().ShowErrorSnackBar(rootNavigatorKey.currentContext!, "Error",
+              value.message ?? "Unable to save data");
         }
       });
     } catch (e) {
@@ -1946,7 +1933,8 @@ class JobScheduleProvider extends ChangeNotifier {
           EasyLoading.dismiss();
           Utils().ShowSuccessSnackBar(rootNavigatorKey.currentContext!,
               "Success", "Reminder events have been modified");
-          await getReminder(rootNavigatorKey.currentContext!,openDialogue: false);
+          await getReminder(rootNavigatorKey.currentContext!,
+              openDialogue: false);
           notifyListeners();
         } else {
           //error dialog
@@ -2554,22 +2542,20 @@ class JobScheduleProvider extends ChangeNotifier {
 
         try {
           List<ReccurrData> list = resp.data ?? [];
-          if (list != null) {
-            print('Length: ${list.length}');
-            print('Response Length: ${resp.data!.length}');
-
-            reccurrDateList.clear();
+          print('Length: ${list.length}');
+          print('Response Length: ${resp.data!.length}');
 
-            for (int index = 0; index < list.length; index++) {
-              reccurrDateList.add(ReccurrData(
-                startTime: list[index].startTime,
-                endTime: list[index].endTime,
-              ));
-            }
-            model.totalJobs = reccurrDateList.length.toString();
+          reccurrDateList.clear();
 
-            notifyListeners();
+          for (int index = 0; index < list.length; index++) {
+            reccurrDateList.add(ReccurrData(
+              startTime: list[index].startTime,
+              endTime: list[index].endTime,
+            ));
           }
+          model.totalJobs = reccurrDateList.length.toString();
+
+          notifyListeners();
         } catch (e) {
           print(e.toString());
           model.recurrType = null;
@@ -2632,11 +2618,11 @@ class JobScheduleProvider extends ChangeNotifier {
               for (var item in unAvailableStaffs) {
                 ///todo: remove this staff from the model
                 ///
-                int indexOfStaff = model.staffList!
-                    .map((e) => e.staffName)
-                    .toList()
-                    .indexOf(
-                        '${item.uSERFIRSTNAME!.capitalizeFirst} ${item.uSERLASTNAME!.capitalizeFirst!}');
+                // int indexOfStaff = model.staffList!
+                //     .map((e) => e.staffName)
+                //     .toList()
+                //     .indexOf(
+                //         '${item.uSERFIRSTNAME!.capitalizeFirst} ${item.uSERLASTNAME!.capitalizeFirst!}');
 
                 //this piece of code auto remove staff
                 // model.staffList!.removeAt(indexOfStaff);
@@ -2882,7 +2868,7 @@ class JobScheduleProvider extends ChangeNotifier {
             context, "Success", 'Status has been changed successfully');
         try {
           if (value.data != null) {
-            SaveJobStatusResponse resp = value.data as SaveJobStatusResponse;
+            // SaveJobStatusResponse resp = value.data as SaveJobStatusResponse;
             getJobStatus(jobId: jobId);
 
             // newJobStatus = resp.data!.statuses![0].toString() ?? '0';
@@ -3082,11 +3068,11 @@ class JobScheduleProvider extends ChangeNotifier {
           ));
         }
 
-        model!.materialList = materialList;
+        model.materialList = materialList;
 
         notifyListeners();
       } else {
-        model!.materialList = [];
+        model.materialList = [];
         Utils().printMessage('Material Empty');
       }
     } else {
@@ -3135,7 +3121,7 @@ class JobScheduleProvider extends ChangeNotifier {
           ));
         }
 
-        model!.serviceList = serviceList;
+        model.serviceList = serviceList;
 
         notifyListeners();
       } else {
